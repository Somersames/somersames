<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Somersames</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://somersames.github.io/"/>
  <updated>2019-12-16T16:46:20.162Z</updated>
  <id>https://somersames.github.io/</id>
  
  <author>
    <name>Somersames</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mysql中int类型的简单总结</title>
    <link href="https://somersames.github.io/2019/12/17/Mysql%E4%B8%ADint%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/"/>
    <id>https://somersames.github.io/2019/12/17/Mysql中int类型的简单总结/</id>
    <published>2019-12-16T16:33:00.000Z</published>
    <updated>2019-12-16T16:46:20.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>首先问两个问题：</p><ol><li>int(1)和int(10)有什么区别。</li><li>int(3)可以存储 10000 这个数字吗？</li><li>int(11)可以用来存储手机号么？</li></ol><p>本次的源代码以及测试的 Mysql 版本均为 8.0.17</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>首先新建一个表，SQL如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_int(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span> ,</span><br><span class="line">    <span class="keyword">no</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    phone <span class="built_in">int</span>(<span class="number">11</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure></p><p>当你执行完这个 SQL 以后，Mysql会发出一个如下提示：</p><blockquote><p>[2019-12-16 23:08:24] [HY000][1681] Integer display width is deprecated and will be removed in a future release.<br>首先不管这个提示，待会后文会解释的。</p></blockquote><p> 然后新增测试数据：<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`test_int`</span> (<span class="string">`id`</span>, <span class="string">`no`</span>, <span class="string">`phone`</span>) <span class="keyword">VALUES</span> (<span class="number">10000</span>, <span class="number">1008611</span>, <span class="number">123124</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`test_int`</span> (<span class="string">`id`</span>, <span class="string">`no`</span>, <span class="string">`phone`</span>) <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="number">134</span>, <span class="number">124</span>);</span><br></pre></td></tr></table></figure></p><p> 然后再进行 select 查看。<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> mysql&gt; select * from test_int;</span><br><span class="line">+<span class="comment">-------+---------+--------+</span></span><br><span class="line">| id    | no      | phone  |</span><br><span class="line">+<span class="comment">-------+---------+--------+</span></span><br><span class="line">|    10 |     134 |    124 |</span><br><span class="line">| 10000 | 1008611 | 123124 |</span><br><span class="line">+<span class="comment">-------+---------+--------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p> 可以看到其实并没有影响到任何数据的插入，随后查询 Mysql 的官方文档，里面有这样的一段话</p><blockquote><p>If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column.</p></blockquote><p>随后再次新建一个表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_int_zerofill(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> zerofill <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span> ,</span><br><span class="line">    <span class="keyword">no</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> zerofill <span class="keyword">not</span> <span class="literal">null</span> ,</span><br><span class="line">    phone <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> zerofill</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line">The ZEROFILL attribute is deprecated and will be removed in a future release. <span class="keyword">Use</span> the <span class="keyword">LPAD</span> <span class="keyword">function</span> <span class="keyword">to</span> zero-<span class="keyword">pad</span> numbers, <span class="keyword">or</span> <span class="keyword">store</span> the formatted numbers <span class="keyword">in</span> a <span class="built_in">CHAR</span> column.</span><br></pre></td></tr></table></figure></p><p>虽然提示 ZEROFILL 快要被废弃了，但是为了演示区别，所以暂时还是不管了。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_int_zerofill;</span><br><span class="line">+<span class="comment">-------+--------+-------------+</span></span><br><span class="line">| id    | no     | phone       |</span><br><span class="line">+<span class="comment">-------+--------+-------------+</span></span><br><span class="line">|   010 |  00010 | 00000000010 |</span><br><span class="line">| 12345 | 123456 | 00001234567 |</span><br><span class="line">+<span class="comment">-------+--------+-------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>所以对于问题1，所以 int(1) 和 int(10) 其实是没有区别的，唯一有区别的地方就在于如果使用了 <code>unsigned zerofill</code> 修饰的话，那么不足长度的会在左边进行补 0 ，而如果没有用 <code>unsigned zerofill</code> 进行修饰的话，可以说基本上是没有区别的。</p><p>对于问题2，因为 int 括号里面的值与位数无关， 所以是可以的。<br>到此，对于执行第一个SQL所进行的提示，是因为 Mysql 也觉得其实没什么意义，而是更加推荐用 <code>LDAP()</code> 这个函数来判断。</p><p>对于第二个问题，可以尝试一个手机号：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`test_int_zerofill`</span> (<span class="string">`id`</span>, <span class="string">`no`</span>, <span class="string">`phone`</span>) <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="number">10</span>, <span class="number">13100000000</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">22001</span>][<span class="number">1264</span>] <span class="keyword">Data</span> truncation: <span class="keyword">Out</span> <span class="keyword">of</span> <span class="keyword">range</span> <span class="keyword">value</span> <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">'phone'</span> <span class="keyword">at</span> <span class="keyword">row</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>出现这个问题的原因在于 int 类型在 mysql 里面是四个字节，而一个字节是 8 位，所以在 mysql 里面，一个int 类型最多可以储存 2^31(一个符号位置)，也就是约 21 亿左右，无符号的也最多42亿，但是手机号最低也是11位，也就是 130 多亿。所以肯定是无法存储的。<br>下面是 Mysql 官方给出的 num 类型的存储范围<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E6%88%AA%E5%B1%8F2019-12-17%E4%B8%8A%E5%8D%8812.25.08.png" alt=""></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>由于想看下 Mysql 到底是如何处理 int 类型的数值的，于是下载并且编译了 Mysql 的源码，一直跟着 debug，最后找到了 Mysql 判断 int 是否超长的一个代码，如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">type_conversion_status Field_long::store(<span class="keyword">double</span> nr) &#123;</span><br><span class="line">  ASSERT_COLUMN_MARKED_FOR_WRITE;</span><br><span class="line">  type_conversion_status error = TYPE_OK;</span><br><span class="line">  int32 res;</span><br><span class="line">  nr = rint(nr);</span><br><span class="line">  <span class="keyword">if</span> (unsigned_flag) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nr &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      res = <span class="number">0</span>;</span><br><span class="line">      error = TYPE_WARN_OUT_OF_RANGE;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nr &gt; (<span class="keyword">double</span>)UINT_MAX32) &#123;</span><br><span class="line">      res = UINT_MAX32;</span><br><span class="line">      set_warning(Sql_condition::SL_WARNING, ER_WARN_DATA_OUT_OF_RANGE, <span class="number">1</span>);</span><br><span class="line">      error = TYPE_WARN_OUT_OF_RANGE;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">      res = (int32)(ulong)nr;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nr &lt; (<span class="keyword">double</span>)INT_MIN32) &#123;</span><br><span class="line">      res = (int32)INT_MIN32;</span><br><span class="line">      error = TYPE_WARN_OUT_OF_RANGE;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nr &gt; (<span class="keyword">double</span>)INT_MAX32) &#123;</span><br><span class="line">      res = (int32)INT_MAX32;</span><br><span class="line">      error = TYPE_WARN_OUT_OF_RANGE;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">      res = (int32)(longlong)nr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (error)</span><br><span class="line">    set_warning(Sql_condition::SL_WARNING, ER_WARN_DATA_OUT_OF_RANGE, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WORDS_BIGENDIAN</span></span><br><span class="line">  <span class="keyword">if</span> (table-&gt;s-&gt;db_low_byte_first) &#123;</span><br><span class="line">    int4store(ptr, res);</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">#endif</span><br><span class="line">    longstore(ptr, res);</span><br><span class="line">  <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这段代码里面，Mysql首先会判断是否带有符号位，如果是无符号位的话，则是直接判断是否大于 UINT_MAX32，而如果是有符号的话，则是判断是否小于 INT_MIN32 或者大于 INT_MAX32，否则直接为最小或者最大值，然后设置error。<br>PS：这一段代码是还未进行 InnoDB 引擎层，可以看到 Mysql 是在 Server 层进行SQL语句的校验。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;首先问两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;int(1)和int(10)有什么区别。&lt;/li&gt;
&lt;li&gt;int(3)可以存储 10000 这
      
    
    </summary>
    
      <category term="Mysql" scheme="https://somersames.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://somersames.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>java validation 的国际化</title>
    <link href="https://somersames.github.io/2019/12/09/java-validation-%E7%9A%84%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    <id>https://somersames.github.io/2019/12/09/java-validation-的国际化/</id>
    <published>2019-12-09T14:56:38.000Z</published>
    <updated>2019-12-09T16:18:47.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在一个完整的项目里面，肯定是有各种各样的入参校验的，如果业务上的一些逻辑校验，可以放在 Service 层面进行，但是如果是 Controller 里面的校验，直接可以用 validation 进行验证。配合注解可以很方便的实现各种各样的入参校验。<br>如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"用户名称不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Max</span>(value = <span class="number">18</span>)</span><br><span class="line">    <span class="meta">@Min</span>(value = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后在Controller里面<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testError</span><span class="params">(@Valid  @RequestBody User user ,Errors errors)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(errors.hasErrors())&#123;</span><br><span class="line">        <span class="keyword">for</span> (ObjectError err : errors.getAllErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> err.getDefaultMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当入参的 JSON 如果 name 是空的话，就会直接返回 <code>用户名称不能为空</code>，当然这里是做了一些简化，返回的应该还有 Code 和 Message。这样的话一个简单的 Controller 检验入参就实现的，但是为了扩展性和可维护性，还需要考虑<code>国际化</code>以及<code>可配置化</code>。</p><h2 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h2><p>如果在之后需要更改一个校验的提示语，那么在上面的代码里面是需要修改代码的，那么最好的办法就是把这些提示信息都加到配置文件中，那么以后需要修改某些提示的话，直接改配置文件即可。<br>在 Spring 官方文档的 <strong>4.7.1</strong> 中有一个类 <code>MessageCodesResolver</code> 可以用来实现错误信息的可配置化</p><h3 id="MessageCodesResolver"><a href="#MessageCodesResolver" class="headerlink" title="MessageCodesResolver"></a>MessageCodesResolver</h3><p>这个类需要和<code>spring.mvc.message-codes-resolver-format</code>一起来使用，根据官方文档的提示，查看<code>DefaultMessageCodesResolver.Format</code>，会发现这个参数有两个枚举，一个是 PREFIX_ERROR_CODE，另一个是 POSTFIX_ERROR_CODE。<br>这两个什么意思呢，简单来讲，根据上面的 User 类，如果我要配置当 name 不为空的提示语，下面两种枚举对应在配置文件中的键值是不一样的。</p><ol><li>PREFIX_ERROR_CODE<blockquote><p>NotBlank.user.name = 用户名称不能为空</p></blockquote></li><li>POSTFIX_ERROR_CODE。<blockquote><p>user.name.NotBlank = 用户名称不能为空</p></blockquote></li></ol><p>个人偏向于第二种写法的，因为感觉第二种更加符合阅读习惯。</p><h2 id="messgae配置文件"><a href="#messgae配置文件" class="headerlink" title="messgae配置文件"></a>messgae配置文件</h2><p>既然需要做成配置文件，那么在 application.yml 里面把一些属性都配置好，如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  mvc:</span></span><br><span class="line"><span class="attr">    message-codes-resolver-format:</span> <span class="string">postfix_error_code</span></span><br><span class="line"><span class="attr">  messages:</span></span><br><span class="line"><span class="attr">    basename:</span> <span class="string">i18n/validation</span></span><br></pre></td></tr></table></figure></p><p>然后在 Resources 下面新建一个 validation.properties<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user.name.NotBlank = 用户名称不能为空</span><br><span class="line">user.age.Max = 年龄最高不能高于<span class="number">18</span></span><br><span class="line">user.age.Min = 年龄最高不能低于<span class="number">10</span></span><br></pre></td></tr></table></figure></p><h3 id="Controller-校验"><a href="#Controller-校验" class="headerlink" title="Controller 校验"></a>Controller 校验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">MessageSource messageSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"test/cn"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testErrorCn</span><span class="params">(@Valid  @RequestBody User user ,Errors errors)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(errors.hasErrors())&#123;</span><br><span class="line">        <span class="keyword">for</span> (ObjectError err : errors.getAllErrors()) &#123;</span><br><span class="line">            String msg = messageSource.getMessage(err, Locale.CHINA);</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里暂时先不管 <code>Locale.CHINA</code> 这个参数的含义，首先通过 errors 先判断入参是否有问题，有的话直接通过 messageSource.getMessage() 方法直接返回错误信息即可。</p><h3 id="PsotMan测试"><a href="#PsotMan测试" class="headerlink" title="PsotMan测试"></a>PsotMan测试</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /test/cn HTTP/<span class="number">1.1</span></span><br><span class="line">Host: localhost:<span class="number">8071</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"age"</span>:<span class="number">15</span>&#125;</span><br></pre></td></tr></table></figure><p>返回：用户名称不能为空</p><p>那么以后如果需要修改返回提示的话，直接修改配置文件即可，从而不需要修改代码。</p><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><p>如果需要将该提示国际化，直接修改配置文件即可，新建两个配置文件<code>validation_zh_CN.properties</code>，<code>validation_en_US.properties</code>，然后分别新建提示配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">validation_zh_CN.properties：</span><br><span class="line">user.name.NotBlank = 用户名称不能为空</span><br><span class="line">user.age.Max = 年龄最高不能高于18</span><br><span class="line">user.age.Min = 年龄最高不能低于10</span><br><span class="line"></span><br><span class="line">validation_en_US.properties：</span><br><span class="line">user.name.NotBlank = user name can not be null</span><br><span class="line">user.age.Max = the max gae can not grater than 18</span><br><span class="line">user.age.Min = the max gae can not less than 10</span><br></pre></td></tr></table></figure></p><p>此时在Controller里面代如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testError</span><span class="params">(@Valid  @RequestBody User user ,Errors errors)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(errors.hasErrors())&#123;</span><br><span class="line">            <span class="keyword">for</span> (ObjectError err : errors.getAllErrors()) &#123;</span><br><span class="line">                <span class="keyword">return</span> err.getDefaultMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"test/cn"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testErrorCn</span><span class="params">(@Valid  @RequestBody User user ,Errors errors)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(errors.hasErrors())&#123;</span><br><span class="line">            <span class="keyword">for</span> (ObjectError err : errors.getAllErrors()) &#123;</span><br><span class="line">                String msg = messageSource.getMessage(err, Locale.CHINA);</span><br><span class="line">                <span class="keyword">return</span> msg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"test/en"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testErrorEn</span><span class="params">(@Valid  @RequestBody User user ,Errors errors)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(errors.hasErrors())&#123;</span><br><span class="line">            <span class="keyword">for</span> (ObjectError err : errors.getAllErrors()) &#123;</span><br><span class="line">                String msg = messageSource.getMessage(err, Locale.US);</span><br><span class="line">                <span class="keyword">return</span> msg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>User的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Max</span>(value = <span class="number">18</span>)</span><br><span class="line">    <span class="meta">@Min</span>(value = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当我们请求 <code>test/en</code> 和 <code>test/cn</code>的时候就会出现不同的提示，</p><ol><li>test/en<blockquote><p>user name can not be null</p></blockquote></li><li>test/cn<blockquote><p>用户名称不能为空</p></blockquote></li></ol><p>这其中重要的实现就是 Locale.US 和 Locale.CHINA，在这里实现的话，最好是根据用户的选择语言来动态的切换实现Local的转换。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在一个完整的项目里面，肯定是有各种各样的入参校验的，如果业务上的一些逻辑校验，可以放在 Service 层面进行，但是如果是 Control
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java信号量的简单了解</title>
    <link href="https://somersames.github.io/2019/12/04/java%E4%BF%A1%E5%8F%B7%E9%87%8F%E7%9A%84%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3/"/>
    <id>https://somersames.github.io/2019/12/04/java信号量的简单了解/</id>
    <published>2019-12-03T16:20:45.000Z</published>
    <updated>2019-12-04T15:57:42.276Z</updated>
    
    <content type="html"><![CDATA[<!-- 信号量在计算机的操作系统以及并发的时候经常使用到，用于多个线程之间的通信。（待定） --><p>在Java语言里面，Semaphore 的作用是可以控制对于同一个临界资源，允许多少个线程同时执行。<br>当线程执行到临界区域的时候，需要先向 Semaphore 申请一个令牌，此时 Semaphore 会判断现有的的令牌是不是小于0，如果小于0，则阻塞当前线程，直至有线程将令牌归还回来。</p><h2 id="申请到了permits"><a href="#申请到了permits" class="headerlink" title="申请到了permits"></a>申请到了permits</h2><p>如果一个线程直接申请到了permits，则是直接通过CAS操作将 state 减一即可，然后线程继续执行。</p><h2 id="无法申请到permits"><a href="#无法申请到permits" class="headerlink" title="无法申请到permits"></a>无法申请到permits</h2><p>当无法申请到 Semaphore 的 permits 的时候，则会将当前的线程进行阻塞，直到有线程执行完毕，释放了 permit。</p><h3 id="Semaphore-的类关系"><a href="#Semaphore-的类关系" class="headerlink" title="Semaphore 的类关系"></a>Semaphore 的类关系</h3><p>那么在 <code>Semaphore</code> 里面，如果 <code>permits</code> 已经被降到0以下，按照信号量的规则，应当将当前线程阻塞，直到 <code>permits</code> 大于 0。查看 Semaphore 的类组织结构，会发现它的一些操作全部都是依赖于自己的一个 Sync 变量，此外还有两个变量用于实现公平锁和非公平锁，都是继承自 <code>Sync</code>，而 <code>Sync</code> 则是继承自 <code>AbstractQueuedSynchronizer</code> (下文简称AQS)。所以 Semaphore 的实现全部是依赖于 AQS。<br>以下为 Semaphore 的类图：<br> <img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/Semphore%E7%9A%84%E9%9D%9E%E5%85%AC%E5%B9%B3%E4%BE%9D%E8%B5%96.png" alt=""></p><!-- 在这里当获取的资源数已经成为了负数，那么首先会将上一个节点设置为`SINGLE`(-1)，这样的话，当上一个节点被释放或者被取消的话，那么它的后续节点就会运行， --><!-- AQS里面，独占锁的话是在释放锁的时候会进行通知下一个节点，但是共享锁却不是，它是在开始运行的时候就直接通知下一个节点， --><p>下面是一个例子来说明 Semaphore 是如何工作的。</p><p>如下Demo<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt; <span class="number">2</span> ;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> SemaphoreTest(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.currentThread().sleep(<span class="number">1000000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(no + <span class="string">"start"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            semaphore.acquire();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(no);</span><br><span class="line">        System.out.println(<span class="string">"semaphore"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.currentThread().sleep(<span class="number">10000</span>);</span><br><span class="line">            semaphore.release();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SemaphoreTest</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这个例子中，首先获取到 permits 的线程会执行，而第二个线程则会被阻塞，直到 permits 被释放。这也是 Semaphore 的目的，控制有多少个线程可以同时的访问某一个资源。</p><h4 id="设置permits"><a href="#设置permits" class="headerlink" title="设置permits"></a>设置permits</h4><p>在 Semaphore 里面，直接使用 AQS 里面的<code>state</code>变量来决定允许多少个线程同时访问一个资源，通过 Semaphore 的构造函数就可以发现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync(permits);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2694183684443567898L</span>;</span><br><span class="line"></span><br><span class="line">    NonfairSync(<span class="keyword">int</span> permits) &#123;</span><br><span class="line">        <span class="keyword">super</span>(permits);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nonfairTryAcquireShared(acquires);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该super就是调用 Sync 的构造函数，然后调用 AQS 里面的 <code>setState方法</code>，最后设置 AQS 的 state。</p><h4 id="获取permits"><a href="#获取permits" class="headerlink" title="获取permits"></a>获取permits</h4><p>当一个线程尝试调用 acquire 方法的时候，最终会通过 NonfairSync 的 tryAcquireShared 方法，在该方法里面，会获取当前线程的 state，然后减去入参带过来的参数（默认是 1 ），最后判断是否小于 0，若大于 0 的话，则直接采用 CAS 的操作将剩余的 state 替换掉。小于 0 的话，直接返回并且会进入另一个方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">nonfairTryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> available = getState();</span><br><span class="line">        <span class="keyword">int</span> remaining = available - acquires;</span><br><span class="line">        <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</span><br><span class="line">            compareAndSetState(available, remaining))</span><br><span class="line">            <span class="keyword">return</span> remaining;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetState</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// See below for intrinsics setup to support this</span></span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于 state 是由 <code>volatile</code> 修饰的，所以说当一个线程原子性的修改了 state，另一个线程也会立即获取到 state 的最新状态的。<br>这个方法不是一个原子性的，但是由于 CAS 操作是原子性的，那么最终还是能保证一致性的。如下：</p><ol><li>如果一个线程在获取到了 available 恰好为 1， 准备减去 1 的时候，此时另一个线程恰好 CAS 执行完毕，将 state 更新为 0 了，此时第一个线程在执行 CAS 的时候，由于 expect 已经修改为 0 了，所以此时 CAS 操作一定不成功。</li><li>如果在 getState 之前，state 已经被修改成 0 的，那么由于 <code>remaining &lt; 0</code>，所以直接返回 remaining。</li></ol><h4 id="线程阻塞"><a href="#线程阻塞" class="headerlink" title="线程阻塞"></a>线程阻塞</h4><p>在这里先简单介绍下线程的阻塞方式：<br>首先生成一个 Node，然后再判断下队列的尾部 tail 是不是为 null，如果是的话初始化 head 和 tail，并且将当前线程的 Node 的前置节点指向 head，然后通过 CAS 操作将 tail 设置为当前线程创建的 node， 最后将 head 的后置节点指向该节点。</p><p>然后再判断前置节点是不是 head，是的话就再次尝试获取 state，若获取不到则直接将前一个节点的 waitStatus 修改为 -1（即后置节点的线程需要被唤醒）然后直接通过<code>LockSupport.park(this)</code>将其阻塞。</p><p>当 CAS 操作失败，一般都是 state 已经小于 0 了，此时就会进入 doAcquireSharedInterruptibly 方法里面，在该方法里面会使用 AQS 里面的 FIFO 队列，来实现对于临界资源的控制。</p><h5 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h5><p>Semaphore 首先会进行创建一个 Node，在首次阻塞某一个线程的时候，由于 tail 为null，所以会直接进入 enq 方法，在该方法里面会将 tail 和 head 都设置为一个新的 node，然后展开第二次的循环，最后在将当前线程的 node 的 prev 指向 head，通过CAS操作将 tail 指定为该node，最后将 head 的 next 指向 该node（注意这一步为非原子性的，所以会影响到后面的release方法的一个判断）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">    Node pred = tail;</span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Node t = tail;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">                tail = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.prev = t;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这里，一个 FIFO 队列就生成了，此时 head 为一个node（waitStatus为0，next为被阻塞的线程），当从 addWaiter 方法返回的时候，Semaphore 还会进行一个判断，如果当前线程的前置节点是 head，就再次尝试一次获取 state，如果获取不到的话就将前置节点的 waitStatus 设置成 -1，然后通过<code>LockSupport.park(this)</code>将本线程中断，至此该线程被阻塞了。</p><p><strong>如果在判断前置节点是 head 之后，然后通过 tryAcquireShared 获取到了 state</strong> 那么此时就会调用 setHeadAndPropagate 将自己设置为头节点，同时判断是否需要唤醒后续的节点</p><h2 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h2><p>假如一个线程执行完毕之后，是会调用 release 方法来释放资源的，首先还是以 CAS 操作原子性的增加 state，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> current = getState();</span><br><span class="line">        <span class="keyword">int</span> next = current + releases;</span><br><span class="line">        <span class="keyword">if</span> (next &lt; current) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum permit count exceeded"</span>);</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(current, next))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doReleaseShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Ensure that a release propagates, even if there are other</span></span><br><span class="line"><span class="comment">        * in-progress acquires/releases.  This proceeds in the usual</span></span><br><span class="line"><span class="comment">        * way of trying to unparkSuccessor of head if it needs</span></span><br><span class="line"><span class="comment">        * signal. But if it does not, status is set to PROPAGATE to</span></span><br><span class="line"><span class="comment">        * ensure that upon release, propagation continues.</span></span><br><span class="line"><span class="comment">        * Additionally, we must loop in case a new node is added</span></span><br><span class="line"><span class="comment">        * while we are doing this. Also, unlike other uses of</span></span><br><span class="line"><span class="comment">        * unparkSuccessor, we need to know if CAS to reset status</span></span><br><span class="line"><span class="comment">        * fails, if so rechecking.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h != tail) &#123;</span><br><span class="line">            <span class="keyword">int</span> ws = h.waitStatus;</span><br><span class="line">            <span class="keyword">if</span> (ws == Node.SIGNAL) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">continue</span>;            <span class="comment">// loop to recheck cases</span></span><br><span class="line">                unparkSuccessor(h);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ws == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                        !compareAndSetWaitStatus(h, <span class="number">0</span>, Node.PROPAGATE))</span><br><span class="line">                <span class="keyword">continue</span>;                <span class="comment">// loop on failed CAS</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (h == head)                   <span class="comment">// loop if head changed</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * If status is negative (i.e., possibly needing signal) try</span></span><br><span class="line"><span class="comment">        * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class="line"><span class="comment">        * fails or if status is changed by waiting thread.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Thread to unpark is held in successor, which is normally</span></span><br><span class="line"><span class="comment">        * just the next node.  But if cancelled or apparently null,</span></span><br><span class="line"><span class="comment">        * traverse backwards from tail to find the actual</span></span><br><span class="line"><span class="comment">        * non-cancelled successor.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    Node s = node.next;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                s = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">        LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当 CAS 操作成功之后返回 true，然后调用 doReleaseShared 方法，在该方法里面，会首先将 head 的状态更改为 0，然后然后通过 unparkSuccessor 来唤醒后面的线程，在这里需要注意的是那一个 for 循环里面的代码。</p><h3 id="为什么for循环的时候需要从尾节点开始"><a href="#为什么for循环的时候需要从尾节点开始" class="headerlink" title="为什么for循环的时候需要从尾节点开始"></a>为什么for循环的时候需要从尾节点开始</h3><p>在这里其实是由于前面在设置尾节点的时候 CAS 虽然是一个原子性操作，但是在 CAS 操作之后，紧跟着 <code>pred.next = node</code> 这一步为非原子性的，所以就导致了有可能从头遍历的时候会断开掉，所以此时就需要从尾节点开始，因为这样一定不会断开的，也是最有保证的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 信号量在计算机的操作系统以及并发的时候经常使用到，用于多个线程之间的通信。（待定） --&gt;
&lt;p&gt;在Java语言里面，Semaphore 的作用是可以控制对于同一个临界资源，允许多少个线程同时执行。&lt;br&gt;当线程执行到临界区域的时候，需要先向 Semaphore 申请一
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java8中的流式简单总结</title>
    <link href="https://somersames.github.io/2019/11/22/Java8%E4%B8%AD%E7%9A%84%E6%B5%81%E5%BC%8F%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/"/>
    <id>https://somersames.github.io/2019/11/22/Java8中的流式简单总结/</id>
    <published>2019-11-21T16:03:01.000Z</published>
    <updated>2019-11-21T16:16:13.769Z</updated>
    
    <content type="html"><![CDATA[<p>在大量使用Java8中的流式操作之后，觉得用起来还挺舒服的，所以正好趁这个机会总结下。</p><p>使用Java8的lambda表达式的时候，需要先把集合转为一种流，也就是调用 stream 方法，但是 stream 却是 Collection 类里面的一个方法，也就是只有 Collection 的子类才可以使用，所以 Map 集合是使用不了的，同理，对于数组，可以通过<code>Arrays.stream()</code> 方法来讲数组转为一个Stream，这样也可以使用Stream里面的方法了，</p><h2 id="将集合转为流"><a href="#将集合转为流" class="headerlink" title="将集合转为流"></a>将集合转为流</h2><p>下面介绍几个很常用的方法来介绍流式操作的便捷性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">stringList.add(<span class="string">"a1"</span>);</span><br><span class="line">stringList.add(<span class="string">"b1"</span>);</span><br><span class="line">stringList.add(<span class="string">"a2"</span>);</span><br><span class="line">stringList.add(<span class="string">"b2"</span>);</span><br><span class="line">stringList.stream();</span><br></pre></td></tr></table></figure><p>这样我们就可以得到了一个流式操作，接下来就可以使用Stream里面定义好的方法了</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>该方法用于过滤我们设置的一些判断条件，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">streamFilter</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; result = list.stream().filter(item -&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"a"</span>.equals(item))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个只是一个普通的String数组遍历，可以看到如果我们通过Java8之前的代码写的话，会首先 new一个List，然后通过add方法来进行插入，这样虽然不会出现什么问题，但是会显得不是那么整洁，但是用流式操作的话，感觉会方便不少。</p><p>如果我们有多个条件要进行过滤的话，filter也是支持链式调用的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">streamFilter</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; result = list.stream().filter(item -&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"a1"</span>.equals(item))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .filter(item -&gt; (item.startsWith(<span class="string">"a"</span>)))</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">        result.stream().forEach(item -&gt; System.out.println(item));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map常用于一些遍历条件，例如取出某些JavaBean的属性并作为集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将一个Person集合的所有姓名取出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取出集合内所有的姓名</span></span><br><span class="line">List&lt;String&gt; nameList = list.stream().map(Person::getName).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">//去重取出集合内所有的姓名</span></span><br><span class="line">List&lt;String&gt; nameDistinctList = list.stream().map(Person::getName).distinct().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">//找出所有成年的人</span></span><br><span class="line">List&lt;String&gt; ageList = list.stream().filter(</span><br><span class="line">                item -&gt; (Objects.nonNull(item.getAge()) &amp;&amp; item.getAge() &gt; <span class="number">18</span>)</span><br><span class="line">        ).map(Person::getName).distinct().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">//将所有已经成年的人按照年龄进行分组</span></span><br><span class="line">Map&lt;Integer, List&lt;Person&gt;&gt; ageSameList = list.stream().filter(</span><br><span class="line">                item -&gt; (Objects.nonNull(item.getAge()) &amp;&amp; item.getAge() &gt; <span class="number">18</span>)</span><br><span class="line">        ).collect(Collectors.groupingBy(Person::getAge));</span><br></pre></td></tr></table></figure><h3 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h3><p>在我的使用过程中，感觉这个方法配合枚举类相当的好用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ProvinceEnum &#123;</span><br><span class="line">    BEIJING(<span class="string">"北京市"</span>,<span class="string">"110000"</span>),</span><br><span class="line">    TIANJIN(<span class="string">"天津市"</span>,<span class="string">"120000"</span>),</span><br><span class="line">    HEBEI(<span class="string">"河北省"</span>,<span class="string">"130000"</span>),</span><br><span class="line">    SHANXI(<span class="string">"山西省"</span>,<span class="string">"140000"</span>),</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">private</span> String cn;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    ProvinceEnum(String cn, String code) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cn = cn;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCnByCode</span><span class="params">(String code)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(ProvinceEnum.values()).filter(</span><br><span class="line">                item -&gt; (StringUtils.isNotEmpty(item) &amp;&amp; item.getCn().equals(code))</span><br><span class="line">        ).map(ProvinceEnum::getCn).findFirst().orElse(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 由于其他的方法大致与这上面几个方法相似，所以就不再写demo了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在大量使用Java8中的流式操作之后，觉得用起来还挺舒服的，所以正好趁这个机会总结下。&lt;/p&gt;
&lt;p&gt;使用Java8的lambda表达式的时候，需要先把集合转为一种流，也就是调用 stream 方法，但是 stream 却是 Collection 类里面的一个方法，也就是只
      
    
    </summary>
    
      <category term="Java" scheme="https://somersames.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://somersames.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JDK1.7中的ConcurrentHashMap实现细节(二)</title>
    <link href="https://somersames.github.io/2019/09/15/JDK1-7%E4%B8%AD%E7%9A%84ConcurrentHashMap%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/"/>
    <id>https://somersames.github.io/2019/09/15/JDK1-7中的ConcurrentHashMap实现细节/</id>
    <published>2019-09-15T12:35:02.000Z</published>
    <updated>2019-09-15T12:48:37.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在JDK1.7向JDK1.8升级的过程中，<code>ConcurrentHashMap</code>由原来的可重入锁和<code>CAS</code>锁直接被替换为<code>synchronized</code>关键字了，虽然说在功能上都是完全一致的，但是在这里一直都有一个疑惑，既然在1.7的使用过程中没什么问题，那到底是出于什么原因要将其替换呢。</p><h2 id="JDK1-7中的ConcurrentHashMap"><a href="#JDK1-7中的ConcurrentHashMap" class="headerlink" title="JDK1.7中的ConcurrentHashMap"></a>JDK1.7中的ConcurrentHashMap</h2><p>在JDK1.7中，其结构是由一个可重入锁<code>Segment</code>数组和每一个节点下的<code>HashEntry</code>数组来实现的。结构图如下:<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/1.7ConcurrentHashMap.png" alt=""></p><p>由于 segment 是一个锁，所以如果在并发的过程中，多个线程尝试向一个 segment 中的 HashEntry 进行插入的时候，只能有一个线程会获取到锁，其他的线程会被阻塞直至锁被释放，所以这个容器是一个并发安全的。</p><!--那么为什么是一个可重入锁呢，--><p>查看 put 方法的调用链的时候，可以发现最终都是调用的是<code>Segment</code>的<code>put</code>方法。</p><p><code>segment</code> 类在 <code>ConCurrentHashMap</code> 中的变量是以一个数组的形式所存在的，由于<code>segment</code>继承了 ReentrantLock ，所以是它也是一个可重入锁，因此在<code>JDK1.7</code>里面，是通过 <code>segment</code>的 重入锁机制来实现并发的写入。同时也可以发现如果调用的是<code>ConcurrentHashMap</code>的无参构造函数的话，那么初始化<code>Segment</code>数组大小就是16，当然这个数组大小其实是可以被调整的，但是无论怎样进行调整，最终 segment 数组的大小永远都是2的n次方。</p><h2 id="Segment"><a href="#Segment" class="headerlink" title="Segment"></a>Segment</h2><p>在<code>ConcurrentHashMap</code>里面，一个<code>segment</code>就是一个<code>HashEntry</code>的数组，而一个<code>HashEntry</code>就是一个<code>bucket</code>。</p><blockquote><p>但是需要注意的是，ConcurrentHashMap 默认的 segment 数组的大小是16，也就是说最多只可能有16个线程同时进行处理</p></blockquote><p>当调用 put 方法的时候，会通过一个可重入锁的 CAS 操作来尝试获取该 segment 锁，如果获取到了则直接新建一个 Node 节点，如果还未获取到则直接调用<code>scanAndLockForPut</code>方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> HashEntry&lt;K,V&gt; <span class="title">scanAndLockForPut</span><span class="params">(K key, <span class="keyword">int</span> hash, V value)</span> </span>&#123;</span><br><span class="line">    HashEntry&lt;K,V&gt; first = entryForHash(<span class="keyword">this</span>, hash);</span><br><span class="line">    HashEntry&lt;K,V&gt; e = first;</span><br><span class="line">    HashEntry&lt;K,V&gt; node = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> retries = -<span class="number">1</span>; <span class="comment">// negative while locating node</span></span><br><span class="line">    <span class="keyword">while</span> (!tryLock()) &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt; f; <span class="comment">// to recheck first below</span></span><br><span class="line">        <span class="keyword">if</span> (retries &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="comment">// speculatively create node</span></span><br><span class="line">                    node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                retries = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(e.key))</span><br><span class="line">                retries = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                e = e.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (++retries &gt; MAX_SCAN_RETRIES) &#123;</span><br><span class="line">            lock();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((retries &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                 (f = entryForHash(<span class="keyword">this</span>, hash)) != first) &#123;</span><br><span class="line">            e = first = f; <span class="comment">// re-traverse if entry changed</span></span><br><span class="line">            retries = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="scanAndLockForPut方法的作用"><a href="#scanAndLockForPut方法的作用" class="headerlink" title="scanAndLockForPut方法的作用"></a>scanAndLockForPut方法的作用</h3><p>在这个方法里面，会在 while 循环里面尝试 64 次，而且可以看到在这个循环语句里面有一些细节的操作。具体如下：</p><ul><li>判断当前头节点 first 是否为 null，是的话则初始化 node </li><li>如果 first 不是 null，判断当前的 key 是否和 first 相等</li><li>如果 first 即不为null，并且当前的 key 又不和入参的key相同，则直接寻找其 next 节点，直至 next 为null，然后进行第一步</li></ul><p>其实上面的一些步骤仅仅是该方法循环的第一步要做的，当上述三个步骤都进行完毕之后，首先会判断循环的次数是否已经大于 <code>MAX_SCAN_RETRIES</code> 如果是的话，则直接调用 <code>lock</code> 方法，如果不是的话则调用第三个判断。</p><p>第三个判断中会判断当前循环次数是不是偶数，如果是的话则会判断当前的头节点还是不是之前的first，如果不是的话则需要重新将新的头节点赋值给 first 然后将循环次数改成1，再次重试。</p><p>其实这个方法如果仔细看看，你会发现貌似没啥作用，因为返回的是 node，但是 node 一旦第一次被赋值之后，以后便不会做任何的更改，所以正如该方法的注释所说的一样，<strong>这个方法仅仅是为 JVM 做一个预热而已</strong>。</p><h3 id="继续获取锁"><a href="#继续获取锁" class="headerlink" title="继续获取锁"></a>继续获取锁</h3><p>如果在 64 次以内还是未获取到该锁，则会调用<code>lock</code>方法，由于 ConcurrentHashMap 在初始化 segment 的时候，并未显式调用<code>ReentrantLock</code>的构造方法，而 ReentrantLock 又是默认初始化非公平锁，所以此时在 scanAndLockForPut 里面的 lock 其实调用的是 NonfairSync 里面的 lock 方法，即再次以非公平锁的方式来尝试获取锁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当最后一次如果 CAS 操作还未获取到锁的时候，segment 就会调用<strong>acquire(1)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里可以看到的是 if 判断里面还是会再次尝试获取锁，当还未获取到锁的时候，就将该 Node 放入到 FIFO 队列的末尾，然后等待着被唤醒执行</p><p>从上面的一个流程不难看出，在 segment 首先会以可重入锁的方式来尝试性的获取锁，当没取到的时候会<strong>while循环</strong>64次做一个预热，如果在循环的过程中还是未获取到锁，则会进行两次<code>CAS</code>操作(分别在两个不同的方法里面)，如果最终还是无法获取到锁的话，那么此时就会将自己放入到 AQS 中的 FIFO 队列。</p><p>回过头来再看 segment 里面的第一行代码：</p><blockquote><p>HashEntry&lt;K,V&gt; node = tryLock() ? null : scanAndLockForPut(key, hash, value);</p></blockquote><p>那么可以看到的是，在JDK1.7里面，put方法如果在大量并发的情况下，如果要获取一个锁会进行非常多的操作，而且它默认的 segment 数组大小还是 16 ，也就是说map的所有键值，出现碰撞的概率不是 1/map.size()，而永远是 1/16。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;在JDK1.7向JDK1.8升级的过程中，&lt;code&gt;ConcurrentHashMap&lt;/code&gt;由原来的可重入锁和&lt;code&gt;CAS&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://somersames.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://somersames.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode数组中连续分组</title>
    <link href="https://somersames.github.io/2019/09/08/Leetcode%E6%95%B0%E7%BB%84%E4%B8%AD%E8%BF%9E%E7%BB%AD%E5%88%86%E7%BB%84/"/>
    <id>https://somersames.github.io/2019/09/08/Leetcode数组中连续分组/</id>
    <published>2019-09-08T15:19:58.000Z</published>
    <updated>2019-09-08T15:35:54.872Z</updated>
    
    <content type="html"><![CDATA[<p>在Leetcode上有一道题目，如下：</p><blockquote><p>In a deck of cards, each card has an integer written on it.<br>  Return true if and only if you can choose X &gt;= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:<br>  Each group has exactly X cards.<br>  All the cards in each group have the same integer.</p></blockquote><p>这一题就是一个求最大公约数的题目，当任意两组的公约数为1的时候，那么此时就说明，他们的分组数量不相等就可以直接返回false了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasGroupsSizeX</span><span class="params">(<span class="keyword">int</span>[] deck)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10000</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> val : deck)&#123;</span><br><span class="line">            count[val]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> val: deck)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum == -<span class="number">1</span>)&#123;</span><br><span class="line">                sum = count[val];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum = getGcd(sum,count[val]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Leetcode上有一道题目，如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a deck of cards, each card has an integer written on it.&lt;br&gt;  Return true if and only if you c
      
    
    </summary>
    
      <category term="算法" scheme="https://somersames.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="https://somersames.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>mysql的幻读(二)</title>
    <link href="https://somersames.github.io/2019/08/27/mysql%E7%9A%84%E5%B9%BB%E8%AF%BB-%E4%BA%8C/"/>
    <id>https://somersames.github.io/2019/08/27/mysql的幻读-二/</id>
    <published>2019-08-27T15:48:53.000Z</published>
    <updated>2019-08-27T16:06:02.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在InnoDB里面，是通过快照读来实现<code>RC</code>和<code>PR</code>隔离级别的区分，因为在<code>RC</code>隔离级别下，每一次的select都是一个快照读，所以是可以读取到已经提交的数据，从而导致幻读。所以在<code>RC</code>隔离级别下，快照读和当前读都是可以出现幻读。</p><p>但是在<code>PR</code>的隔离级别下，由于快照读仅仅只生成一次，所以在<code>PR</code>级别下的快照读是无法出现幻读的，但是当前读确实可以出现幻读。</p><p>查看Mysql官方对于<code>幻读</code>的定义。</p><blockquote><p>The so-called phantom problem occurs within a transaction when the same query produces different sets of rows at different times. </p></blockquote><p>也就是说一个事物同一条查询语句查询出来了两个不同的集合就可以称之为幻读。</p><h3 id="ANSI-SQL-隔离级别"><a href="#ANSI-SQL-隔离级别" class="headerlink" title="ANSI SQL 隔离级别"></a>ANSI SQL 隔离级别</h3><p>在<code>ANSI SQL 隔离级别</code>的定义中<code>PR</code>级别是可以出现幻读的。<br>但是在InnoDB引擎里面自己通过<code>GAP锁</code>和<code>Next-Key锁</code>使得<code>PR</code>隔离级别下无法出现幻读。原因就在于InnoDB的<code>GAP</code>锁</p><h2 id="GAP锁"><a href="#GAP锁" class="headerlink" title="GAP锁"></a>GAP锁</h2><p>在<code>InnoDB</code>里面，GAP锁是用于防止幻读的一个手段，具体的操作是首先当我们新增一个数据的时候，<code>InnoDB</code>会在此时加一个<code>GAP</code>锁从而防止其他事务对该区间的一些数据操作，导致幻读的出现。</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><h4 id="PR级别："><a href="#PR级别：" class="headerlink" title="PR级别："></a><code>PR</code>级别：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_lock.test;</span><br><span class="line">+---------+-----------+----------------+------------+-------------+</span><br><span class="line">| user_id | user_name | user_password  | is_deleted | phone       |</span><br><span class="line">+---------+-----------+----------------+------------+-------------+</span><br><span class="line">| a       | zhangsan  | 123456         |          0 | 15112345678 |</span><br><span class="line">| b       | lisi      | lisi123456     |          0 | 15112345678 |</span><br><span class="line">| c       | wangwu    | wangwu123456   |          0 | 15112345678 |</span><br><span class="line">| d       | caocao    | caocao123456   |          0 | 15112345678 |</span><br><span class="line">| e       | liubei    | liubei123456   |          0 | 15112345678 |</span><br><span class="line">| f       | zhangfei  | zhangfei123456 |          0 | 15112345678 |</span><br><span class="line">| g       | guanyu    | guanyu123456   |          0 | 15112345678 |</span><br><span class="line">| h       | daqiao    | daqiao123456   |          0 | 15112345678 |</span><br><span class="line">| m       | xiaoqiao  | xiaoqiao123456 |          0 | 15112345678 |</span><br><span class="line">+---------+-----------+----------------+------------+-------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><em>事物一</em>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start transaction ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test_lock.test where  user_id &gt; &apos;g&apos; and user_id &lt; &apos;m&apos; for update ;</span><br><span class="line">+---------+-----------+---------------+------------+-------------+</span><br><span class="line">| user_id | user_name | user_password | is_deleted | phone       |</span><br><span class="line">+---------+-----------+---------------+------------+-------------+</span><br><span class="line">| h       | daqiao    | daqiao123456  |          0 | 15112345678 |</span><br><span class="line">+---------+-----------+---------------+------------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p><em>事物二</em>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start transaction ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into test_lock.`test` values(&apos;i&apos;,&apos;daqiao&apos;,&apos;daqiao123456&apos;,0,&apos;15112345678&apos;);</span><br></pre></td></tr></table></figure></p><p>此时在<code>PR</code>隔离级别下会阻塞。</p><p>此时查看数据库中的锁：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+----------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+------------------------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                         | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE              | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+----------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+------------------------+-------------+-----------+</span><br><span class="line">| INNODB | 140169161014704:1068:140169076344152   |                235275 |        50 |       16 | test_lock     | test        | NULL           | NULL              | NULL       |       140169076344152 | TABLE     | IX                     | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 140169161014704:7:4:14:140169076341272 |                235275 |        50 |       16 | test_lock     | test        | NULL           | NULL              | PRIMARY    |       140169076341272 | RECORD    | X,GAP,INSERT_INTENTION | WAITING     | &apos;m&apos;       |</span><br><span class="line">| INNODB | 140169161013840:1068:140169076338200   |                235274 |        47 |       20 | test_lock     | test        | NULL           | NULL              | NULL       |       140169076338200 | TABLE     | IX                     | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 140169161013840:7:4:14:140169076335256 |                235274 |        47 |       20 | test_lock     | test        | NULL           | NULL              | PRIMARY    |       140169076335256 | RECORD    | X                      | GRANTED     | &apos;m&apos;       |</span><br><span class="line">| INNODB | 140169161013840:7:4:15:140169076335256 |                235274 |        47 |       20 | test_lock     | test        | NULL           | NULL              | PRIMARY    |       140169076335256 | RECORD    | X                      | GRANTED     | &apos;h&apos;       |</span><br><span class="line">+--------+----------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+------------------------+-------------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>可以看到在<code>m</code>列由于<code>GAP</code>锁和<code>INSERT_INTENTION</code>互相冲突，导致<code>事物二</code>无法进行插入</p><blockquote><p>事物一由于进行<code>for update</code>查询，所以会对区间加一个GAP锁<br>事物二由于是新增，所以会加一个插入意向锁<br>由于<code>GAP</code>锁阻塞住了插入意向锁，导致<code>事物二</code>无法进行插入</p></blockquote><p>此时<code>事物二</code>也会在这里阻塞住，而在<code>RC</code>隔离级别下，<code>事物二</code>是不会等待的。<br>但是如果仔细一点，其实这里还可以发现另一个锁，就是插入意向锁<code>INSERT_INTENTION LOCK</code></p><h2 id="INSERT-INTENTION-LOCK"><a href="#INSERT-INTENTION-LOCK" class="headerlink" title="INSERT_INTENTION_LOCK"></a>INSERT_INTENTION_LOCK</h2><p>Mysql官方文档中将<code>INSERT_INTENTION</code>定义为一个<code>GAP</code>锁，但是它的意义和真正的<code>GAP</code>锁之间是有天大的差别的，<code>INSERT_INTENTION_LOCK</code>并不会阻塞<code>GAP</code>锁，但相反<code>GAP</code>会阻塞<code>INSERT_INTENTION_LOCK</code>，并且该锁的锁定范围是插入行一直到下一个索引，这一整个区间<br>如下例子：<br><em>事物一</em>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start transaction ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into test_lock.`test` values(&apos;i&apos;,&apos;daqiao&apos;,&apos;daqiao123456&apos;,0,&apos;15112345678&apos;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure></p><p><em>事物二</em>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start transaction ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_lock.`test` set user_id=&apos;l&apos;  where  user_id = &apos;k&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 0  Changed: 0  Warnings: 0</span><br></pre></td></tr></table></figure></p><p>此时查看事物中锁：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+----------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                         | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+----------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| INNODB | 140169161014704:1068:140169076344152   |                235293 |        50 |       48 | test_lock     | test        | NULL           | NULL              | NULL       |       140169076344152 | TABLE     | IX        | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 140169161014704:7:4:14:140169076341272 |                235293 |        50 |       48 | test_lock     | test        | NULL           | NULL              | PRIMARY    |       140169076341272 | RECORD    | X,GAP     | GRANTED     | &apos;m&apos;       |</span><br><span class="line">| INNODB | 140169161013840:1068:140169076338200   |                235288 |        47 |       32 | test_lock     | test        | NULL           | NULL              | NULL       |       140169076338200 | TABLE     | IX        | GRANTED     | NULL      |</span><br><span class="line">+--------+----------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>可以看到<code>事物二</code>确实已经执行成功了，而且<code>事物一</code>的插入意向锁并未阻塞事物二的插入语句<br>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在Mysql的<code>InnoDB</code>中，幻读的解决方案是采用了一个间隙锁<code>GAP</code>锁来实现的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;在InnoDB里面，是通过快照读来实现&lt;code&gt;RC&lt;/code&gt;和&lt;code&gt;PR&lt;/code&gt;隔离级别的区分，因为在&lt;code&gt;RC&lt;
      
    
    </summary>
    
      <category term="Mysql" scheme="https://somersames.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://somersames.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql中的幻读(一)</title>
    <link href="https://somersames.github.io/2019/08/18/Mysql%E4%B8%AD%E7%9A%84%E5%B9%BB%E8%AF%BB-%E4%B8%80/"/>
    <id>https://somersames.github.io/2019/08/18/Mysql中的幻读-一/</id>
    <published>2019-08-18T12:41:54.000Z</published>
    <updated>2019-08-18T13:53:34.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是幻读"><a href="#什么是幻读" class="headerlink" title="什么是幻读"></a>什么是幻读</h2><p>幻读表示的是在一个事物里面 同一个<code>select</code>语句，前后两次查询出来的结果是不相同的，需要注意的一点是，在InnoDB里面，幻读跟事物的隔离级别有关，更加准确的说是跟一个事物的快照和当前读有关</p><p>下面是在Mysql8.0.11版本下进行幻读的复现：</p><ul><li>引擎：InnoDB</li><li>事物隔离级别：Read Commited</li></ul><h3 id="MVCC和快照读以及当前读"><a href="#MVCC和快照读以及当前读" class="headerlink" title="MVCC和快照读以及当前读"></a>MVCC和快照读以及当前读</h3><h4 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h4><p>在介绍MVCC之前先来介绍下MVCC为什么会出现，首先数据库作为一个数据存储工具，那么肯定是存在并发的情况，<br>在Mysql的InnoDB里面最常见的就是<code>x</code>锁，这是一种写锁，在并发的情况下只有一个事务会获取该锁，其他事务则会一直等待直至获取到该锁。</p><p>那么在读取的时候如何保证并发的事物都能正确的读取到自己正确的数据呢？</p><p>在MVCC的概念里面，如果事务的隔离级别是<code>Read Commited</code>的话，那么每一次的快照都都会读取该行的最近一次<code>commited</code>数据，而如果是<code>Repeatable Read</code>的话，则是会读取当前事务ID开始之前的一次<code>commited</code>数据。</p><p>所以MVCC仅仅是作为一个保证数据库并发读情况下的一个数据正确的手段而已，在不同的数据库里面，有不同的实现，例如在<code>OceanBase</code>里面，是通过操作链来解决并发读的问题</p><h4 id="快照读"><a href="#快照读" class="headerlink" title="快照读"></a>快照读</h4><p>快照读是利用MVCC和 <code>undo log</code> 来实现的，其主要作用就是当我们对某行数据修改之后，并不会将原值修改，而是在上一个版本上面再新建一个版本(修改InnoDB的隐藏两列)。<br>所以在不同的隔离级别下，可以根据自己的<code>事物ID</code>来获取自己所需要的数据。当第一条不满足的时候，会沿着<code>undo log</code>一直寻找，在<code>Read Commited</code>隔离级别下就是直接找出该行数据最后一次提交的版本</p><h4 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h4><p>当前读是对数据的加锁读取，读取的都是最新的数据，例如如下SQL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select ... for update</span><br><span class="line">select ... in share mode</span><br><span class="line">insert</span><br><span class="line">update</span><br><span class="line">delete</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>同时也需要注意的一点是，当前读会对涉及到的行都进行加锁</p><h4 id="为什么会有当前读和快找读"><a href="#为什么会有当前读和快找读" class="headerlink" title="为什么会有当前读和快找读"></a>为什么会有当前读和快找读</h4><p>按照Mysql官方的解释，当前读是为了防止其他事物修改你即将进行的操作</p><blockquote><p>If you query data and then insert or update related data within the same transaction, the regular SELECT statement does not give enough protection. Other transactions can update or delete the same rows you just queried. InnoDB supports two types of locking reads that offer extra safety</p></blockquote><h3 id="幻读发生的条件"><a href="#幻读发生的条件" class="headerlink" title="幻读发生的条件"></a>幻读发生的条件</h3><p>首先解释下Mysql官方对于幻读的解释：</p><blockquote><p>The so-called phantom problem occurs within a transaction when the same query produces different sets of rows at different times. For example, if a SELECT is executed twice, but returns a row the second time that was not returned the first time, the row is a “phantom” row.</p></blockquote><p>这里Mysql官方虽然只是给出了对于<code>幻行</code>的定义，但是仍然可以简单解释下，也就是说两次的<code>select</code>前后得到的结果集是不同的，那么新多出来的一行就可以称之为<code>幻行</code></p><p><strong>在这里特别需要注意的是，在PR隔离界别下，只有当前读才会出现幻读</strong></p><h4 id="Read-Commited"><a href="#Read-Commited" class="headerlink" title="Read Commited"></a>Read Commited</h4><p>在<code>Read Commited</code>隔离级别下，每一次的<code>select</code> 都是一次快照读，所以在该隔离级别下，幻读可以在快照读和当前读发生。</p><blockquote><p>事务一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set session transaction isolation level read committed;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; START TRANSACTION;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from szh.t1</span><br><span class="line">    -&gt; ;</span><br><span class="line">+---------+-----------+</span><br><span class="line">| area_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|       1 |        22 |</span><br><span class="line">|       2 |        10 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from `szh`.`t1`;</span><br><span class="line">+---------+-----------+</span><br><span class="line">| area_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|       1 |        22 |</span><br><span class="line">|       2 |        10 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>事务二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `szh`.`t1`(`area_id`, `order_num`) VALUES (3, 22);</span><br></pre></td></tr></table></figure></p></blockquote><p>此时<code>事务一</code>再进行select<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from `szh`.`t1`;</span><br><span class="line">+---------+-----------+</span><br><span class="line">| area_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|       1 |        22 |</span><br><span class="line">|       2 |        10 |</span><br><span class="line">|       3 |        22 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>于是幻读发生了</p><h4 id="Repeatable-Read"><a href="#Repeatable-Read" class="headerlink" title="Repeatable Read"></a>Repeatable Read</h4><p>那么如果在<code>Repeatable Read</code>隔离级别下，上面的SQL在执行一遍会出现什么情况呢？</p><blockquote><p>事务一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; START TRANSACTION;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM `t1`</span><br><span class="line">    -&gt; ;</span><br><span class="line">+---------+-----------+</span><br><span class="line">| area_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|       1 |        22 |</span><br><span class="line">|       2 |        10 |</span><br><span class="line">|       3 |        22 |</span><br><span class="line">|       4 |        33 |</span><br><span class="line">|       5 |        55 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>事务二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `szh`.`t1`(`area_id`, `order_num`) VALUES (6, 66);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>事务一再次select<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM `t1`;</span><br><span class="line">+---------+-----------+</span><br><span class="line">| area_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|       1 |        22 |</span><br><span class="line">|       2 |        10 |</span><br><span class="line">|       3 |        22 |</span><br><span class="line">|       4 |        33 |</span><br><span class="line">|       5 |        55 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p></blockquote><p>可以看到的是在快照读下面，是没有幻读出现的，那么修改select为当前读呢？<br>在事务一里面再次执行以下SQL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM `t1` for update;</span><br><span class="line">+---------+-----------+</span><br><span class="line">| area_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|       1 |        22 |</span><br><span class="line">|       2 |        10 |</span><br><span class="line">|       3 |        22 |</span><br><span class="line">|       4 |        33 |</span><br><span class="line">|       5 |        55 |</span><br><span class="line">|       6 |        66 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>可以看到确实出现了两次的select不同的情况。<br>所以需要强调一点的是，在<code>Repeatable Read</code>隔离级别下，只有当前读才会出现幻读，因为在该级别下，快照读是从<code>begin</code>开始的第一个普通<code>select</code>建立的<code>Read View</code>，以后的普通<code>select</code>都是基于第一次的<code>select</code>，自然而然不会出现幻读了 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是幻读&quot;&gt;&lt;a href=&quot;#什么是幻读&quot; class=&quot;headerlink&quot; title=&quot;什么是幻读&quot;&gt;&lt;/a&gt;什么是幻读&lt;/h2&gt;&lt;p&gt;幻读表示的是在一个事物里面 同一个&lt;code&gt;select&lt;/code&gt;语句，前后两次查询出来的结果是不相同的，需要
      
    
    </summary>
    
      <category term="Mysql" scheme="https://somersames.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://somersames.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql数据库出现死锁的情况(一)</title>
    <link href="https://somersames.github.io/2019/08/04/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%87%BA%E7%8E%B0%E6%AD%BB%E9%94%81%E7%9A%84%E6%83%85%E5%86%B5-%E4%B8%80/"/>
    <id>https://somersames.github.io/2019/08/04/Mysql数据库出现死锁的情况-一/</id>
    <published>2019-08-04T08:32:31.000Z</published>
    <updated>2019-08-04T08:49:05.600Z</updated>
    
    <content type="html"><![CDATA[<p>在临近上线之前，我们系统做了一次压力测试，发现有一个接口在高并发情况下会出现一个死锁的情况。。首先申明…不是我写的，我只是帮忙排查下。</p><p>随着对Mysql锁的深入了解，于是就准备写几篇文章来记录下Mysql各种事物和索引的情况下出现死锁的情况。</p><p>今天就介绍下在并发插入的情况下，哪几种情况会出现死锁：</p><h2 id="INNODB下的各种锁"><a href="#INNODB下的各种锁" class="headerlink" title="INNODB下的各种锁"></a>INNODB下的各种锁</h2><p>在介绍锁的时候只会介绍跟本节相关的锁，而且只会讲述大概是什么，至于锁的更加详细的讲解可能会到以后再详细介绍。</p><h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>行锁分为写锁和读取锁，</p><blockquote><p>读锁（S锁）也可以称之为 <code>共享锁</code> ， 它表示的是任何一个事物都可以读取该行数据(可以被多个事物获取到)。</p></blockquote><blockquote><p>写锁（X锁）也可以称之为排它锁，它表示的是该行数据不允许任何人进行修改，同时也不允许任何事物获取该行事物的S锁，但是普通的 <code>select</code> 语句是可以的。</p></blockquote><h2 id="背景信息一"><a href="#背景信息一" class="headerlink" title="背景信息一"></a>背景信息一</h2><h3 id="注意：以下测试都是基于该事物隔离级别和数据库版本"><a href="#注意：以下测试都是基于该事物隔离级别和数据库版本" class="headerlink" title="注意：以下测试都是基于该事物隔离级别和数据库版本"></a>注意：以下测试都是基于该事物隔离级别和数据库版本</h3><p>数据库版本：8.0.11</p><p>事务隔离级别：REPEATABLE-READ</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE 'transaction_isolation';</span><br><span class="line">+<span class="comment">-----------------------+-----------------+</span></span><br><span class="line">| Variable_name         | Value           |</span><br><span class="line">+<span class="comment">-----------------------+-----------------+</span></span><br><span class="line">| transaction_isolation | REPEATABLE-READ |</span><br><span class="line">+<span class="comment">-----------------------+-----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="SQL准备"><a href="#SQL准备" class="headerlink" title="SQL准备:"></a>SQL准备:</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> test_lock  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_0900_ai_ci;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_lock.<span class="string">`test`</span> (</span><br><span class="line">    <span class="string">`user_id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`user_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`user_password`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`is_deleted`</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`user_id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`t1_god`</span> (<span class="string">`user_name`</span>,<span class="string">`user_password`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure><p>准备数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'a'</span>,<span class="string">'zhangsan'</span>,<span class="string">'123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'b'</span>,<span class="string">'lisi'</span>,<span class="string">'lisi123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'c'</span>,<span class="string">'wangwu'</span>,<span class="string">'wangwu123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'d'</span>,<span class="string">'caocao'</span>,<span class="string">'caocao123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'e'</span>,<span class="string">'liubei'</span>,<span class="string">'liubei123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'f'</span>,<span class="string">'zhangfei'</span>,<span class="string">'zhangfei123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'g'</span>,<span class="string">'guanyu'</span>,<span class="string">'guanyu123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'h'</span>,<span class="string">'xiaoqiao'</span>,<span class="string">'xiaoqiao123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br></pre></td></tr></table></figure><h3 id="情况一："><a href="#情况一：" class="headerlink" title="情况一："></a>情况一：</h3><blockquote><p> 三个事物都执行同一个Insert语句，第一个事物然后回滚</p></blockquote><p>此时第三个事物会提示死锁，第二个事物正常插入。</p><h4 id="复现步骤："><a href="#复现步骤：" class="headerlink" title="复现步骤："></a>复现步骤：</h4><p>开启三个事物，每一个事物分别执行如下SQL，然后再将第一个事物进行回滚或者提交，然后你就会发现第三个事物发生了死锁。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## DeadLock</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'i'</span>,<span class="string">'daqiao'</span>,<span class="string">'daqiao123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br></pre></td></tr></table></figure><p>Mysql提示如下：</p><blockquote><p>[2019-08-04 14:33:48] Connected<br>sql&gt; start transaction<br>[2019-08-04 14:33:49] completed in 4 ms<br>sql&gt; begin<br>[2019-08-04 14:33:49] completed in 6 ms<br>sql&gt; insert into test_lock.<code>test</code> values(‘i’,’daqiao’,’daqiao123456’,0,’15112345678’)<br>[2019-08-04 14:34:00] [40001][1213] Deadlock found when trying to get lock; try restarting transaction<br>[2019-08-04 14:34:00] [40001][1213] Deadlock found when trying to get lock; try restarting transaction</p></blockquote><p>那么打印出Mysql出现死锁的日志：重点日志如下</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">LATEST DETECTED DEADLOCK</span><br><span class="line">------------------------</span><br><span class="line"><span class="number">2019</span>-<span class="number">08</span>-<span class="number">04</span> <span class="number">06</span>:<span class="number">33</span>:<span class="number">59</span> <span class="number">0</span>x7f1818599700</span><br><span class="line">*** (<span class="number">1</span>) TRANSACTION:</span><br><span class="line">TRANSACTION <span class="number">231690</span>, ACTIVE <span class="number">34</span> sec inserting</span><br><span class="line">mysql tables in <span class="keyword">use</span> <span class="number">1</span>, locked <span class="number">1</span></span><br><span class="line">LOCK WAIT <span class="number">4</span> lock <span class="keyword">struct</span>(s), heap size <span class="number">1136</span>, <span class="number">2</span> row lock(s)</span><br><span class="line">MySQL thread id <span class="number">9</span>, OS thread handle <span class="number">139741464762112</span>, query id <span class="number">95</span> <span class="number">172</span><span class="variable">.17</span><span class="variable">.0</span><span class="variable">.1</span> root update</span><br><span class="line"><span class="comment">/* ApplicationName=IntelliJ IDEA 2019.1.3 */</span> insert into test_lock.<span class="meta">`test` values('i','daqiao','daqiao123456',0,'15112345678')</span></span><br><span class="line">*** (<span class="number">1</span>) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id <span class="number">7</span> page no <span class="number">4</span> n bits <span class="number">80</span> index PRIMARY of <span class="keyword">table</span> <span class="meta">`test_lock`.`test` trx id 231690 lock_mode X insert intention waiting</span></span><br><span class="line">Record lock, heap no <span class="number">1</span> PHYSICAL RECORD: n_fields <span class="number">1</span>; compact format; info bits <span class="number">0</span></span><br><span class="line"> <span class="number">0</span>: len <span class="number">8</span>; hex <span class="number">73757072656</span>d756d; asc supremum;;</span><br><span class="line"></span><br><span class="line">*** (<span class="number">2</span>) TRANSACTION:</span><br><span class="line">TRANSACTION <span class="number">231691</span>, ACTIVE <span class="number">10</span> sec inserting</span><br><span class="line">mysql tables in <span class="keyword">use</span> <span class="number">1</span>, locked <span class="number">1</span></span><br><span class="line"><span class="number">4</span> lock <span class="keyword">struct</span>(s), heap size <span class="number">1136</span>, <span class="number">2</span> row lock(s)</span><br><span class="line">MySQL thread id <span class="number">10</span>, OS thread handle <span class="number">139741464467200</span>, query id <span class="number">139</span> <span class="number">172</span><span class="variable">.17</span><span class="variable">.0</span><span class="variable">.1</span> root update</span><br><span class="line"><span class="comment">/* ApplicationName=IntelliJ IDEA 2019.1.3 */</span> insert into test_lock.<span class="meta">`test` values('i','daqiao','daqiao123456',0,'15112345678')</span></span><br><span class="line">*** (<span class="number">2</span>) HOLDS THE LOCK(S):</span><br><span class="line">RECORD LOCKS space id <span class="number">7</span> page no <span class="number">4</span> n bits <span class="number">80</span> index PRIMARY of <span class="keyword">table</span> <span class="meta">`test_lock`.`test` trx id 231691 lock mode S</span></span><br><span class="line">Record lock, heap no <span class="number">1</span> PHYSICAL RECORD: n_fields <span class="number">1</span>; compact format; info bits <span class="number">0</span></span><br><span class="line"> <span class="number">0</span>: len <span class="number">8</span>; hex <span class="number">73757072656</span>d756d; asc supremum;;</span><br><span class="line"></span><br><span class="line">*** (<span class="number">2</span>) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id <span class="number">7</span> page no <span class="number">4</span> n bits <span class="number">80</span> index PRIMARY of <span class="keyword">table</span> <span class="meta">`test_lock`.`test` trx id 231691 lock_mode X insert intention waiting</span></span><br><span class="line">Record lock, heap no <span class="number">1</span> PHYSICAL RECORD: n_fields <span class="number">1</span>; compact format; info bits <span class="number">0</span></span><br><span class="line"> <span class="number">0</span>: len <span class="number">8</span>; hex <span class="number">73757072656</span>d756d; asc supremum;;</span><br><span class="line"></span><br><span class="line">*** WE ROLL BACK TRANSACTION (<span class="number">2</span>)</span><br><span class="line">------------</span><br></pre></td></tr></table></figure><p>从以上日志我们可以看到，事物一正在请求该行记录的 <code>X锁</code> ，事物二持有该行的<code>S锁</code>，但是也在等待获取该行的<code>X锁</code>。</p><p>关于Mysql的 <code>insert</code> 逻辑，可以大致理解为如果一个事物正在对一个记录进行 <code>insert</code>，此时 InnoDB 并不会主动的将其加一个锁，而是在主键索引上加一个 <code>trx_id</code>，</p><p>当第二个事物检测到该行记录正在被一个活跃的事物持有的时候，此时第二个事物会帮第一个事物的隐式锁住转为显式锁。如下例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## DeadLock</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'i'</span>,<span class="string">'daqiao'</span>,<span class="string">'daqiao123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br></pre></td></tr></table></figure><p>此时查看Mysql中锁的情况：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/insert%E6%AD%BB%E9%94%81%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%BA%8B%E7%89%A9.png" alt=""></p><p>可以看到此时Mysql仅仅是在表上加入了一个插入意向锁（IX锁），持有该锁表示该事物在接下来有可能会对自己设计到的行加入排它锁（X锁）</p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html" target="_blank" rel="noopener">Mysql关于意向锁的介绍</a></p><blockquote><p>The intention locking protocol is as follows:</p><ul><li>Before a transaction can acquire a shared lock on a row in a table, it must first acquire an <code>IS</code> lock or stronger on the table.</li><li>Before a transaction can acquire an exclusive lock on a row in a table, it must first acquire an <code>IX</code> lock on the table.</li></ul></blockquote><p>大意就是如果你想获得一个行的 <code>X锁</code>，那么你就必须先获取表的 <code>IX锁</code></p><p>那么此时再进行第二个事物的插入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## DeadLock</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'i'</span>,<span class="string">'daqiao'</span>,<span class="string">'daqiao123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br></pre></td></tr></table></figure><p>再次查看数据库中的锁：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/Mysql%E7%AC%AC%E4%BA%8C%E4%B8%AA%E4%BA%8B%E7%89%A9.png" alt=""></p><p>此时会发现第一个事物已经获取到了行级别的<code>X锁</code>，第二个事物获取到了 <code>IX</code> 锁以及 <code>S锁</code> 。</p><p>那么此时第三个事物开启之后数据库中的锁又会是什么样子的呢？</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/Mysql%E7%AC%AC%E4%B8%89%E4%B8%AA%E4%BA%8B%E7%89%A9.png" alt=""></p><p>可以发现另外两个事物都在等待获取该行的<code>S锁</code>。然后此时第一个事物进行回滚，此时第三个事物就会提示死锁。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><h4 id="前提结论"><a href="#前提结论" class="headerlink" title="前提结论"></a>前提结论</h4><ol><li><code>S锁</code>是可以升级到<code>X锁</code>的</li><li>一个<code>S锁</code>需要升级到<code>X</code>锁必须保证只有当前事物持有<code>S锁</code></li></ol><h4 id="死锁原因"><a href="#死锁原因" class="headerlink" title="死锁原因"></a>死锁原因</h4><p>当第一个事物回滚之后，第二个事物和第三个事物都会获得到该行的<code>S锁</code>，但是此时第二个事物将要执行 insert 语句，也就是第二个事物正在等待获取该行的<code>X锁</code>，但是此时第三个事物也正在准备 insert，它也在准备获取 <code>X锁</code>，目前这两个事物都持有该行的 <code>S锁</code> ，而如果需要获取 <code>X锁</code>，则是需要对方释放<code>S</code>锁。如下图：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/TwoTrxLock.png" alt=""></p><h3 id="简单复现步骤："><a href="#简单复现步骤：" class="headerlink" title="简单复现步骤："></a>简单复现步骤：</h3><p>为了验证上面的情况，我准备如下几个SQL：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">## 事物一</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test_lock.test <span class="keyword">where</span> user_id=<span class="string">'h'</span>  <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 事物二</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test_lock.test <span class="keyword">where</span> user_id=<span class="string">'h'</span>  <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>;</span><br><span class="line"></span><br><span class="line">## 事物一再执行</span><br><span class="line"><span class="keyword">update</span> test_lock.<span class="string">`test`</span> <span class="keyword">set</span> user_name=<span class="string">'abc'</span>  <span class="keyword">where</span>  user_id = <span class="string">'h'</span>;</span><br><span class="line"></span><br><span class="line">## 事物二再执行</span><br><span class="line"><span class="keyword">update</span> test_lock.<span class="string">`test`</span> <span class="keyword">set</span> user_name=<span class="string">'abc'</span>  <span class="keyword">where</span>  user_id = <span class="string">'h'</span>;</span><br><span class="line"></span><br><span class="line">## 此时事物二就会提示死锁</span><br></pre></td></tr></table></figure><p>这是因为事物一和事物二都在等待对方释放<code>S锁</code>，但是都不肯释放，于是死锁发生了。</p><h3 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h3><blockquote><p> 三个事物都执行同一个Insert语句，第一个事物然后提交</p></blockquote><p>此时第二个事物和第三个事物都会提示主键冲突，并无死锁出现。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这种情况下的死锁是由于 <code>S锁</code> 升级到 <code>X锁</code>导致的一种死锁，在平常的业务代码中应该尽量避免并发插入一个主键。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在临近上线之前，我们系统做了一次压力测试，发现有一个接口在高并发情况下会出现一个死锁的情况。。首先申明…不是我写的，我只是帮忙排查下。&lt;/p&gt;
&lt;p&gt;随着对Mysql锁的深入了解，于是就准备写几篇文章来记录下Mysql各种事物和索引的情况下出现死锁的情况。&lt;/p&gt;
&lt;p&gt;今
      
    
    </summary>
    
      <category term="Mysql" scheme="https://somersames.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://somersames.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Vue里面相同页面不同URL的刷新解决方案</title>
    <link href="https://somersames.github.io/2019/07/24/Vue%E9%87%8C%E9%9D%A2%E7%9B%B8%E5%90%8C%E9%A1%B5%E9%9D%A2%E4%B8%8D%E5%90%8CURL%E7%9A%84%E5%88%B7%E6%96%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://somersames.github.io/2019/07/24/Vue里面相同页面不同URL的刷新解决方案/</id>
    <published>2019-07-23T16:09:58.000Z</published>
    <updated>2019-08-02T15:37:07.145Z</updated>
    
    <content type="html"><![CDATA[<p>随着项目的收尾，使用<code>Vue</code>也有大概两个月时间了，在这期间也才遇到过了不少的问题，今天就来说下 <code>Vue</code> 中URL不同但是页面相同的解决办法。</p><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>假设有两个URL，都对应的是一个相同的 Vue 页面，URL分别是 <code>view/account/1</code> 和 <code>edit/account/1</code>，此时如果由 <code>view/account/1</code> 跳转至 <code>edit/account/1</code>，你会发现页面是不会刷新的， 从而直接影响了整体的功能。</p><p>于是去网上寻找解决方案，在一个 github 的 issue 里面，看到也有人反映过这个问题，不过作者的回复是采用</p><p><code>reload</code> 方式进行强制刷新，也就是类似于 F5 那样，页面首先会白一下，然后就再出现元素。这样虽然可以实现页面上元素的一些加载，但是同时它的弊端也体现出来了，就是对用户极度的不友好，所以最后我们才用了一种Reload的方式来进行刷新的。</p><p>首先是在<code>App.vue</code>里面添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;router-view v-<span class="keyword">if</span>=<span class="string">'isAlive'</span>/&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">  provide () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      reload: <span class="keyword">this</span>.reload</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isAlive: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reload () &#123;</span><br><span class="line">      <span class="keyword">this</span>.isAlive = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isAlive = <span class="literal">true</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>然后再需要刷新的 Vue 页面直接通过 <code>inject</code> 来进行使用即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> &lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;el-form :model=<span class="string">"account"</span>&gt;</span><br><span class="line">        &lt;el-form-item label=<span class="string">"姓名"</span> prop=<span class="string">"name"</span> &gt;</span><br><span class="line">          &lt;el-input v-model=<span class="string">"account.name"</span> placeholder=<span class="string">"请输入"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">          &lt;el-form-item label="年龄" prop="age" &gt;</span><br><span class="line">          &lt;el-input v-model="account.age" placeholder="请输入"&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">          &lt;el-form-item label="性别" prop="gender" &gt;</span><br><span class="line">          &lt;el-input v-model="account.gender" placeholder="请输入"&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  inject: ['reload'],</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      account: &#123;</span><br><span class="line">        name: null,</span><br><span class="line">        age: null,</span><br><span class="line">        gender: null</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    '$route' (to, from) &#123;</span><br><span class="line">      this.reload();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>最后便可以实现页面状态的重新加载。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着项目的收尾，使用&lt;code&gt;Vue&lt;/code&gt;也有大概两个月时间了，在这期间也才遇到过了不少的问题，今天就来说下 &lt;code&gt;Vue&lt;/code&gt; 中URL不同但是页面相同的解决办法。&lt;/p&gt;
&lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Vue" scheme="https://somersames.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://somersames.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>为什么Spring官方推荐通过构造器注入</title>
    <link href="https://somersames.github.io/2019/07/22/%E4%B8%BA%E4%BB%80%E4%B9%88Spring%E5%AE%98%E6%96%B9%E6%8E%A8%E8%8D%90%E9%80%9A%E8%BF%87%E6%9E%84%E9%80%A0%E5%99%A8%E6%B3%A8%E5%85%A5/"/>
    <id>https://somersames.github.io/2019/07/22/为什么Spring官方推荐通过构造器注入/</id>
    <published>2019-07-21T16:16:15.000Z</published>
    <updated>2019-07-21T16:21:56.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>我们在使用Spring的时候，最方便的就是它的IOC（控制反转），也就是所有的Bean都交由</p><p>Spring进行管理，那么我们在看网上的文章或者自己在写代码的时候经常会像这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   TestDao TestDao;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> TestDao TestDao;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">TestService</span><span class="params">(TestDao TestDao)</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.TestDao = TestDao;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是貌似许多人都会使用第一种方式，因为这样简单方便，如果是采用第二种的话，每一次新增加一个bean，都需要在构造器的入参上面加一个参数，就会显得有点麻烦。</p><p>但是如果采用第一个写法，就会在IDEA里面出现一个提示：</p><blockquote><p> spring官方建议通过构造器的方式进行注入</p></blockquote><p>这又是为什么呢？</p><p><a href="https://spring.io/blog/2007/07/11/setter-injection-versus-constructor-injection-and-the-use-of-required/" target="_blank" rel="noopener">Spring官方对于Setter注入和构造器注入的看法</a></p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>在springboot里面，最常用的注入方式有两种：一种是构造器注入，一种是field注入</p><p>在上一部分的代码里面，第一个是 Field 注入，第二个是构造器注入，既然这两种方式Spring都支持，那么到底这两种有什么区别呢？</p><h3 id="Field注入"><a href="#Field注入" class="headerlink" title="Field注入"></a>Field注入</h3><p>这边新建两个测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    A a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a.sayA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时你启动Spring的话，就会出现一个空指针的异常，如果需要避免的话，则必须是类 <code>A</code> 先进行初始化，然后再初始化 <code>B</code> 。（当然Spring官方也提供了很多方式来控制 Bean 的初始化顺序，但是和本篇文章无关）</p><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> A a;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">(A a)</span></span>&#123;</span><br><span class="line">        a.sayA();</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时Spring的项目就会正常的启动，那么为什么同样的代码，一个通过构造器注入，一个通过Field注入，两者的结果相差这么大呢？</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>官方之所以现在推荐使用构造器注入，是因为通过构造器注入是可以防止 <code>空指针异常</code>，同时可以确保的是被引用的 <code>Bean</code> ，它的引用是不可以变的，所以这可能是Spring官方团队的一些权衡点吧<br>当然早期的时候，Spring曾推荐过使用Setter注入，不够现在可能Spring可能觉得构造器注入比较好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;我们在使用Spring的时候，最方便的就是它的IOC（控制反转），也就是所有的Bean都交由&lt;/p&gt;
&lt;p&gt;Spring进行管理，那么我们在看网上的
      
    
    </summary>
    
      <category term="Spring" scheme="https://somersames.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://somersames.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>2019年07月第一周总结</title>
    <link href="https://somersames.github.io/2019/07/07/2019%E5%B9%B407%E6%9C%88%E7%AC%AC%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://somersames.github.io/2019/07/07/2019年07月第一周总结/</id>
    <published>2019-07-07T13:57:49.000Z</published>
    <updated>2019-07-07T14:15:37.690Z</updated>
    
    <content type="html"><![CDATA[<p>这一周主要学习如下：</p><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>在使用ElementUI的时候有一个<code>el-select</code>标签，我们有一个需求就是需要在下拉列表的时候还需要过滤出特定的选项，但是<code>ElementUI</code>官方默认的过滤却只能支持 label 的筛选，所以这个时候就需要重新<code>filter-method</code>方法来过滤出所需要的选项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">v-model</span>=<span class="string">"selectData"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">"selectData.value"</span> <span class="attr">placeholder</span>=<span class="string">"请选择"</span> <span class="attr">filterable</span> <span class="attr">:filter-method</span>=<span class="string">"search"</span> <span class="attr">prop</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"item in options"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"item.value"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label</span>=<span class="string">"item.label"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:value</span>=<span class="string">"item.value"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"float: left"</span>&gt;</span>&#123;&#123; item.label &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"float: right; font-size: 15px"</span>&gt;</span>&#123;&#123; item.value &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="undefined">    return &#123;</span></span><br><span class="line"><span class="undefined">      options: [&#123;</span></span><br><span class="line"><span class="undefined">        value: '选项1',</span></span><br><span class="line"><span class="undefined">        label: '黄金糕'</span></span><br><span class="line"><span class="undefined">      &#125;, &#123;</span></span><br><span class="line"><span class="undefined">        value: '选项2',</span></span><br><span class="line"><span class="undefined">        label: '双皮奶'</span></span><br><span class="line"><span class="undefined">      &#125;, &#123;</span></span><br><span class="line"><span class="undefined">        value: '选项3',</span></span><br><span class="line"><span class="undefined">        label: '蚵仔煎'</span></span><br><span class="line"><span class="undefined">      &#125;, &#123;</span></span><br><span class="line"><span class="undefined">        value: '选项4',</span></span><br><span class="line"><span class="undefined">        label: '龙须面'</span></span><br><span class="line"><span class="undefined">      &#125;, &#123;</span></span><br><span class="line"><span class="undefined">        value: '选项5',</span></span><br><span class="line"><span class="undefined">        label: '北京烤鸭'</span></span><br><span class="line"><span class="undefined">      &#125;],</span></span><br><span class="line"><span class="undefined">      selectData: &#123;</span></span><br><span class="line"><span class="undefined">        value: ''</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    search (val) &#123;</span></span><br><span class="line"><span class="undefined">      let copyObj2 = JSON.parse(JSON.stringify(this.options));</span></span><br><span class="line"><span class="undefined">      if (val != null &amp;&amp; val !== '') &#123;</span></span><br><span class="line"><span class="undefined">        this.options = copyObj2.filter((item) =&gt; &#123;</span></span><br><span class="line"><span class="undefined">          if (item.value.indexOf(val) &gt; -1) &#123;</span></span><br><span class="line"><span class="undefined">            debugger;</span></span><br><span class="line"><span class="undefined">            return true;</span></span><br><span class="line"><span class="undefined">          &#125; else &#123;</span></span><br><span class="line"><span class="undefined">            return false;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125; else &#123;</span></span><br><span class="line"><span class="undefined">        this.options = copyObj2;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是后来又说要把选择的值给另一个字段…于是我就在search方法下面加了一行<code>this.otherField = val</code>。。后来前端把那一行给去除了。。。然后修改为如下代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">"selectData.value"</span> <span class="attr">placeholder</span>=<span class="string">"请选择"</span> <span class="attr">filterable</span> <span class="attr">:filter-method</span>=<span class="string">"(val)=&gt;search(val,()=&gt;&#123;this.otherField=val&#125;)"</span> <span class="attr">prop</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"> search (val, callback) &#123;</span><br><span class="line">      callback();</span><br><span class="line">  // 一样的代码</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>后来就没管了，不过现在觉得这样写的话有好处也有坏处。好处就是对于如果只有很少的字段变动的话，这样改无疑的好的，因为可以避免在方法里面写太多的字段，但是一旦重复的多起来，我觉得在方法里面写起来比较好。</p><h2 id="ElasticSearch的乐观锁机制（同步的坑）"><a href="#ElasticSearch的乐观锁机制（同步的坑）" class="headerlink" title="ElasticSearch的乐观锁机制（同步的坑）"></a>ElasticSearch的乐观锁机制（同步的坑）</h2><p>上周由于在做补偿机制的时候，需要对Es一些数据进行频繁的更新，但是在测试的时候 ES 经常会返回<code>version conflict</code> ，后来搜索了一下，发现 ES 对于每一个数据都有一个<code>_version</code>字段</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-07-07%20%E4%B8%8B%E5%8D%888.57.25.png" alt=""></p><p>而我们对一个数据如果频繁更新的话，就会导致ES的乐观锁生效，从而更新失败。如下：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-07-07%20%E4%B8%8B%E5%8D%889.13.03.png" alt=""></p><p>由于我使用的ES版本是ES6.7.1，这时候只能通过<code>if_seq_no</code>来解决了，因为当我尝试使用外部版本号控制的时候，突然发现。。。ES官方竟然不推荐了</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-07-07%20%E4%B8%8B%E5%8D%889.27.26.png" alt=""></p><p>这部分后续写文章继续分析了。。。</p><h2 id="ES的升级以及基础排序方法"><a href="#ES的升级以及基础排序方法" class="headerlink" title="ES的升级以及基础排序方法"></a>ES的升级以及基础排序方法</h2><p>由于需要列表的数据进行综合查询然后排序，这个时候就只能手写排序方法了，好在ES的官方文档倒也详细，所以参照官方的文档，自己摸索了两个小时倒也写出来了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String script = <span class="string">"你的排序脚本"</span>;</span><br><span class="line">Script inline = <span class="keyword">new</span> Script(script);</span><br><span class="line">SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"你的索引"</span>);</span><br><span class="line">SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">sourceBuilder.sort(<span class="keyword">new</span> ScriptSortBuilder(inline,ScriptSortBuilder.ScriptSortType.NUMBER).order(SortOrder.DESC));</span><br></pre></td></tr></table></figure><h2 id="Rabbitmq"><a href="#Rabbitmq" class="headerlink" title="Rabbitmq"></a>Rabbitmq</h2><p>由于Mq环境需要统一下，所以这段时间也把自己负责的Mq又<code>fanout</code>改为<code>direct</code>了。改动起来到也没啥难度，就是在<code>convertAndSend</code>方法里面多加了一个<code>routeKey</code>参数而已</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>这周主要是在 Leetcode 上写了点<code>Array</code>的一些算法题，因为都是简单的题目，暂时还未遇到一些比较经典的题目</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>周三才想起来试试记录下，下周估计会详细点</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这一周主要学习如下：&lt;/p&gt;
&lt;h2 id=&quot;Vue&quot;&gt;&lt;a href=&quot;#Vue&quot; class=&quot;headerlink&quot; title=&quot;Vue&quot;&gt;&lt;/a&gt;Vue&lt;/h2&gt;&lt;p&gt;在使用ElementUI的时候有一个&lt;code&gt;el-select&lt;/code&gt;标签，我们有一个
      
    
    </summary>
    
      <category term="周记" scheme="https://somersames.github.io/categories/%E5%91%A8%E8%AE%B0/"/>
    
    
      <category term="周记" scheme="https://somersames.github.io/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Es6.X升级到Es7.x的变化</title>
    <link href="https://somersames.github.io/2019/07/07/Es6-X%E5%8D%87%E7%BA%A7%E5%88%B0Es7-x%E7%9A%84%E5%8F%98%E5%8C%96/"/>
    <id>https://somersames.github.io/2019/07/07/Es6-X升级到Es7-x的变化/</id>
    <published>2019-07-06T16:35:24.000Z</published>
    <updated>2019-07-06T16:39:52.081Z</updated>
    
    <content type="html"><![CDATA[<p>ElasticSearch6.升级至ElasticSearch7.x的一些变化</p><p>由于最近需要将<code>Es6.x</code>升级至<code>Es7</code>，所以正好记录下在升级过程中遇到的一些问题，以便以后翻阅。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="Es7-x系列中取消了Type"><a href="#Es7-x系列中取消了Type" class="headerlink" title="Es7.x系列中取消了Type"></a>Es7.x系列中取消了Type</h3><p>在<code>Es6</code>系列之前，创建一个索引是需要<code>index,type</code>这两个缺一不可的，例如如下请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> PUT localhost:9200/es_6     </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"mappings"</span>:&#123;</span><br><span class="line">        <span class="attr">"index_type"</span>:&#123;</span><br><span class="line">            <span class="attr">"properties"</span>:&#123;</span><br><span class="line">                <span class="attr">"message"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"acknowledged"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"shards_acknowledged"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"es_6"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在 <code>ES7</code> 版本中，如果再使用这个 Json 串的话是会跑出一个异常的，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"error"</span>: &#123;</span><br><span class="line">        <span class="attr">"root_cause"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"mapper_parsing_exception"</span>,</span><br><span class="line">                <span class="attr">"reason"</span>: <span class="string">"Root mapping definition has unsupported parameters:  [index_type : &#123;properties=&#123;message=&#123;type=text&#125;&#125;&#125;]"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"mapper_parsing_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"Failed to parse mapping [_doc]: Root mapping definition has unsupported parameters:  [index_type : &#123;properties=&#123;message=&#123;type=text&#125;&#125;&#125;]"</span>,</span><br><span class="line">        <span class="attr">"caused_by"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"mapper_parsing_exception"</span>,</span><br><span class="line">            <span class="attr">"reason"</span>: <span class="string">"Root mapping definition has unsupported parameters:  [index_type : &#123;properties=&#123;message=&#123;type=text&#125;&#125;&#125;]"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么此时在<code>ES7</code>版本中，建立 mapping 是不需要 Type 的，所以其索引修改为下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT localhost:9201/es_7</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"mappings"</span>:&#123;</span><br><span class="line">        <span class="attr">"properties"</span>:&#123;</span><br><span class="line">            <span class="attr">"message"</span>:&#123;</span><br><span class="line">                <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"acknowledged"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"shards_acknowledged"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"es_7"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES7-x中新建数据"><a href="#ES7-x中新建数据" class="headerlink" title="ES7.x中新建数据"></a>ES7.x中新建数据</h3><p>在 ES6 中由于有一个 Type 类型，因此在新建数据的时候都需要穿入一个Type，那么在 Es7 里面，由于 Type 被取消了，所以在 ES7 里面的新增就需要稍微修改下了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST localhost:9201/es_7/_create/1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"message"</span>:<span class="string">"a"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_index"</span>: <span class="string">"es_7"</span>,</span><br><span class="line">    <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">    <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"_seq_no"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实还有另一种写法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST localhost:9201/es_7/_doc/2?op_type=create</span><br></pre></td></tr></table></figure><p>剩下的一些改动可能就是新的业务上线需要对某些数据进行频繁的改动，而ES的乐观锁机制导致经常失败，这个问题得需要单独处理下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ElasticSearch6.升级至ElasticSearch7.x的一些变化&lt;/p&gt;
&lt;p&gt;由于最近需要将&lt;code&gt;Es6.x&lt;/code&gt;升级至&lt;code&gt;Es7&lt;/code&gt;，所以正好记录下在升级过程中遇到的一些问题，以便以后翻阅。&lt;/p&gt;
&lt;h2 id=&quot;区别&quot;&gt;
      
    
    </summary>
    
      <category term="ElasticSearch" scheme="https://somersames.github.io/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="https://somersames.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>vue里面冒号和非冒号区别</title>
    <link href="https://somersames.github.io/2019/06/27/vue%E9%87%8C%E9%9D%A2%E5%86%92%E5%8F%B7%E5%92%8C%E9%9D%9E%E5%86%92%E5%8F%B7%E5%8C%BA%E5%88%AB/"/>
    <id>https://somersames.github.io/2019/06/27/vue里面冒号和非冒号区别/</id>
    <published>2019-06-26T16:07:16.000Z</published>
    <updated>2019-07-06T16:32:15.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue里面冒号和非冒号的却别"><a href="#vue里面冒号和非冒号的却别" class="headerlink" title="vue里面冒号和非冒号的却别"></a>vue里面冒号和非冒号的却别</h2><p>今天在使用Vue的时候，突然发现了一个问题，就是在后端传过来的值因为是一个<code>boolean</code>类型的，但是前端又需要进行展示，由于我们使用的是<code>ElementUI</code>的话，于是参照官网上就是这样写的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select v-model=&quot;option_boolean&quot;&gt;</span><br><span class="line">        &lt;el-option label=&quot;1&quot; value=&quot;true&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">        &lt;el-option label=&quot;2&quot; value=&quot;false&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">&lt;/el-select&gt;</span><br></pre></td></tr></table></figure><p>但是此时页面上展示并非是 1 和 2 ，而是 true 和 false。如下：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-06-26%20%E4%B8%8B%E5%8D%8810.20.15.png" alt=""></p><p>按照正常的逻辑，此时这个下拉框里面的值应该是1，而不是true。如果此时修改为如下写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select v-model=&quot;option_boolean&quot;&gt;</span><br><span class="line">        &lt;el-option label=&quot;1&quot; :value=&quot;true&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">        &lt;el-option label=&quot;2&quot; :value=&quot;false&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br></pre></td></tr></table></figure><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-06-26%20%E4%B8%8B%E5%8D%8810.22.58.png" alt=""></p><p>此时的页面就会显示正常了。</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>在 Vue 里面，冒号<code>:</code>代表的是一个双向绑定，其值要么是一个变量，要么是一个函数，而此 Demo 里面，第一个例子中，value仅仅是作为一个属性，所以它只能是接受字符串类型等</p><p>但是在第二个例子里面，由于使用了 Vue 的一个双向绑定模式，所以此时便可以正确的识别出 boolean 类型的值了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue里面冒号和非冒号的却别&quot;&gt;&lt;a href=&quot;#vue里面冒号和非冒号的却别&quot; class=&quot;headerlink&quot; title=&quot;vue里面冒号和非冒号的却别&quot;&gt;&lt;/a&gt;vue里面冒号和非冒号的却别&lt;/h2&gt;&lt;p&gt;今天在使用Vue的时候，突然发现了一个问题，
      
    
    </summary>
    
      <category term="Vue" scheme="https://somersames.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://somersames.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>如何对多个IF进行优化呢?</title>
    <link href="https://somersames.github.io/2019/06/11/%E5%A6%82%E4%BD%95%E5%AF%B9%E5%A4%9A%E4%B8%AAIF%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96%E5%91%A2/"/>
    <id>https://somersames.github.io/2019/06/11/如何对多个IF进行优化呢/</id>
    <published>2019-06-10T16:18:24.000Z</published>
    <updated>2019-07-06T16:32:15.097Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中，不可避免的会使用到<code>IF</code>条件，如果仅仅是偶尔试使用以下，倒也无妨，但是如果在项目中大量的使用<code>IF</code>判断，那么会造成项目的杂乱无章。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在项目中，不可避免的会使用到&lt;code&gt;IF&lt;/code&gt;条件，如果仅仅是偶尔试使用以下，倒也无妨，但是如果在项目中大量的使用&lt;code&gt;IF&lt;/code&gt;判断，那么会造成项目的杂乱无章。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据库调优(一)</title>
    <link href="https://somersames.github.io/2019/06/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%B0%83%E4%BC%98-%E4%B8%80/"/>
    <id>https://somersames.github.io/2019/06/09/数据库调优-一/</id>
    <published>2019-06-09T15:42:31.000Z</published>
    <updated>2019-07-06T16:32:15.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>在上一篇文章中，我们有一个表，里面的内容如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from org_copy;</span><br><span class="line">+<span class="comment">--------+-----------------+---------------+----------+</span></span><br><span class="line">| org_id | org_name        | org_parent_id | org_copy |</span><br><span class="line">+<span class="comment">--------+-----------------+---------------+----------+</span></span><br><span class="line">|      1 | 一级部门        |             0 | 1        |</span><br><span class="line">|      2 | 一一级部门      |             0 | 2        |</span><br><span class="line">|      3 | 1.1级部门       |             1 | 3        |</span><br><span class="line">|      4 | 1.2级部门       |             1 | 4        |</span><br><span class="line">|      5 | 1.1.1部门       |             3 | 5        |</span><br><span class="line">|      6 | 1.1.2部门       |             3 | 6        |</span><br><span class="line">|      7 | 1.1.1.1部门     |             5 | 7        |</span><br><span class="line">|      8 | 1.3部门         |             1 | 8        |</span><br><span class="line">|      9 | 1.2.1部门       |             4 | 9        |</span><br><span class="line">+<span class="comment">--------+-----------------+---------------+----------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>这应该是一个很基本的一个mysql表，同时我们在上一篇文章中，也执行了如下SQL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org_copy WHERE org_name&gt;'一级部门' and  org_parent_id=1;</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table    | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | org_copy | NULL       | range | index_name    | index_name | 768     | NULL |    1 |    11.11 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>那么如果此时我们换一个SQL来进行查询呢?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org_copy WHERE org_name&gt;'1' and  org_parent_id=1;</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | org_copy | NULL       | ALL  | index_name    | NULL | NULL    | NULL |    9 |    11.11 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>此时是不是会一脸疑惑…为啥我的这个SQL，明明一样呀，但是为啥第一个就可以走索引呢???<br>因为在mysql里面，会判断<code>当前where条件查询的数据量</code>，由于索引是由一个<code>B+</code>树的形式存在，所以当通过<code>org_name</code>来进行比较筛选的时候，是可以很快的定位出大致需要查询的数据量。</p><p>而当数据量大于30%的时候，mysql就会采用一种全表扫描的方式来进行查询，这也就是为什么不建议在区分度低的字段上建立索引了，假设一个字段只有三个值或者两个值，那么极有可能mysql会直接通过全表扫描的方式进行查询。</p><h3 id="索引覆盖"><a href="#索引覆盖" class="headerlink" title="索引覆盖"></a>索引覆盖</h3><p>这个是mysql调优中经常忽略的一点，由于mysql在建立索引的时候会一次性将索引字段存入到索引树中，所以如果我们的<code>where</code>条件中所包含的字段均可以在索引中找到的话，那么mysql就会直接从索引中去取数据，而不会进行回表。例如如下SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain  SELECT org_parent_id FROM org_copy WHERE org_copy=1;</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | org_copy | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 4325 |    10.00 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>由于<code>org_copy</code>字段非索引，所以此时只能是通过回表的方式进行查询。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>由于mysql会在数据量大于<code>30%</code>的时候进行全表扫描，所以最好就是不要在区分度低的字段上建立索引，避免进行了全表扫描。</li><li>对于过滤字段的使用，应该是尽最大的努力让<code>SQL</code>采用索引覆盖，如果无法避免的话就尽量让最左原则生效。进而加快查询速度。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h2&gt;&lt;p&gt;在上一篇文章中，我们有一个表，里面的内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="Mysql" scheme="https://somersames.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://somersames.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>数据库最左原则以及理解</title>
    <link href="https://somersames.github.io/2019/06/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%80%E5%B7%A6%E5%8E%9F%E5%88%99%E4%BB%A5%E5%8F%8A%E7%90%86%E8%A7%A3/"/>
    <id>https://somersames.github.io/2019/06/04/数据库最左原则以及理解/</id>
    <published>2019-06-04T14:57:54.000Z</published>
    <updated>2019-07-06T16:32:15.098Z</updated>
    
    <content type="html"><![CDATA[<p>本次的实验是基于<code>Mysql8</code>版本。首先在数据库中有一个表，其结构如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table org;</span><br><span class="line">+<span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Table | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                   |</span><br><span class="line">+<span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| org   | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`org`</span> (</span><br><span class="line">  <span class="string">`org_id`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`org_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`org_parent_id`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`org_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`index_name`</span> (<span class="string">`org_name`</span>,<span class="string">`org_parent_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br><span class="line">+<span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到在这个表中，有一个主键<code>org_id</code>以及一个联合索引<code>index_name</code>。其他的并无特别之处。</p><h3 id="最左原则"><a href="#最左原则" class="headerlink" title="最左原则"></a>最左原则</h3><p>在Mysql里面，有一个最左原则，官网的介绍如下：</p><blockquote><p>The name index is an index over the last_name and first_name columns. The index can be used for lookups in queries that specify       values in a known range for combinations of last_name and first_name values. It can also be used for queries that specify just a      last_name value because that column is a leftmost prefix of the index (as described later in this section). Therefore, the name       index is used for lookups in the following queries。</p></blockquote><p>既然是最左原则，那么尝试着写一条SQL如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org WHERE org_name='1' and  org_parent_id=1;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key        | key_len | ref         | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | org   | NULL       | ref  | index_name    | index_name | 773     | const,const |    1 |   100.00 | Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到其<code>type</code>是 ref 类型的，于是去<code>mysql</code>官网寻找<code>ref</code>类型的索引是什么：</p><blockquote><p> All rows with matching index values are read from this table for each combination of rows from the previous tables. ref is used if    the join uses only a leftmost prefix of the key or if the key is not a PRIMARY KEY or UNIQUE index (in other words, if the join       cannot select a single row based on the key value). If the key that is used matches only a few rows, this is a good join type.</p></blockquote><p>啥意思呢，就是当使用的索引符合最左原则的时候，且索引即不是<code>主键</code>也不是<code>唯一索引</code>。那么它所使用的类型就是<code>ref</code>。</p><p>那如果将<code>org_name</code>和<code>org_parant_id</code>反着呢?<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org WHERE org_parent_id =1  and org_name='1';</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key        | key_len | ref         | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | org   | NULL       | ref  | index_name    | index_name | 773     | const,const |    1 |   100.00 | Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>说好的最左原则呢。。。索引的org_parent_id不是在右边的嘛。</p><p>其实在这种情况下，无论<code>org_parent_id</code>在左边还是在右边，对于查询结果来说，都是一样的。既然都是一样的，那么<code>Mysql</code>的优化器就直接把该条语句给优化掉了，所以你会发现无论是<code>org_name</code>在左还是在右边都是会使用到索引。</p><p>那再换一条SQL呢？<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org WHERE org_name&gt;'1' and  org_parent_id=1;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra                    |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | org   | NULL       | index | index_name    | index_name | 773     | NULL |    9 |    11.11 | Using where; Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>这就尴尬了…由于在<code>最左原则</code>里面，若前一个索引使用了<code>&gt;</code>、<code>&lt;</code>等比较符的时候，后面一个是不会进行索引查询的，这个跟<code>Mysql</code>的索引结构有关系(文章后面会介绍)，但是为啥这里又会走索引呢? 这个时候由于在<code>Extra</code>里面看到了<code>Using index</code>，猜测难道是发生了索引覆盖? 于是我又建立了一个表。<br>于是立即又新建了一张表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table org_copy;</span><br><span class="line">+----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Table    | Create Table                                                                                                                                                                                                                                                                                |</span><br><span class="line">+----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| org_copy | CREATE TABLE `org_copy` (</span><br><span class="line">  `org_id` int(5) NOT NULL,</span><br><span class="line">  `org_name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `org_parent_id` int(5) DEFAULT NULL,</span><br><span class="line">  `org_copy` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`org_id`),</span><br><span class="line">  KEY `index_name` (`org_name`,`org_parent_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 |</span><br><span class="line">+----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>这时，我再次执行刚才的<code>sql</code>。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org_copy WHERE org_name&gt;'一级部门' and  org_parent_id=1;</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table    | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | org_copy | NULL       | range | index_name    | index_name | 768     | NULL |    1 |    11.11 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>看起来的确是由于发生了<code>索引覆盖</code>，导致了虽然不符合<code>最左原则</code>，但是还是走了一个索引。</p><h3 id="索引覆盖"><a href="#索引覆盖" class="headerlink" title="索引覆盖"></a>索引覆盖</h3><p>什么是索引覆盖呢?<br>在<code>org</code>这个表里面，有三个字段，但是这三个字段分别是一个<code>主键索引</code>和一个<code>联合索引</code>，由于我查询的字段就包含在索引里面，那么<br>而恰好这个表的所有字段都在索引里面，这就导致了<code>mysql</code>可以直接从索引里面获取到所需要的数据，那么此时就不必要再去通过<code>磁盘IO</code>去查询额外的字段数据了。也就不需要进行</p><p>继续回到<code>最左原则</code>，由于<code>最左原则</code>要求在聚合索引里面，每一个列是要为一个等值连接。即，如果<code>org_name</code>使用了非等值连接，那么就会导致<code>org_parent_id</code>无法使用最左原则。例子如下：若<code>org_parent_id</code>使用非等值连接，为了避免<code>索引覆盖</code>对<code>SQL</code>的影响，所以此次的<code>SQL</code>在 copy表里面执行。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org_copy WHERE org_name='1' and  org_parent_id&gt;1;</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table    | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | org_copy | NULL       | range | index_name    | index_name | 773     | NULL |    1 |   100.00 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到确实是使用了<code>聚合索引</code>，同时最后一列的<code>Using index condition</code>也表明，这条查询语句会先通过索引来过滤出符合的数据，然后从过滤出来的数据里面在使用我们的<code>where</code>条件进行二次过滤，最终找出符合的数据。</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>在Mysql里面，索引是以<code>B+树</code>的形式实现的，而索引又分为一级索引(主键)和二级索引(该文章中的<code>index_name</code>)，其实在<code>InnoDB</code>里面，二级索引的叶子节点所存放的数据就是主键索引所对应的地址，这也称之为<code>回表</code>。<br>回到文章中来，在这篇文章中介绍的<code>index_name</code>索引里面，mysql是根据索引列的顺序，一个一个在索引里面进行查找过滤，如果该索引在某一列断开了，例如索引<code>A</code>的列是(A、B、C)，但是在<code>SQL</code>里面却是<code>where A =&#39;a&#39; and C=&#39;c&#39;</code>，此时就会只使用该索引<code>A</code>的<code>A</code>列，这个跟<code>B+</code>树的特点有关。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table index_test;</span><br><span class="line">+<span class="comment">------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Table      | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                                                |</span><br><span class="line">+<span class="comment">------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| index_test | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`index_test`</span> (</span><br><span class="line">  <span class="string">`a`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`b`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`c`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`d`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`f`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`a`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`index_name`</span> (<span class="string">`b`</span>,<span class="string">`c`</span>,<span class="string">`d`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br><span class="line">+<span class="comment">------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`index_test`</span> <span class="keyword">WHERE</span> b=<span class="string">'b'</span> <span class="keyword">and</span> d=<span class="string">'d'</span>;</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table      | partitions | type | possible_keys | key        | key_len | ref   | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | index_test | NULL       | ref  | index_name    | index_name | 768     | const |    1 |    50.00 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到<code>ref</code>就一个<code>const</code>，所以基本可以推测目前只用了<code>b</code>列，那么换成<code>WHERE b=&#39;b&#39; and c=&#39;c&#39;</code>呢?<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM `index_test` WHERE b='b' and c='c';</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table      | partitions | type | possible_keys | key        | key_len | ref         | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------------+------+----------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | index_test | NULL       | ref  | index_name    | index_name | 773     | const,const |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------------+------+----------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>所有对于使用<code>最左原则</code>来进行调优的话，首先应该注意的是索引列最好都是<code>等值连接</code>，并且中途最好不要有任何的断裂。这样才能发挥出联合索引的优势</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本次的实验是基于&lt;code&gt;Mysql8&lt;/code&gt;版本。首先在数据库中有一个表，其结构如下：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ElementUI使用rules遇到的一些问题</title>
    <link href="https://somersames.github.io/2019/05/30/ElementUi%E4%BD%BF%E7%94%A8rules%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>https://somersames.github.io/2019/05/30/ElementUi使用rules遇到的一些问题/</id>
    <published>2019-05-29T16:07:43.000Z</published>
    <updated>2019-06-09T02:58:38.531Z</updated>
    
    <content type="html"><![CDATA[<p>这些天一直在踩<code>Vue</code>的坑…今天遇到的一个问题是在一个父组件中，将某些数据通过<code>props</code>传递给子组件，同时在子组件里面也有相应的一些<code>rules</code>规则，但是在实际的开发中，却发现子组件的<code>rules</code>并未生效…反而一直提示对应的 message，后来才发现是跟 ElementUI 的<code>prop</code>有关。</p><p>首先看一段代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>该Demo是为了测试Vue中rule和prop的不同<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"vehicles"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"公共汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"bus.wheel"</span> <span class="attr">:rules</span>=<span class="string">"&#123;required: true,message: '请输入公共汽车车轮个数'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"vehicles.bus.wheel"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"公共汽车司机驾照"</span> <span class="attr">prop</span>=<span class="string">"bus.driver.license"</span> <span class="attr">:rules</span>=<span class="string">"&#123;validator: licenseCheck ,trigger:'blur'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"vehicles.bus.driver.license"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"公共汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"bus.driver.years"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"vehicles.bus.driver.years"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">car</span> <span class="attr">:car</span>=<span class="string">"vehicles.car"</span>&gt;</span><span class="tag">&lt;/<span class="name">car</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">import Car from './Car';</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    Car</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="undefined">    return &#123;</span></span><br><span class="line"><span class="undefined">      vehicles: &#123;</span></span><br><span class="line"><span class="undefined">        bus: &#123;</span></span><br><span class="line"><span class="undefined">          wheel: null,</span></span><br><span class="line"><span class="undefined">          driver: &#123;</span></span><br><span class="line"><span class="undefined">            license: null,</span></span><br><span class="line"><span class="undefined">            years: null</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        car: &#123;</span></span><br><span class="line"><span class="undefined">          wheel: null,</span></span><br><span class="line"><span class="undefined">          driver: &#123;</span></span><br><span class="line"><span class="undefined">            license: null,</span></span><br><span class="line"><span class="undefined">            years: null</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        train: &#123;</span></span><br><span class="line"><span class="undefined">          wheel: null,</span></span><br><span class="line"><span class="undefined">          driver: &#123;</span></span><br><span class="line"><span class="undefined">            license: null,</span></span><br><span class="line"><span class="undefined">            years: null</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      person: &#123;</span></span><br><span class="line"><span class="undefined">        child: &#123;</span></span><br><span class="line"><span class="undefined">          year: null</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    licenseCheck (rule, value, callback) &#123;</span></span><br><span class="line"><span class="undefined">      let m = this.car;</span></span><br><span class="line"><span class="undefined">      console.log(m);</span></span><br><span class="line"><span class="undefined">      debugger;</span></span><br><span class="line"><span class="undefined">      if (value != null) &#123;</span></span><br><span class="line"><span class="undefined">        if (value != 'A') &#123;</span></span><br><span class="line"><span class="undefined">          callback(new Error('必须A照'));</span></span><br><span class="line"><span class="undefined">        &#125; else &#123;</span></span><br><span class="line"><span class="undefined">          callback();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    init () &#123;</span></span><br><span class="line"><span class="undefined">      console.log(this.car);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时在这个组件中，一切都是正常的，但是一个完整的项目里面，是不可能将所有的元素都堆积在一个页面中，那样的话以后的维护就会非常的麻烦。所以此时就需要一个子组件，然后将父组件中一些数据传递至子组件。<br>代码如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>小汽车子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"wheel"</span> <span class="attr">:rules</span>=<span class="string">"&#123;required: true,message: '请输入公共汽车车轮个数'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.wheel"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车司机驾照"</span> <span class="attr">prop</span>=<span class="string">"driver.license"</span> <span class="attr">:rules</span>=<span class="string">"&#123;validator: licenseCheck ,trigger:'blur'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.driver.license"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"driver.years"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.driver.years"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="undefined">    car: &#123;</span></span><br><span class="line"><span class="undefined">      type: Object,</span></span><br><span class="line"><span class="undefined">      default: function () &#123;</span></span><br><span class="line"><span class="undefined">        return &#123;&#125;;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    licenseCheck (rule, value, callback) &#123;</span></span><br><span class="line"><span class="undefined">      let m = this.car;</span></span><br><span class="line"><span class="undefined">      console.log(m);</span></span><br><span class="line"><span class="undefined">      debugger;</span></span><br><span class="line"><span class="undefined">      if (value != null) &#123;</span></span><br><span class="line"><span class="undefined">        if (value &lt;= 'D') &#123;</span></span><br><span class="line"><span class="undefined">          callback(new Error('必须C照以上'));</span></span><br><span class="line"><span class="undefined">        &#125; else &#123;</span></span><br><span class="line"><span class="undefined">          callback();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    init () &#123;</span></span><br><span class="line"><span class="undefined">      console.log(this.car);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted () &#123;</span></span><br><span class="line"><span class="undefined">    this.init();</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>当然在这个页面里面，一切都是可以正常输入的…就是<code>rules</code>无法使用。由于自己才是刚刚开始接触<code>vue</code>和<code>ElementUI</code>，所以对<code>vue</code>里面的一些使用技巧还不是很熟悉，这个时候看了下父组件里面的<code>prop</code>和<code>v-model</code>，发现<code>prop</code>都是比<code>v-model</code>少一个前缀…所以以为在子组件里面也是这样..其实后来才发新这个。</p><p>然后再去查看<code>ElementUI</code>的官网，发现</p><blockquote><p>prop    表单域 model 字段，在使用 validate、resetFields 方法的情况下，该属性是必填的    string    传入 Form 组件的 model 中的字段</p></blockquote><p>于时倒父组件中看了下，发现<code>el-form</code>确实有<code>:model</code>，然后参照了下<code>ElementUI</code>的介绍…突然想到是不是<code>prop</code>已经自动的将<code>:model</code>的对象带过来了…后来在子组件中进行了测试，修改后如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>小汽车子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"car.wheel"</span> <span class="attr">:rules</span>=<span class="string">"&#123;required: true,message: '请输入公共汽车车轮个数'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.wheel"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车司机驾照"</span> <span class="attr">prop</span>=<span class="string">"car.driver.license"</span> <span class="attr">:rules</span>=<span class="string">"&#123;validator: licenseCheck ,trigger:'blur'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.driver.license"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"car.driver.years"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.driver.years"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="undefined">    car: &#123;</span></span><br><span class="line"><span class="undefined">      type: Object,</span></span><br><span class="line"><span class="undefined">      default: function () &#123;</span></span><br><span class="line"><span class="undefined">        return &#123;&#125;;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    licenseCheck (rule, value, callback) &#123;</span></span><br><span class="line"><span class="undefined">      let m = this.car;</span></span><br><span class="line"><span class="undefined">      console.log(m);</span></span><br><span class="line"><span class="undefined">      debugger;</span></span><br><span class="line"><span class="undefined">      if (value != null) &#123;</span></span><br><span class="line"><span class="undefined">        if (value === 'A') &#123;</span></span><br><span class="line"><span class="undefined">          callback(new Error('必须A照'));</span></span><br><span class="line"><span class="undefined">        &#125; else &#123;</span></span><br><span class="line"><span class="undefined">          callback();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    init () &#123;</span></span><br><span class="line"><span class="undefined">      console.log(this.car);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted () &#123;</span></span><br><span class="line"><span class="undefined">    this.init();</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>于是一切都正常了，后来为了测试是不是非要在<code>el-form</code>上加一个<code>:model</code>才能正常使用<code>rules</code>，所以就写了一个<code>el-form</code>测试。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">""</span> <span class="attr">prop</span>=<span class="string">"person.child.year"</span> <span class="attr">:rules</span>=<span class="string">"&#123;validator: childCheck ,trigger:'blur'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"person.child.year"</span> <span class="attr">placeholder</span>=<span class="string">"请输入小孩的年龄"</span> &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">import Car from './Car';</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    Car</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="undefined">    return &#123;</span></span><br><span class="line"><span class="undefined">      person: &#123;</span></span><br><span class="line"><span class="undefined">        child: &#123;</span></span><br><span class="line"><span class="undefined">          year: null</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    childCheck (rule, value, callback) &#123;</span></span><br><span class="line"><span class="undefined">      debugger;</span></span><br><span class="line"><span class="undefined">      if (parseInt(value) &gt; 16) &#123;</span></span><br><span class="line"><span class="undefined">        callback(new Error('请输入16以下'));</span></span><br><span class="line"><span class="undefined">      &#125; else &#123;</span></span><br><span class="line"><span class="undefined">        callback();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    init () &#123;</span></span><br><span class="line"><span class="undefined">      console.log(this.car);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后发现在<code>childCheck</code>里面<code>value</code>总是获取不到值…一直是 undefinded ,然后再在<code>el-form</code>里面加上一个<code>:modele</code>…修改如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">""</span> <span class="attr">prop</span>=<span class="string">"child.year"</span> <span class="attr">:rules</span>=<span class="string">"&#123;validator: childCheck ,trigger:'blur'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"person.child.year"</span> <span class="attr">placeholder</span>=<span class="string">"请输入小孩的年龄"</span> &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">import Car from './Car';</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    Car</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="undefined">    return &#123;</span></span><br><span class="line"><span class="undefined">      person: &#123;</span></span><br><span class="line"><span class="undefined">        child: &#123;</span></span><br><span class="line"><span class="undefined">          year: null</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    childCheck (rule, value, callback) &#123;</span></span><br><span class="line"><span class="undefined">      debugger;</span></span><br><span class="line"><span class="undefined">      if (parseInt(value) &gt; 16) &#123;</span></span><br><span class="line"><span class="undefined">        callback(new Error('请输入16以下'));</span></span><br><span class="line"><span class="undefined">      &#125; else &#123;</span></span><br><span class="line"><span class="undefined">        callback();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    init () &#123;</span></span><br><span class="line"><span class="undefined">      console.log(this.car);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后就都好了…</p><p>所以以后还是得多看看官方文档…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这些天一直在踩&lt;code&gt;Vue&lt;/code&gt;的坑…今天遇到的一个问题是在一个父组件中，将某些数据通过&lt;code&gt;props&lt;/code&gt;传递给子组件，同时在子组件里面也有相应的一些&lt;code&gt;rules&lt;/code&gt;规则，但是在实际的开发中，却发现子组件的&lt;code&gt;ru
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在Vue中使用filters来进行字典值的转换</title>
    <link href="https://somersames.github.io/2019/05/27/%E5%9C%A8Vue%E4%B8%AD%E4%BD%BF%E7%94%A8filters%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%AD%97%E5%85%B8%E5%80%BC%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>https://somersames.github.io/2019/05/27/在Vue中使用filters来进行字典值的转换/</id>
    <published>2019-05-27T15:07:10.000Z</published>
    <updated>2019-06-09T02:58:38.532Z</updated>
    
    <content type="html"><![CDATA[<p>在Vue里面，经常会遇到一些字典值的转换，而这些字典值由于和后端进行了约定的，一般不会轻易的改变，所以在前后端开发的项目中，这种字典值最好的做法是前端独立的保存一份，自己在前端自行进行处理。</p><p>我们的做法是使用<code>Vuex</code>的<code>store</code>配合<code>filters</code>来进行前端的字典值转化，首先是在<code>store</code>里面将字典值进行固定，然后通过<code>filters</code>在页面中进行一个转换。</p><h2 id="使用Store"><a href="#使用Store" class="headerlink" title="使用Store"></a>使用Store</h2><p>在<code>Vue</code>里面使用<code>store</code>首先需要安装<code>vuex</code>，安装完毕之后就可以直接在<code>main.js</code>里面直接引用了，但是为了统一管理还是决定新建一个<code>store</code>文件夹，然后将<code>store</code>相关的文件全部统一存放，新建完毕之后项目结构如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---App.vue</span><br><span class="line">---main.js</span><br><span class="line">---store</span><br><span class="line">-----index.js</span><br></pre></td></tr></table></figure></p><p>在新建的<code>index.js</code>里面将<code>Vuex</code>实例注入到<code>Vue</code>中，如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    score: [</span><br><span class="line">      <span class="number">60</span>,</span><br><span class="line">      <span class="number">80</span>,</span><br><span class="line">      <span class="number">100</span></span><br><span class="line">    ],</span><br><span class="line">    enum: &#123;</span><br><span class="line">      <span class="number">60</span>: <span class="string">'及格'</span>,</span><br><span class="line">      <span class="number">80</span>: <span class="string">'良好'</span>,</span><br><span class="line">      <span class="number">100</span>: <span class="string">'优秀'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></p><p>在这里我定义了两个变量，一个是<code>score</code>，一个是<code>enum</code>，<code>score</code>主要是为了展示一些固定的值在前端的展示，而<code>enum</code>则是准备介绍<code>filter</code>的使用</p><h3 id="新建一个Vue页面"><a href="#新建一个Vue页面" class="headerlink" title="新建一个Vue页面"></a>新建一个Vue页面</h3><p>在这个页面里面，主要是介绍<code>store</code>的直接使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item, index) of score"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  computed: &#123;</span></span><br><span class="line"><span class="javascript">    ...mapState([<span class="string">'score'</span>])</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后查看页面，就会发现页面上已经出现了三个分数，分别是在<code>store</code>里面定义的60，80，100。这种方式是通过<code>...mapState</code>来获取的<code>state</code>里面定义的一些值。</p><p>通过这种方式有几种好处，第一就是当需要改变前端某一个字段的值的时候，则可以直接通过<code>store</code>从而减少对项目的改动，其二就是可以让前端项目更加规范、可扩展。</p><h2 id="使用filter来进行一些值的处理"><a href="#使用filter来进行一些值的处理" class="headerlink" title="使用filter来进行一些值的处理"></a>使用filter来进行一些值的处理</h2><p>为了大大提高前端的可扩展性，通过会对一些固定的值进行转换。例如性别，后端可能会返回 0 或者 1，若前端在某些页面上需要显示为<code>男|女</code>，而在某一些页面上需要显示<code>先生|女士</code>，此时通过<code>filter</code>来进行处理，则是一个不错的选择。</p><h3 id="新建一个文件夹和js文件"><a href="#新建一个文件夹和js文件" class="headerlink" title="新建一个文件夹和js文件"></a>新建一个文件夹和js文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---App.vue</span><br><span class="line">---main.js</span><br><span class="line">---store</span><br><span class="line">-----index.js</span><br><span class="line">---utils</span><br><span class="line">-----filter.js</span><br></pre></td></tr></table></figure><p>filter.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">enumConvert</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> store.state.enum[val];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>main.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> filters <span class="keyword">from</span> <span class="string">'./utils/filter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(filters).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  Vue.filter(key, filters[key]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在这里通过<code>Vue.filter</code>将filter方法进行全局注册，然后在<code>Vue</code>页面进行使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item, index) of score"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item | convert&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  computed: &#123;</span></span><br><span class="line"><span class="javascript">    ...mapState([<span class="string">'score'</span>])</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  filters: &#123;</span></span><br><span class="line"><span class="undefined">    convert (val) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> Vue.filter(<span class="string">'enumConvert'</span>)(val);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时页面上就会展示<code>及格</code>，<code>良好</code>，<code>优秀</code>了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Vue里面，经常会遇到一些字典值的转换，而这些字典值由于和后端进行了约定的，一般不会轻易的改变，所以在前后端开发的项目中，这种字典值最好的做法是前端独立的保存一份，自己在前端自行进行处理。&lt;/p&gt;
&lt;p&gt;我们的做法是使用&lt;code&gt;Vuex&lt;/code&gt;的&lt;code&gt;st
      
    
    </summary>
    
      <category term="Vue" scheme="https://somersames.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://somersames.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue中nextTick的使用</title>
    <link href="https://somersames.github.io/2019/05/20/Vue%E4%B8%ADnextTick%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://somersames.github.io/2019/05/20/Vue中nextTick的使用/</id>
    <published>2019-05-20T15:39:42.000Z</published>
    <updated>2019-06-09T02:58:38.532Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间一直在负责一个前后端项目，前端是<code>Vue</code>+<code>ElemeUI</code>，由于自己之前只是会简单的使用 Vue 的一些初级命令，自然只能慢慢的踩坑，然后再出坑….。例如<code>数组无法触发Vue的视图更新</code></p><p>刚开始在使用 Vue 的时候，一直都是在 <code>created</code> 方法里面获取后端数据进行渲染，这样用起来倒也没什么问题，只不过今天突然看到了 Vue 的<code>nextTick</code> 方法，感觉比之前在<code>created</code>里面请求后端更加高级。所以顺便研究了一波。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p><code>nextTick</code>常用于数据更新后，但是dom元素还未完成刷新，如何理解呢? 在 Vue 里面，更新 DOM 元素是异步的，也就是说当我们修改了数据之后，DOM元素并不会立即被刷新。参考<a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97" target="_blank" rel="noopener">深入响应式原理</a></p><p>如下Demo<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">'id'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"nextClick"</span>&gt;</span>点击测试<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      id: <span class="string">'q'</span></span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted () &#123;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    nextClick () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.id = <span class="string">'m'</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> obj = <span class="built_in">document</span>.getElementById(<span class="keyword">this</span>.id);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> one = <span class="built_in">document</span>.getElementById(_this.id);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(one);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(obj);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时你在控制台会看到<code>obj</code>获取的是null，<code>one</code>获取的dom节点才是正确的。</p><p><a href="https://stackoverflow.com/questions/47634258/what-is-nexttick-or-what-does-it-do-in-vuejs" target="_blank" rel="noopener">StackOverFlow关于这个的另一个解释</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这段时间一直在负责一个前后端项目，前端是&lt;code&gt;Vue&lt;/code&gt;+&lt;code&gt;ElemeUI&lt;/code&gt;，由于自己之前只是会简单的使用 Vue 的一些初级命令，自然只能慢慢的踩坑，然后再出坑….。例如&lt;code&gt;数组无法触发Vue的视图更新&lt;/code&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="Vue" scheme="https://somersames.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://somersames.github.io/tags/Vue/"/>
    
  </entry>
  
</feed>
