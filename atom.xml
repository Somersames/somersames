<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Somersames</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://somersames.github.io/"/>
  <updated>2019-08-04T08:49:05.600Z</updated>
  <id>https://somersames.github.io/</id>
  
  <author>
    <name>Somersames</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mysql数据库出现死锁的情况(一)</title>
    <link href="https://somersames.github.io/2019/08/04/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%87%BA%E7%8E%B0%E6%AD%BB%E9%94%81%E7%9A%84%E6%83%85%E5%86%B5-%E4%B8%80/"/>
    <id>https://somersames.github.io/2019/08/04/Mysql数据库出现死锁的情况-一/</id>
    <published>2019-08-04T08:32:31.000Z</published>
    <updated>2019-08-04T08:49:05.600Z</updated>
    
    <content type="html"><![CDATA[<p>在临近上线之前，我们系统做了一次压力测试，发现有一个接口在高并发情况下会出现一个死锁的情况。。首先申明…不是我写的，我只是帮忙排查下。</p><p>随着对Mysql锁的深入了解，于是就准备写几篇文章来记录下Mysql各种事物和索引的情况下出现死锁的情况。</p><p>今天就介绍下在并发插入的情况下，哪几种情况会出现死锁：</p><h2 id="INNODB下的各种锁"><a href="#INNODB下的各种锁" class="headerlink" title="INNODB下的各种锁"></a>INNODB下的各种锁</h2><p>在介绍锁的时候只会介绍跟本节相关的锁，而且只会讲述大概是什么，至于锁的更加详细的讲解可能会到以后再详细介绍。</p><h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>行锁分为写锁和读取锁，</p><blockquote><p>读锁（S锁）也可以称之为 <code>共享锁</code> ， 它表示的是任何一个事物都可以读取该行数据(可以被多个事物获取到)。</p></blockquote><blockquote><p>写锁（X锁）也可以称之为排它锁，它表示的是该行数据不允许任何人进行修改，同时也不允许任何事物获取该行事物的S锁，但是普通的 <code>select</code> 语句是可以的。</p></blockquote><h2 id="背景信息一"><a href="#背景信息一" class="headerlink" title="背景信息一"></a>背景信息一</h2><h3 id="注意：以下测试都是基于该事物隔离级别和数据库版本"><a href="#注意：以下测试都是基于该事物隔离级别和数据库版本" class="headerlink" title="注意：以下测试都是基于该事物隔离级别和数据库版本"></a>注意：以下测试都是基于该事物隔离级别和数据库版本</h3><p>数据库版本：8.0.11</p><p>事务隔离级别：REPEATABLE-READ</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE 'transaction_isolation';</span><br><span class="line">+<span class="comment">-----------------------+-----------------+</span></span><br><span class="line">| Variable_name         | Value           |</span><br><span class="line">+<span class="comment">-----------------------+-----------------+</span></span><br><span class="line">| transaction_isolation | REPEATABLE-READ |</span><br><span class="line">+<span class="comment">-----------------------+-----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="SQL准备"><a href="#SQL准备" class="headerlink" title="SQL准备:"></a>SQL准备:</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> test_lock  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_0900_ai_ci;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_lock.<span class="string">`test`</span> (</span><br><span class="line">    <span class="string">`user_id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`user_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`user_password`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`is_deleted`</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`user_id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`t1_god`</span> (<span class="string">`user_name`</span>,<span class="string">`user_password`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure><p>准备数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'a'</span>,<span class="string">'zhangsan'</span>,<span class="string">'123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'b'</span>,<span class="string">'lisi'</span>,<span class="string">'lisi123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'c'</span>,<span class="string">'wangwu'</span>,<span class="string">'wangwu123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'d'</span>,<span class="string">'caocao'</span>,<span class="string">'caocao123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'e'</span>,<span class="string">'liubei'</span>,<span class="string">'liubei123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'f'</span>,<span class="string">'zhangfei'</span>,<span class="string">'zhangfei123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'g'</span>,<span class="string">'guanyu'</span>,<span class="string">'guanyu123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'h'</span>,<span class="string">'xiaoqiao'</span>,<span class="string">'xiaoqiao123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br></pre></td></tr></table></figure><h3 id="情况一："><a href="#情况一：" class="headerlink" title="情况一："></a>情况一：</h3><blockquote><p> 三个事物都执行同一个Insert语句，第一个事物然后回滚</p></blockquote><p>此时第三个事物会提示死锁，第二个事物正常插入。</p><h4 id="复现步骤："><a href="#复现步骤：" class="headerlink" title="复现步骤："></a>复现步骤：</h4><p>开启三个事物，每一个事物分别执行如下SQL，然后再将第一个事物进行回滚或者提交，然后你就会发现第三个事物发生了死锁。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## DeadLock</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'i'</span>,<span class="string">'daqiao'</span>,<span class="string">'daqiao123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br></pre></td></tr></table></figure><p>Mysql提示如下：</p><blockquote><p>[2019-08-04 14:33:48] Connected<br>sql&gt; start transaction<br>[2019-08-04 14:33:49] completed in 4 ms<br>sql&gt; begin<br>[2019-08-04 14:33:49] completed in 6 ms<br>sql&gt; insert into test_lock.<code>test</code> values(‘i’,’daqiao’,’daqiao123456’,0,’15112345678’)<br>[2019-08-04 14:34:00] [40001][1213] Deadlock found when trying to get lock; try restarting transaction<br>[2019-08-04 14:34:00] [40001][1213] Deadlock found when trying to get lock; try restarting transaction</p></blockquote><p>那么打印出Mysql出现死锁的日志：重点日志如下</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">LATEST DETECTED DEADLOCK</span><br><span class="line">------------------------</span><br><span class="line"><span class="number">2019</span>-<span class="number">08</span>-<span class="number">04</span> <span class="number">06</span>:<span class="number">33</span>:<span class="number">59</span> <span class="number">0</span>x7f1818599700</span><br><span class="line">*** (<span class="number">1</span>) TRANSACTION:</span><br><span class="line">TRANSACTION <span class="number">231690</span>, ACTIVE <span class="number">34</span> sec inserting</span><br><span class="line">mysql tables in <span class="keyword">use</span> <span class="number">1</span>, locked <span class="number">1</span></span><br><span class="line">LOCK WAIT <span class="number">4</span> lock <span class="keyword">struct</span>(s), heap size <span class="number">1136</span>, <span class="number">2</span> row lock(s)</span><br><span class="line">MySQL thread id <span class="number">9</span>, OS thread handle <span class="number">139741464762112</span>, query id <span class="number">95</span> <span class="number">172</span><span class="variable">.17</span><span class="variable">.0</span><span class="variable">.1</span> root update</span><br><span class="line"><span class="comment">/* ApplicationName=IntelliJ IDEA 2019.1.3 */</span> insert into test_lock.<span class="meta">`test` values('i','daqiao','daqiao123456',0,'15112345678')</span></span><br><span class="line">*** (<span class="number">1</span>) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id <span class="number">7</span> page no <span class="number">4</span> n bits <span class="number">80</span> index PRIMARY of <span class="keyword">table</span> <span class="meta">`test_lock`.`test` trx id 231690 lock_mode X insert intention waiting</span></span><br><span class="line">Record lock, heap no <span class="number">1</span> PHYSICAL RECORD: n_fields <span class="number">1</span>; compact format; info bits <span class="number">0</span></span><br><span class="line"> <span class="number">0</span>: len <span class="number">8</span>; hex <span class="number">73757072656</span>d756d; asc supremum;;</span><br><span class="line"></span><br><span class="line">*** (<span class="number">2</span>) TRANSACTION:</span><br><span class="line">TRANSACTION <span class="number">231691</span>, ACTIVE <span class="number">10</span> sec inserting</span><br><span class="line">mysql tables in <span class="keyword">use</span> <span class="number">1</span>, locked <span class="number">1</span></span><br><span class="line"><span class="number">4</span> lock <span class="keyword">struct</span>(s), heap size <span class="number">1136</span>, <span class="number">2</span> row lock(s)</span><br><span class="line">MySQL thread id <span class="number">10</span>, OS thread handle <span class="number">139741464467200</span>, query id <span class="number">139</span> <span class="number">172</span><span class="variable">.17</span><span class="variable">.0</span><span class="variable">.1</span> root update</span><br><span class="line"><span class="comment">/* ApplicationName=IntelliJ IDEA 2019.1.3 */</span> insert into test_lock.<span class="meta">`test` values('i','daqiao','daqiao123456',0,'15112345678')</span></span><br><span class="line">*** (<span class="number">2</span>) HOLDS THE LOCK(S):</span><br><span class="line">RECORD LOCKS space id <span class="number">7</span> page no <span class="number">4</span> n bits <span class="number">80</span> index PRIMARY of <span class="keyword">table</span> <span class="meta">`test_lock`.`test` trx id 231691 lock mode S</span></span><br><span class="line">Record lock, heap no <span class="number">1</span> PHYSICAL RECORD: n_fields <span class="number">1</span>; compact format; info bits <span class="number">0</span></span><br><span class="line"> <span class="number">0</span>: len <span class="number">8</span>; hex <span class="number">73757072656</span>d756d; asc supremum;;</span><br><span class="line"></span><br><span class="line">*** (<span class="number">2</span>) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id <span class="number">7</span> page no <span class="number">4</span> n bits <span class="number">80</span> index PRIMARY of <span class="keyword">table</span> <span class="meta">`test_lock`.`test` trx id 231691 lock_mode X insert intention waiting</span></span><br><span class="line">Record lock, heap no <span class="number">1</span> PHYSICAL RECORD: n_fields <span class="number">1</span>; compact format; info bits <span class="number">0</span></span><br><span class="line"> <span class="number">0</span>: len <span class="number">8</span>; hex <span class="number">73757072656</span>d756d; asc supremum;;</span><br><span class="line"></span><br><span class="line">*** WE ROLL BACK TRANSACTION (<span class="number">2</span>)</span><br><span class="line">------------</span><br></pre></td></tr></table></figure><p>从以上日志我们可以看到，事物一正在请求该行记录的 <code>X锁</code> ，事物二持有该行的<code>S锁</code>，但是也在等待获取该行的<code>X锁</code>。</p><p>关于Mysql的 <code>insert</code> 逻辑，可以大致理解为如果一个事物正在对一个记录进行 <code>insert</code>，此时 InnoDB 并不会主动的将其加一个锁，而是在主键索引上加一个 <code>trx_id</code>，</p><p>当第二个事物检测到该行记录正在被一个活跃的事物持有的时候，此时第二个事物会帮第一个事物的隐式锁住转为显式锁。如下例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## DeadLock</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'i'</span>,<span class="string">'daqiao'</span>,<span class="string">'daqiao123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br></pre></td></tr></table></figure><p>此时查看Mysql中锁的情况：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/insert%E6%AD%BB%E9%94%81%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%BA%8B%E7%89%A9.png" alt=""></p><p>可以看到此时Mysql仅仅是在表上加入了一个插入意向锁（IX锁），持有该锁表示该事物在接下来有可能会对自己设计到的行加入排它锁（X锁）</p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html" target="_blank" rel="noopener">Mysql关于意向锁的介绍</a></p><blockquote><p>The intention locking protocol is as follows:</p><ul><li>Before a transaction can acquire a shared lock on a row in a table, it must first acquire an <code>IS</code> lock or stronger on the table.</li><li>Before a transaction can acquire an exclusive lock on a row in a table, it must first acquire an <code>IX</code> lock on the table.</li></ul></blockquote><p>大意就是如果你想获得一个行的 <code>X锁</code>，那么你就必须先获取表的 <code>IX锁</code></p><p>那么此时再进行第二个事物的插入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## DeadLock</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'i'</span>,<span class="string">'daqiao'</span>,<span class="string">'daqiao123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br></pre></td></tr></table></figure><p>再次查看数据库中的锁：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/Mysql%E7%AC%AC%E4%BA%8C%E4%B8%AA%E4%BA%8B%E7%89%A9.png" alt=""></p><p>此时会发现第一个事物已经获取到了行级别的<code>X锁</code>，第二个事物获取到了 <code>IX</code> 锁以及 <code>S锁</code> 。</p><p>那么此时第三个事物开启之后数据库中的锁又会是什么样子的呢？</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/Mysql%E7%AC%AC%E4%B8%89%E4%B8%AA%E4%BA%8B%E7%89%A9.png" alt=""></p><p>可以发现另外两个事物都在等待获取该行的<code>S锁</code>。然后此时第一个事物进行回滚，此时第三个事物就会提示死锁。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><h4 id="前提结论"><a href="#前提结论" class="headerlink" title="前提结论"></a>前提结论</h4><ol><li><code>S锁</code>是可以升级到<code>X锁</code>的</li><li>一个<code>S锁</code>需要升级到<code>X</code>锁必须保证只有当前事物持有<code>S锁</code></li></ol><h4 id="死锁原因"><a href="#死锁原因" class="headerlink" title="死锁原因"></a>死锁原因</h4><p>当第一个事物回滚之后，第二个事物和第三个事物都会获得到该行的<code>S锁</code>，但是此时第二个事物将要执行 insert 语句，也就是第二个事物正在等待获取该行的<code>X锁</code>，但是此时第三个事物也正在准备 insert，它也在准备获取 <code>X锁</code>，目前这两个事物都持有该行的 <code>S锁</code> ，而如果需要获取 <code>X锁</code>，则是需要对方释放<code>S</code>锁。如下图：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/TwoTrxLock.png" alt=""></p><h3 id="简单复现步骤："><a href="#简单复现步骤：" class="headerlink" title="简单复现步骤："></a>简单复现步骤：</h3><p>为了验证上面的情况，我准备如下几个SQL：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">## 事物一</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test_lock.test <span class="keyword">where</span> user_id=<span class="string">'h'</span>  <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 事物二</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test_lock.test <span class="keyword">where</span> user_id=<span class="string">'h'</span>  <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>;</span><br><span class="line"></span><br><span class="line">## 事物一再执行</span><br><span class="line"><span class="keyword">update</span> test_lock.<span class="string">`test`</span> <span class="keyword">set</span> user_name=<span class="string">'abc'</span>  <span class="keyword">where</span>  user_id = <span class="string">'h'</span>;</span><br><span class="line"></span><br><span class="line">## 事物二再执行</span><br><span class="line"><span class="keyword">update</span> test_lock.<span class="string">`test`</span> <span class="keyword">set</span> user_name=<span class="string">'abc'</span>  <span class="keyword">where</span>  user_id = <span class="string">'h'</span>;</span><br><span class="line"></span><br><span class="line">## 此时事物二就会提示死锁</span><br></pre></td></tr></table></figure><p>这是因为事物一和事物二都在等待对方释放<code>S锁</code>，但是都不肯释放，于是死锁发生了。</p><h3 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h3><blockquote><p> 三个事物都执行同一个Insert语句，第一个事物然后提交</p></blockquote><p>此时第二个事物和第三个事物都会提示主键冲突，并无死锁出现。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这种情况下的死锁是由于 <code>S锁</code> 升级到 <code>X锁</code>导致的一种死锁，在平常的业务代码中应该尽量避免并发插入一个主键。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在临近上线之前，我们系统做了一次压力测试，发现有一个接口在高并发情况下会出现一个死锁的情况。。首先申明…不是我写的，我只是帮忙排查下。&lt;/p&gt;
&lt;p&gt;随着对Mysql锁的深入了解，于是就准备写几篇文章来记录下Mysql各种事物和索引的情况下出现死锁的情况。&lt;/p&gt;
&lt;p&gt;今
      
    
    </summary>
    
      <category term="Mysql" scheme="https://somersames.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://somersames.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Vue里面相同页面不同URL的刷新解决方案</title>
    <link href="https://somersames.github.io/2019/07/24/Vue%E9%87%8C%E9%9D%A2%E7%9B%B8%E5%90%8C%E9%A1%B5%E9%9D%A2%E4%B8%8D%E5%90%8CURL%E7%9A%84%E5%88%B7%E6%96%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://somersames.github.io/2019/07/24/Vue里面相同页面不同URL的刷新解决方案/</id>
    <published>2019-07-23T16:09:58.000Z</published>
    <updated>2019-08-02T15:37:07.145Z</updated>
    
    <content type="html"><![CDATA[<p>随着项目的收尾，使用<code>Vue</code>也有大概两个月时间了，在这期间也才遇到过了不少的问题，今天就来说下 <code>Vue</code> 中URL不同但是页面相同的解决办法。</p><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>假设有两个URL，都对应的是一个相同的 Vue 页面，URL分别是 <code>view/account/1</code> 和 <code>edit/account/1</code>，此时如果由 <code>view/account/1</code> 跳转至 <code>edit/account/1</code>，你会发现页面是不会刷新的， 从而直接影响了整体的功能。</p><p>于是去网上寻找解决方案，在一个 github 的 issue 里面，看到也有人反映过这个问题，不过作者的回复是采用</p><p><code>reload</code> 方式进行强制刷新，也就是类似于 F5 那样，页面首先会白一下，然后就再出现元素。这样虽然可以实现页面上元素的一些加载，但是同时它的弊端也体现出来了，就是对用户极度的不友好，所以最后我们才用了一种Reload的方式来进行刷新的。</p><p>首先是在<code>App.vue</code>里面添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;router-view v-<span class="keyword">if</span>=<span class="string">'isAlive'</span>/&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">  provide () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      reload: <span class="keyword">this</span>.reload</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isAlive: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reload () &#123;</span><br><span class="line">      <span class="keyword">this</span>.isAlive = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isAlive = <span class="literal">true</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>然后再需要刷新的 Vue 页面直接通过 <code>inject</code> 来进行使用即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> &lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;el-form :model=<span class="string">"account"</span>&gt;</span><br><span class="line">        &lt;el-form-item label=<span class="string">"姓名"</span> prop=<span class="string">"name"</span> &gt;</span><br><span class="line">          &lt;el-input v-model=<span class="string">"account.name"</span> placeholder=<span class="string">"请输入"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">          &lt;el-form-item label="年龄" prop="age" &gt;</span><br><span class="line">          &lt;el-input v-model="account.age" placeholder="请输入"&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">          &lt;el-form-item label="性别" prop="gender" &gt;</span><br><span class="line">          &lt;el-input v-model="account.gender" placeholder="请输入"&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  inject: ['reload'],</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      account: &#123;</span><br><span class="line">        name: null,</span><br><span class="line">        age: null,</span><br><span class="line">        gender: null</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    '$route' (to, from) &#123;</span><br><span class="line">      this.reload();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>最后便可以实现页面状态的重新加载。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着项目的收尾，使用&lt;code&gt;Vue&lt;/code&gt;也有大概两个月时间了，在这期间也才遇到过了不少的问题，今天就来说下 &lt;code&gt;Vue&lt;/code&gt; 中URL不同但是页面相同的解决办法。&lt;/p&gt;
&lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Vue" scheme="https://somersames.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://somersames.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>为什么Spring官方推荐通过构造器注入</title>
    <link href="https://somersames.github.io/2019/07/22/%E4%B8%BA%E4%BB%80%E4%B9%88Spring%E5%AE%98%E6%96%B9%E6%8E%A8%E8%8D%90%E9%80%9A%E8%BF%87%E6%9E%84%E9%80%A0%E5%99%A8%E6%B3%A8%E5%85%A5/"/>
    <id>https://somersames.github.io/2019/07/22/为什么Spring官方推荐通过构造器注入/</id>
    <published>2019-07-21T16:16:15.000Z</published>
    <updated>2019-07-21T16:21:56.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>我们在使用Spring的时候，最方便的就是它的IOC（控制反转），也就是所有的Bean都交由</p><p>Spring进行管理，那么我们在看网上的文章或者自己在写代码的时候经常会像这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   TestDao TestDao;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> TestDao TestDao;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">TestService</span><span class="params">(TestDao TestDao)</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.TestDao = TestDao;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是貌似许多人都会使用第一种方式，因为这样简单方便，如果是采用第二种的话，每一次新增加一个bean，都需要在构造器的入参上面加一个参数，就会显得有点麻烦。</p><p>但是如果采用第一个写法，就会在IDEA里面出现一个提示：</p><blockquote><p> spring官方建议通过构造器的方式进行注入</p></blockquote><p>这又是为什么呢？</p><p><a href="https://spring.io/blog/2007/07/11/setter-injection-versus-constructor-injection-and-the-use-of-required/" target="_blank" rel="noopener">Spring官方对于Setter注入和构造器注入的看法</a></p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>在springboot里面，最常用的注入方式有两种：一种是构造器注入，一种是field注入</p><p>在上一部分的代码里面，第一个是 Field 注入，第二个是构造器注入，既然这两种方式Spring都支持，那么到底这两种有什么区别呢？</p><h3 id="Field注入"><a href="#Field注入" class="headerlink" title="Field注入"></a>Field注入</h3><p>这边新建两个测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    A a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a.sayA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时你启动Spring的话，就会出现一个空指针的异常，如果需要避免的话，则必须是类 <code>A</code> 先进行初始化，然后再初始化 <code>B</code> 。（当然Spring官方也提供了很多方式来控制 Bean 的初始化顺序，但是和本篇文章无关）</p><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> A a;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">(A a)</span></span>&#123;</span><br><span class="line">        a.sayA();</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时Spring的项目就会正常的启动，那么为什么同样的代码，一个通过构造器注入，一个通过Field注入，两者的结果相差这么大呢？</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>官方之所以现在推荐使用构造器注入，是因为通过构造器注入是可以防止 <code>空指针异常</code>，同时可以确保的是被引用的 <code>Bean</code> ，它的引用是不可以变的，所以这可能是Spring官方团队的一些权衡点吧<br>当然早期的时候，Spring曾推荐过使用Setter注入，不够现在可能Spring可能觉得构造器注入比较好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;我们在使用Spring的时候，最方便的就是它的IOC（控制反转），也就是所有的Bean都交由&lt;/p&gt;
&lt;p&gt;Spring进行管理，那么我们在看网上的
      
    
    </summary>
    
      <category term="Spring" scheme="https://somersames.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://somersames.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>2019年07月第一周总结</title>
    <link href="https://somersames.github.io/2019/07/07/2019%E5%B9%B407%E6%9C%88%E7%AC%AC%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://somersames.github.io/2019/07/07/2019年07月第一周总结/</id>
    <published>2019-07-07T13:57:49.000Z</published>
    <updated>2019-07-07T14:15:37.690Z</updated>
    
    <content type="html"><![CDATA[<p>这一周主要学习如下：</p><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>在使用ElementUI的时候有一个<code>el-select</code>标签，我们有一个需求就是需要在下拉列表的时候还需要过滤出特定的选项，但是<code>ElementUI</code>官方默认的过滤却只能支持 label 的筛选，所以这个时候就需要重新<code>filter-method</code>方法来过滤出所需要的选项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">v-model</span>=<span class="string">"selectData"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">"selectData.value"</span> <span class="attr">placeholder</span>=<span class="string">"请选择"</span> <span class="attr">filterable</span> <span class="attr">:filter-method</span>=<span class="string">"search"</span> <span class="attr">prop</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"item in options"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"item.value"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label</span>=<span class="string">"item.label"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:value</span>=<span class="string">"item.value"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"float: left"</span>&gt;</span>&#123;&#123; item.label &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"float: right; font-size: 15px"</span>&gt;</span>&#123;&#123; item.value &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="undefined">    return &#123;</span></span><br><span class="line"><span class="undefined">      options: [&#123;</span></span><br><span class="line"><span class="undefined">        value: '选项1',</span></span><br><span class="line"><span class="undefined">        label: '黄金糕'</span></span><br><span class="line"><span class="undefined">      &#125;, &#123;</span></span><br><span class="line"><span class="undefined">        value: '选项2',</span></span><br><span class="line"><span class="undefined">        label: '双皮奶'</span></span><br><span class="line"><span class="undefined">      &#125;, &#123;</span></span><br><span class="line"><span class="undefined">        value: '选项3',</span></span><br><span class="line"><span class="undefined">        label: '蚵仔煎'</span></span><br><span class="line"><span class="undefined">      &#125;, &#123;</span></span><br><span class="line"><span class="undefined">        value: '选项4',</span></span><br><span class="line"><span class="undefined">        label: '龙须面'</span></span><br><span class="line"><span class="undefined">      &#125;, &#123;</span></span><br><span class="line"><span class="undefined">        value: '选项5',</span></span><br><span class="line"><span class="undefined">        label: '北京烤鸭'</span></span><br><span class="line"><span class="undefined">      &#125;],</span></span><br><span class="line"><span class="undefined">      selectData: &#123;</span></span><br><span class="line"><span class="undefined">        value: ''</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    search (val) &#123;</span></span><br><span class="line"><span class="undefined">      let copyObj2 = JSON.parse(JSON.stringify(this.options));</span></span><br><span class="line"><span class="undefined">      if (val != null &amp;&amp; val !== '') &#123;</span></span><br><span class="line"><span class="undefined">        this.options = copyObj2.filter((item) =&gt; &#123;</span></span><br><span class="line"><span class="undefined">          if (item.value.indexOf(val) &gt; -1) &#123;</span></span><br><span class="line"><span class="undefined">            debugger;</span></span><br><span class="line"><span class="undefined">            return true;</span></span><br><span class="line"><span class="undefined">          &#125; else &#123;</span></span><br><span class="line"><span class="undefined">            return false;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125; else &#123;</span></span><br><span class="line"><span class="undefined">        this.options = copyObj2;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是后来又说要把选择的值给另一个字段…于是我就在search方法下面加了一行<code>this.otherField = val</code>。。后来前端把那一行给去除了。。。然后修改为如下代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">"selectData.value"</span> <span class="attr">placeholder</span>=<span class="string">"请选择"</span> <span class="attr">filterable</span> <span class="attr">:filter-method</span>=<span class="string">"(val)=&gt;search(val,()=&gt;&#123;this.otherField=val&#125;)"</span> <span class="attr">prop</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"> search (val, callback) &#123;</span><br><span class="line">      callback();</span><br><span class="line">  // 一样的代码</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>后来就没管了，不过现在觉得这样写的话有好处也有坏处。好处就是对于如果只有很少的字段变动的话，这样改无疑的好的，因为可以避免在方法里面写太多的字段，但是一旦重复的多起来，我觉得在方法里面写起来比较好。</p><h2 id="ElasticSearch的乐观锁机制（同步的坑）"><a href="#ElasticSearch的乐观锁机制（同步的坑）" class="headerlink" title="ElasticSearch的乐观锁机制（同步的坑）"></a>ElasticSearch的乐观锁机制（同步的坑）</h2><p>上周由于在做补偿机制的时候，需要对Es一些数据进行频繁的更新，但是在测试的时候 ES 经常会返回<code>version conflict</code> ，后来搜索了一下，发现 ES 对于每一个数据都有一个<code>_version</code>字段</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-07-07%20%E4%B8%8B%E5%8D%888.57.25.png" alt=""></p><p>而我们对一个数据如果频繁更新的话，就会导致ES的乐观锁生效，从而更新失败。如下：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-07-07%20%E4%B8%8B%E5%8D%889.13.03.png" alt=""></p><p>由于我使用的ES版本是ES6.7.1，这时候只能通过<code>if_seq_no</code>来解决了，因为当我尝试使用外部版本号控制的时候，突然发现。。。ES官方竟然不推荐了</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-07-07%20%E4%B8%8B%E5%8D%889.27.26.png" alt=""></p><p>这部分后续写文章继续分析了。。。</p><h2 id="ES的升级以及基础排序方法"><a href="#ES的升级以及基础排序方法" class="headerlink" title="ES的升级以及基础排序方法"></a>ES的升级以及基础排序方法</h2><p>由于需要列表的数据进行综合查询然后排序，这个时候就只能手写排序方法了，好在ES的官方文档倒也详细，所以参照官方的文档，自己摸索了两个小时倒也写出来了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String script = <span class="string">"你的排序脚本"</span>;</span><br><span class="line">Script inline = <span class="keyword">new</span> Script(script);</span><br><span class="line">SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"你的索引"</span>);</span><br><span class="line">SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">sourceBuilder.sort(<span class="keyword">new</span> ScriptSortBuilder(inline,ScriptSortBuilder.ScriptSortType.NUMBER).order(SortOrder.DESC));</span><br></pre></td></tr></table></figure><h2 id="Rabbitmq"><a href="#Rabbitmq" class="headerlink" title="Rabbitmq"></a>Rabbitmq</h2><p>由于Mq环境需要统一下，所以这段时间也把自己负责的Mq又<code>fanout</code>改为<code>direct</code>了。改动起来到也没啥难度，就是在<code>convertAndSend</code>方法里面多加了一个<code>routeKey</code>参数而已</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>这周主要是在 Leetcode 上写了点<code>Array</code>的一些算法题，因为都是简单的题目，暂时还未遇到一些比较经典的题目</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>周三才想起来试试记录下，下周估计会详细点</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这一周主要学习如下：&lt;/p&gt;
&lt;h2 id=&quot;Vue&quot;&gt;&lt;a href=&quot;#Vue&quot; class=&quot;headerlink&quot; title=&quot;Vue&quot;&gt;&lt;/a&gt;Vue&lt;/h2&gt;&lt;p&gt;在使用ElementUI的时候有一个&lt;code&gt;el-select&lt;/code&gt;标签，我们有一个
      
    
    </summary>
    
      <category term="周记" scheme="https://somersames.github.io/categories/%E5%91%A8%E8%AE%B0/"/>
    
    
      <category term="周记" scheme="https://somersames.github.io/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Es6.X升级到Es7.x的变化</title>
    <link href="https://somersames.github.io/2019/07/07/Es6-X%E5%8D%87%E7%BA%A7%E5%88%B0Es7-x%E7%9A%84%E5%8F%98%E5%8C%96/"/>
    <id>https://somersames.github.io/2019/07/07/Es6-X升级到Es7-x的变化/</id>
    <published>2019-07-06T16:35:24.000Z</published>
    <updated>2019-07-06T16:39:52.081Z</updated>
    
    <content type="html"><![CDATA[<p>ElasticSearch6.升级至ElasticSearch7.x的一些变化</p><p>由于最近需要将<code>Es6.x</code>升级至<code>Es7</code>，所以正好记录下在升级过程中遇到的一些问题，以便以后翻阅。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="Es7-x系列中取消了Type"><a href="#Es7-x系列中取消了Type" class="headerlink" title="Es7.x系列中取消了Type"></a>Es7.x系列中取消了Type</h3><p>在<code>Es6</code>系列之前，创建一个索引是需要<code>index,type</code>这两个缺一不可的，例如如下请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> PUT localhost:9200/es_6     </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"mappings"</span>:&#123;</span><br><span class="line">        <span class="attr">"index_type"</span>:&#123;</span><br><span class="line">            <span class="attr">"properties"</span>:&#123;</span><br><span class="line">                <span class="attr">"message"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"acknowledged"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"shards_acknowledged"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"es_6"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在 <code>ES7</code> 版本中，如果再使用这个 Json 串的话是会跑出一个异常的，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"error"</span>: &#123;</span><br><span class="line">        <span class="attr">"root_cause"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"mapper_parsing_exception"</span>,</span><br><span class="line">                <span class="attr">"reason"</span>: <span class="string">"Root mapping definition has unsupported parameters:  [index_type : &#123;properties=&#123;message=&#123;type=text&#125;&#125;&#125;]"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"mapper_parsing_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"Failed to parse mapping [_doc]: Root mapping definition has unsupported parameters:  [index_type : &#123;properties=&#123;message=&#123;type=text&#125;&#125;&#125;]"</span>,</span><br><span class="line">        <span class="attr">"caused_by"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"mapper_parsing_exception"</span>,</span><br><span class="line">            <span class="attr">"reason"</span>: <span class="string">"Root mapping definition has unsupported parameters:  [index_type : &#123;properties=&#123;message=&#123;type=text&#125;&#125;&#125;]"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么此时在<code>ES7</code>版本中，建立 mapping 是不需要 Type 的，所以其索引修改为下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT localhost:9201/es_7</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"mappings"</span>:&#123;</span><br><span class="line">        <span class="attr">"properties"</span>:&#123;</span><br><span class="line">            <span class="attr">"message"</span>:&#123;</span><br><span class="line">                <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"acknowledged"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"shards_acknowledged"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"es_7"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES7-x中新建数据"><a href="#ES7-x中新建数据" class="headerlink" title="ES7.x中新建数据"></a>ES7.x中新建数据</h3><p>在 ES6 中由于有一个 Type 类型，因此在新建数据的时候都需要穿入一个Type，那么在 Es7 里面，由于 Type 被取消了，所以在 ES7 里面的新增就需要稍微修改下了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST localhost:9201/es_7/_create/1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"message"</span>:<span class="string">"a"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_index"</span>: <span class="string">"es_7"</span>,</span><br><span class="line">    <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">    <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"_seq_no"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实还有另一种写法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST localhost:9201/es_7/_doc/2?op_type=create</span><br></pre></td></tr></table></figure><p>剩下的一些改动可能就是新的业务上线需要对某些数据进行频繁的改动，而ES的乐观锁机制导致经常失败，这个问题得需要单独处理下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ElasticSearch6.升级至ElasticSearch7.x的一些变化&lt;/p&gt;
&lt;p&gt;由于最近需要将&lt;code&gt;Es6.x&lt;/code&gt;升级至&lt;code&gt;Es7&lt;/code&gt;，所以正好记录下在升级过程中遇到的一些问题，以便以后翻阅。&lt;/p&gt;
&lt;h2 id=&quot;区别&quot;&gt;
      
    
    </summary>
    
      <category term="ElasticSearch" scheme="https://somersames.github.io/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="https://somersames.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>vue里面冒号和非冒号区别</title>
    <link href="https://somersames.github.io/2019/06/27/vue%E9%87%8C%E9%9D%A2%E5%86%92%E5%8F%B7%E5%92%8C%E9%9D%9E%E5%86%92%E5%8F%B7%E5%8C%BA%E5%88%AB/"/>
    <id>https://somersames.github.io/2019/06/27/vue里面冒号和非冒号区别/</id>
    <published>2019-06-26T16:07:16.000Z</published>
    <updated>2019-07-06T16:32:15.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue里面冒号和非冒号的却别"><a href="#vue里面冒号和非冒号的却别" class="headerlink" title="vue里面冒号和非冒号的却别"></a>vue里面冒号和非冒号的却别</h2><p>今天在使用Vue的时候，突然发现了一个问题，就是在后端传过来的值因为是一个<code>boolean</code>类型的，但是前端又需要进行展示，由于我们使用的是<code>ElementUI</code>的话，于是参照官网上就是这样写的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select v-model=&quot;option_boolean&quot;&gt;</span><br><span class="line">        &lt;el-option label=&quot;1&quot; value=&quot;true&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">        &lt;el-option label=&quot;2&quot; value=&quot;false&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">&lt;/el-select&gt;</span><br></pre></td></tr></table></figure><p>但是此时页面上展示并非是 1 和 2 ，而是 true 和 false。如下：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-06-26%20%E4%B8%8B%E5%8D%8810.20.15.png" alt=""></p><p>按照正常的逻辑，此时这个下拉框里面的值应该是1，而不是true。如果此时修改为如下写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select v-model=&quot;option_boolean&quot;&gt;</span><br><span class="line">        &lt;el-option label=&quot;1&quot; :value=&quot;true&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">        &lt;el-option label=&quot;2&quot; :value=&quot;false&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br></pre></td></tr></table></figure><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-06-26%20%E4%B8%8B%E5%8D%8810.22.58.png" alt=""></p><p>此时的页面就会显示正常了。</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>在 Vue 里面，冒号<code>:</code>代表的是一个双向绑定，其值要么是一个变量，要么是一个函数，而此 Demo 里面，第一个例子中，value仅仅是作为一个属性，所以它只能是接受字符串类型等</p><p>但是在第二个例子里面，由于使用了 Vue 的一个双向绑定模式，所以此时便可以正确的识别出 boolean 类型的值了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue里面冒号和非冒号的却别&quot;&gt;&lt;a href=&quot;#vue里面冒号和非冒号的却别&quot; class=&quot;headerlink&quot; title=&quot;vue里面冒号和非冒号的却别&quot;&gt;&lt;/a&gt;vue里面冒号和非冒号的却别&lt;/h2&gt;&lt;p&gt;今天在使用Vue的时候，突然发现了一个问题，
      
    
    </summary>
    
      <category term="Vue" scheme="https://somersames.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://somersames.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>如何对多个IF进行优化呢?</title>
    <link href="https://somersames.github.io/2019/06/11/%E5%A6%82%E4%BD%95%E5%AF%B9%E5%A4%9A%E4%B8%AAIF%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96%E5%91%A2/"/>
    <id>https://somersames.github.io/2019/06/11/如何对多个IF进行优化呢/</id>
    <published>2019-06-10T16:18:24.000Z</published>
    <updated>2019-07-06T16:32:15.097Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中，不可避免的会使用到<code>IF</code>条件，如果仅仅是偶尔试使用以下，倒也无妨，但是如果在项目中大量的使用<code>IF</code>判断，那么会造成项目的杂乱无章。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在项目中，不可避免的会使用到&lt;code&gt;IF&lt;/code&gt;条件，如果仅仅是偶尔试使用以下，倒也无妨，但是如果在项目中大量的使用&lt;code&gt;IF&lt;/code&gt;判断，那么会造成项目的杂乱无章。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据库调优(一)</title>
    <link href="https://somersames.github.io/2019/06/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%B0%83%E4%BC%98-%E4%B8%80/"/>
    <id>https://somersames.github.io/2019/06/09/数据库调优-一/</id>
    <published>2019-06-09T15:42:31.000Z</published>
    <updated>2019-07-06T16:32:15.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>在上一篇文章中，我们有一个表，里面的内容如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from org_copy;</span><br><span class="line">+<span class="comment">--------+-----------------+---------------+----------+</span></span><br><span class="line">| org_id | org_name        | org_parent_id | org_copy |</span><br><span class="line">+<span class="comment">--------+-----------------+---------------+----------+</span></span><br><span class="line">|      1 | 一级部门        |             0 | 1        |</span><br><span class="line">|      2 | 一一级部门      |             0 | 2        |</span><br><span class="line">|      3 | 1.1级部门       |             1 | 3        |</span><br><span class="line">|      4 | 1.2级部门       |             1 | 4        |</span><br><span class="line">|      5 | 1.1.1部门       |             3 | 5        |</span><br><span class="line">|      6 | 1.1.2部门       |             3 | 6        |</span><br><span class="line">|      7 | 1.1.1.1部门     |             5 | 7        |</span><br><span class="line">|      8 | 1.3部门         |             1 | 8        |</span><br><span class="line">|      9 | 1.2.1部门       |             4 | 9        |</span><br><span class="line">+<span class="comment">--------+-----------------+---------------+----------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>这应该是一个很基本的一个mysql表，同时我们在上一篇文章中，也执行了如下SQL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org_copy WHERE org_name&gt;'一级部门' and  org_parent_id=1;</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table    | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | org_copy | NULL       | range | index_name    | index_name | 768     | NULL |    1 |    11.11 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>那么如果此时我们换一个SQL来进行查询呢?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org_copy WHERE org_name&gt;'1' and  org_parent_id=1;</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | org_copy | NULL       | ALL  | index_name    | NULL | NULL    | NULL |    9 |    11.11 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>此时是不是会一脸疑惑…为啥我的这个SQL，明明一样呀，但是为啥第一个就可以走索引呢???<br>因为在mysql里面，会判断<code>当前where条件查询的数据量</code>，由于索引是由一个<code>B+</code>树的形式存在，所以当通过<code>org_name</code>来进行比较筛选的时候，是可以很快的定位出大致需要查询的数据量。</p><p>而当数据量大于30%的时候，mysql就会采用一种全表扫描的方式来进行查询，这也就是为什么不建议在区分度低的字段上建立索引了，假设一个字段只有三个值或者两个值，那么极有可能mysql会直接通过全表扫描的方式进行查询。</p><h3 id="索引覆盖"><a href="#索引覆盖" class="headerlink" title="索引覆盖"></a>索引覆盖</h3><p>这个是mysql调优中经常忽略的一点，由于mysql在建立索引的时候会一次性将索引字段存入到索引树中，所以如果我们的<code>where</code>条件中所包含的字段均可以在索引中找到的话，那么mysql就会直接从索引中去取数据，而不会进行回表。例如如下SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain  SELECT org_parent_id FROM org_copy WHERE org_copy=1;</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | org_copy | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 4325 |    10.00 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>由于<code>org_copy</code>字段非索引，所以此时只能是通过回表的方式进行查询。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>由于mysql会在数据量大于<code>30%</code>的时候进行全表扫描，所以最好就是不要在区分度低的字段上建立索引，避免进行了全表扫描。</li><li>对于过滤字段的使用，应该是尽最大的努力让<code>SQL</code>采用索引覆盖，如果无法避免的话就尽量让最左原则生效。进而加快查询速度。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h2&gt;&lt;p&gt;在上一篇文章中，我们有一个表，里面的内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="Mysql" scheme="https://somersames.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://somersames.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>数据库最左原则以及理解</title>
    <link href="https://somersames.github.io/2019/06/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%80%E5%B7%A6%E5%8E%9F%E5%88%99%E4%BB%A5%E5%8F%8A%E7%90%86%E8%A7%A3/"/>
    <id>https://somersames.github.io/2019/06/04/数据库最左原则以及理解/</id>
    <published>2019-06-04T14:57:54.000Z</published>
    <updated>2019-07-06T16:32:15.098Z</updated>
    
    <content type="html"><![CDATA[<p>本次的实验是基于<code>Mysql8</code>版本。首先在数据库中有一个表，其结构如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table org;</span><br><span class="line">+<span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Table | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                   |</span><br><span class="line">+<span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| org   | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`org`</span> (</span><br><span class="line">  <span class="string">`org_id`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`org_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`org_parent_id`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`org_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`index_name`</span> (<span class="string">`org_name`</span>,<span class="string">`org_parent_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br><span class="line">+<span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到在这个表中，有一个主键<code>org_id</code>以及一个联合索引<code>index_name</code>。其他的并无特别之处。</p><h3 id="最左原则"><a href="#最左原则" class="headerlink" title="最左原则"></a>最左原则</h3><p>在Mysql里面，有一个最左原则，官网的介绍如下：</p><blockquote><p>The name index is an index over the last_name and first_name columns. The index can be used for lookups in queries that specify       values in a known range for combinations of last_name and first_name values. It can also be used for queries that specify just a      last_name value because that column is a leftmost prefix of the index (as described later in this section). Therefore, the name       index is used for lookups in the following queries。</p></blockquote><p>既然是最左原则，那么尝试着写一条SQL如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org WHERE org_name='1' and  org_parent_id=1;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key        | key_len | ref         | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | org   | NULL       | ref  | index_name    | index_name | 773     | const,const |    1 |   100.00 | Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到其<code>type</code>是 ref 类型的，于是去<code>mysql</code>官网寻找<code>ref</code>类型的索引是什么：</p><blockquote><p> All rows with matching index values are read from this table for each combination of rows from the previous tables. ref is used if    the join uses only a leftmost prefix of the key or if the key is not a PRIMARY KEY or UNIQUE index (in other words, if the join       cannot select a single row based on the key value). If the key that is used matches only a few rows, this is a good join type.</p></blockquote><p>啥意思呢，就是当使用的索引符合最左原则的时候，且索引即不是<code>主键</code>也不是<code>唯一索引</code>。那么它所使用的类型就是<code>ref</code>。</p><p>那如果将<code>org_name</code>和<code>org_parant_id</code>反着呢?<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org WHERE org_parent_id =1  and org_name='1';</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key        | key_len | ref         | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | org   | NULL       | ref  | index_name    | index_name | 773     | const,const |    1 |   100.00 | Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>说好的最左原则呢。。。索引的org_parent_id不是在右边的嘛。</p><p>其实在这种情况下，无论<code>org_parent_id</code>在左边还是在右边，对于查询结果来说，都是一样的。既然都是一样的，那么<code>Mysql</code>的优化器就直接把该条语句给优化掉了，所以你会发现无论是<code>org_name</code>在左还是在右边都是会使用到索引。</p><p>那再换一条SQL呢？<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org WHERE org_name&gt;'1' and  org_parent_id=1;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra                    |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | org   | NULL       | index | index_name    | index_name | 773     | NULL |    9 |    11.11 | Using where; Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>这就尴尬了…由于在<code>最左原则</code>里面，若前一个索引使用了<code>&gt;</code>、<code>&lt;</code>等比较符的时候，后面一个是不会进行索引查询的，这个跟<code>Mysql</code>的索引结构有关系(文章后面会介绍)，但是为啥这里又会走索引呢? 这个时候由于在<code>Extra</code>里面看到了<code>Using index</code>，猜测难道是发生了索引覆盖? 于是我又建立了一个表。<br>于是立即又新建了一张表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table org_copy;</span><br><span class="line">+----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Table    | Create Table                                                                                                                                                                                                                                                                                |</span><br><span class="line">+----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| org_copy | CREATE TABLE `org_copy` (</span><br><span class="line">  `org_id` int(5) NOT NULL,</span><br><span class="line">  `org_name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `org_parent_id` int(5) DEFAULT NULL,</span><br><span class="line">  `org_copy` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`org_id`),</span><br><span class="line">  KEY `index_name` (`org_name`,`org_parent_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 |</span><br><span class="line">+----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>这时，我再次执行刚才的<code>sql</code>。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org_copy WHERE org_name&gt;'一级部门' and  org_parent_id=1;</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table    | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | org_copy | NULL       | range | index_name    | index_name | 768     | NULL |    1 |    11.11 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>看起来的确是由于发生了<code>索引覆盖</code>，导致了虽然不符合<code>最左原则</code>，但是还是走了一个索引。</p><h3 id="索引覆盖"><a href="#索引覆盖" class="headerlink" title="索引覆盖"></a>索引覆盖</h3><p>什么是索引覆盖呢?<br>在<code>org</code>这个表里面，有三个字段，但是这三个字段分别是一个<code>主键索引</code>和一个<code>联合索引</code>，由于我查询的字段就包含在索引里面，那么<br>而恰好这个表的所有字段都在索引里面，这就导致了<code>mysql</code>可以直接从索引里面获取到所需要的数据，那么此时就不必要再去通过<code>磁盘IO</code>去查询额外的字段数据了。也就不需要进行</p><p>继续回到<code>最左原则</code>，由于<code>最左原则</code>要求在聚合索引里面，每一个列是要为一个等值连接。即，如果<code>org_name</code>使用了非等值连接，那么就会导致<code>org_parent_id</code>无法使用最左原则。例子如下：若<code>org_parent_id</code>使用非等值连接，为了避免<code>索引覆盖</code>对<code>SQL</code>的影响，所以此次的<code>SQL</code>在 copy表里面执行。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org_copy WHERE org_name='1' and  org_parent_id&gt;1;</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table    | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | org_copy | NULL       | range | index_name    | index_name | 773     | NULL |    1 |   100.00 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到确实是使用了<code>聚合索引</code>，同时最后一列的<code>Using index condition</code>也表明，这条查询语句会先通过索引来过滤出符合的数据，然后从过滤出来的数据里面在使用我们的<code>where</code>条件进行二次过滤，最终找出符合的数据。</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>在Mysql里面，索引是以<code>B+树</code>的形式实现的，而索引又分为一级索引(主键)和二级索引(该文章中的<code>index_name</code>)，其实在<code>InnoDB</code>里面，二级索引的叶子节点所存放的数据就是主键索引所对应的地址，这也称之为<code>回表</code>。<br>回到文章中来，在这篇文章中介绍的<code>index_name</code>索引里面，mysql是根据索引列的顺序，一个一个在索引里面进行查找过滤，如果该索引在某一列断开了，例如索引<code>A</code>的列是(A、B、C)，但是在<code>SQL</code>里面却是<code>where A =&#39;a&#39; and C=&#39;c&#39;</code>，此时就会只使用该索引<code>A</code>的<code>A</code>列，这个跟<code>B+</code>树的特点有关。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table index_test;</span><br><span class="line">+<span class="comment">------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Table      | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                                                |</span><br><span class="line">+<span class="comment">------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| index_test | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`index_test`</span> (</span><br><span class="line">  <span class="string">`a`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`b`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`c`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`d`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`f`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`a`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`index_name`</span> (<span class="string">`b`</span>,<span class="string">`c`</span>,<span class="string">`d`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br><span class="line">+<span class="comment">------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`index_test`</span> <span class="keyword">WHERE</span> b=<span class="string">'b'</span> <span class="keyword">and</span> d=<span class="string">'d'</span>;</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table      | partitions | type | possible_keys | key        | key_len | ref   | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | index_test | NULL       | ref  | index_name    | index_name | 768     | const |    1 |    50.00 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到<code>ref</code>就一个<code>const</code>，所以基本可以推测目前只用了<code>b</code>列，那么换成<code>WHERE b=&#39;b&#39; and c=&#39;c&#39;</code>呢?<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM `index_test` WHERE b='b' and c='c';</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table      | partitions | type | possible_keys | key        | key_len | ref         | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------------+------+----------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | index_test | NULL       | ref  | index_name    | index_name | 773     | const,const |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------------+------+----------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>所有对于使用<code>最左原则</code>来进行调优的话，首先应该注意的是索引列最好都是<code>等值连接</code>，并且中途最好不要有任何的断裂。这样才能发挥出联合索引的优势</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本次的实验是基于&lt;code&gt;Mysql8&lt;/code&gt;版本。首先在数据库中有一个表，其结构如下：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ElementUI使用rules遇到的一些问题</title>
    <link href="https://somersames.github.io/2019/05/30/ElementUi%E4%BD%BF%E7%94%A8rules%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>https://somersames.github.io/2019/05/30/ElementUi使用rules遇到的一些问题/</id>
    <published>2019-05-29T16:07:43.000Z</published>
    <updated>2019-06-09T02:58:38.531Z</updated>
    
    <content type="html"><![CDATA[<p>这些天一直在踩<code>Vue</code>的坑…今天遇到的一个问题是在一个父组件中，将某些数据通过<code>props</code>传递给子组件，同时在子组件里面也有相应的一些<code>rules</code>规则，但是在实际的开发中，却发现子组件的<code>rules</code>并未生效…反而一直提示对应的 message，后来才发现是跟 ElementUI 的<code>prop</code>有关。</p><p>首先看一段代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>该Demo是为了测试Vue中rule和prop的不同<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"vehicles"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"公共汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"bus.wheel"</span> <span class="attr">:rules</span>=<span class="string">"&#123;required: true,message: '请输入公共汽车车轮个数'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"vehicles.bus.wheel"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"公共汽车司机驾照"</span> <span class="attr">prop</span>=<span class="string">"bus.driver.license"</span> <span class="attr">:rules</span>=<span class="string">"&#123;validator: licenseCheck ,trigger:'blur'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"vehicles.bus.driver.license"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"公共汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"bus.driver.years"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"vehicles.bus.driver.years"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">car</span> <span class="attr">:car</span>=<span class="string">"vehicles.car"</span>&gt;</span><span class="tag">&lt;/<span class="name">car</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">import Car from './Car';</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    Car</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="undefined">    return &#123;</span></span><br><span class="line"><span class="undefined">      vehicles: &#123;</span></span><br><span class="line"><span class="undefined">        bus: &#123;</span></span><br><span class="line"><span class="undefined">          wheel: null,</span></span><br><span class="line"><span class="undefined">          driver: &#123;</span></span><br><span class="line"><span class="undefined">            license: null,</span></span><br><span class="line"><span class="undefined">            years: null</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        car: &#123;</span></span><br><span class="line"><span class="undefined">          wheel: null,</span></span><br><span class="line"><span class="undefined">          driver: &#123;</span></span><br><span class="line"><span class="undefined">            license: null,</span></span><br><span class="line"><span class="undefined">            years: null</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        train: &#123;</span></span><br><span class="line"><span class="undefined">          wheel: null,</span></span><br><span class="line"><span class="undefined">          driver: &#123;</span></span><br><span class="line"><span class="undefined">            license: null,</span></span><br><span class="line"><span class="undefined">            years: null</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      person: &#123;</span></span><br><span class="line"><span class="undefined">        child: &#123;</span></span><br><span class="line"><span class="undefined">          year: null</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    licenseCheck (rule, value, callback) &#123;</span></span><br><span class="line"><span class="undefined">      let m = this.car;</span></span><br><span class="line"><span class="undefined">      console.log(m);</span></span><br><span class="line"><span class="undefined">      debugger;</span></span><br><span class="line"><span class="undefined">      if (value != null) &#123;</span></span><br><span class="line"><span class="undefined">        if (value != 'A') &#123;</span></span><br><span class="line"><span class="undefined">          callback(new Error('必须A照'));</span></span><br><span class="line"><span class="undefined">        &#125; else &#123;</span></span><br><span class="line"><span class="undefined">          callback();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    init () &#123;</span></span><br><span class="line"><span class="undefined">      console.log(this.car);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时在这个组件中，一切都是正常的，但是一个完整的项目里面，是不可能将所有的元素都堆积在一个页面中，那样的话以后的维护就会非常的麻烦。所以此时就需要一个子组件，然后将父组件中一些数据传递至子组件。<br>代码如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>小汽车子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"wheel"</span> <span class="attr">:rules</span>=<span class="string">"&#123;required: true,message: '请输入公共汽车车轮个数'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.wheel"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车司机驾照"</span> <span class="attr">prop</span>=<span class="string">"driver.license"</span> <span class="attr">:rules</span>=<span class="string">"&#123;validator: licenseCheck ,trigger:'blur'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.driver.license"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"driver.years"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.driver.years"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="undefined">    car: &#123;</span></span><br><span class="line"><span class="undefined">      type: Object,</span></span><br><span class="line"><span class="undefined">      default: function () &#123;</span></span><br><span class="line"><span class="undefined">        return &#123;&#125;;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    licenseCheck (rule, value, callback) &#123;</span></span><br><span class="line"><span class="undefined">      let m = this.car;</span></span><br><span class="line"><span class="undefined">      console.log(m);</span></span><br><span class="line"><span class="undefined">      debugger;</span></span><br><span class="line"><span class="undefined">      if (value != null) &#123;</span></span><br><span class="line"><span class="undefined">        if (value &lt;= 'D') &#123;</span></span><br><span class="line"><span class="undefined">          callback(new Error('必须C照以上'));</span></span><br><span class="line"><span class="undefined">        &#125; else &#123;</span></span><br><span class="line"><span class="undefined">          callback();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    init () &#123;</span></span><br><span class="line"><span class="undefined">      console.log(this.car);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted () &#123;</span></span><br><span class="line"><span class="undefined">    this.init();</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>当然在这个页面里面，一切都是可以正常输入的…就是<code>rules</code>无法使用。由于自己才是刚刚开始接触<code>vue</code>和<code>ElementUI</code>，所以对<code>vue</code>里面的一些使用技巧还不是很熟悉，这个时候看了下父组件里面的<code>prop</code>和<code>v-model</code>，发现<code>prop</code>都是比<code>v-model</code>少一个前缀…所以以为在子组件里面也是这样..其实后来才发新这个。</p><p>然后再去查看<code>ElementUI</code>的官网，发现</p><blockquote><p>prop    表单域 model 字段，在使用 validate、resetFields 方法的情况下，该属性是必填的    string    传入 Form 组件的 model 中的字段</p></blockquote><p>于时倒父组件中看了下，发现<code>el-form</code>确实有<code>:model</code>，然后参照了下<code>ElementUI</code>的介绍…突然想到是不是<code>prop</code>已经自动的将<code>:model</code>的对象带过来了…后来在子组件中进行了测试，修改后如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>小汽车子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"car.wheel"</span> <span class="attr">:rules</span>=<span class="string">"&#123;required: true,message: '请输入公共汽车车轮个数'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.wheel"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车司机驾照"</span> <span class="attr">prop</span>=<span class="string">"car.driver.license"</span> <span class="attr">:rules</span>=<span class="string">"&#123;validator: licenseCheck ,trigger:'blur'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.driver.license"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"car.driver.years"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.driver.years"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="undefined">    car: &#123;</span></span><br><span class="line"><span class="undefined">      type: Object,</span></span><br><span class="line"><span class="undefined">      default: function () &#123;</span></span><br><span class="line"><span class="undefined">        return &#123;&#125;;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    licenseCheck (rule, value, callback) &#123;</span></span><br><span class="line"><span class="undefined">      let m = this.car;</span></span><br><span class="line"><span class="undefined">      console.log(m);</span></span><br><span class="line"><span class="undefined">      debugger;</span></span><br><span class="line"><span class="undefined">      if (value != null) &#123;</span></span><br><span class="line"><span class="undefined">        if (value === 'A') &#123;</span></span><br><span class="line"><span class="undefined">          callback(new Error('必须A照'));</span></span><br><span class="line"><span class="undefined">        &#125; else &#123;</span></span><br><span class="line"><span class="undefined">          callback();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    init () &#123;</span></span><br><span class="line"><span class="undefined">      console.log(this.car);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted () &#123;</span></span><br><span class="line"><span class="undefined">    this.init();</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>于是一切都正常了，后来为了测试是不是非要在<code>el-form</code>上加一个<code>:model</code>才能正常使用<code>rules</code>，所以就写了一个<code>el-form</code>测试。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">""</span> <span class="attr">prop</span>=<span class="string">"person.child.year"</span> <span class="attr">:rules</span>=<span class="string">"&#123;validator: childCheck ,trigger:'blur'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"person.child.year"</span> <span class="attr">placeholder</span>=<span class="string">"请输入小孩的年龄"</span> &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">import Car from './Car';</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    Car</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="undefined">    return &#123;</span></span><br><span class="line"><span class="undefined">      person: &#123;</span></span><br><span class="line"><span class="undefined">        child: &#123;</span></span><br><span class="line"><span class="undefined">          year: null</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    childCheck (rule, value, callback) &#123;</span></span><br><span class="line"><span class="undefined">      debugger;</span></span><br><span class="line"><span class="undefined">      if (parseInt(value) &gt; 16) &#123;</span></span><br><span class="line"><span class="undefined">        callback(new Error('请输入16以下'));</span></span><br><span class="line"><span class="undefined">      &#125; else &#123;</span></span><br><span class="line"><span class="undefined">        callback();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    init () &#123;</span></span><br><span class="line"><span class="undefined">      console.log(this.car);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后发现在<code>childCheck</code>里面<code>value</code>总是获取不到值…一直是 undefinded ,然后再在<code>el-form</code>里面加上一个<code>:modele</code>…修改如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">""</span> <span class="attr">prop</span>=<span class="string">"child.year"</span> <span class="attr">:rules</span>=<span class="string">"&#123;validator: childCheck ,trigger:'blur'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"person.child.year"</span> <span class="attr">placeholder</span>=<span class="string">"请输入小孩的年龄"</span> &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">import Car from './Car';</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    Car</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="undefined">    return &#123;</span></span><br><span class="line"><span class="undefined">      person: &#123;</span></span><br><span class="line"><span class="undefined">        child: &#123;</span></span><br><span class="line"><span class="undefined">          year: null</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    childCheck (rule, value, callback) &#123;</span></span><br><span class="line"><span class="undefined">      debugger;</span></span><br><span class="line"><span class="undefined">      if (parseInt(value) &gt; 16) &#123;</span></span><br><span class="line"><span class="undefined">        callback(new Error('请输入16以下'));</span></span><br><span class="line"><span class="undefined">      &#125; else &#123;</span></span><br><span class="line"><span class="undefined">        callback();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    init () &#123;</span></span><br><span class="line"><span class="undefined">      console.log(this.car);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后就都好了…</p><p>所以以后还是得多看看官方文档…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这些天一直在踩&lt;code&gt;Vue&lt;/code&gt;的坑…今天遇到的一个问题是在一个父组件中，将某些数据通过&lt;code&gt;props&lt;/code&gt;传递给子组件，同时在子组件里面也有相应的一些&lt;code&gt;rules&lt;/code&gt;规则，但是在实际的开发中，却发现子组件的&lt;code&gt;ru
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在Vue中使用filters来进行字典值的转换</title>
    <link href="https://somersames.github.io/2019/05/27/%E5%9C%A8Vue%E4%B8%AD%E4%BD%BF%E7%94%A8filters%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%AD%97%E5%85%B8%E5%80%BC%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>https://somersames.github.io/2019/05/27/在Vue中使用filters来进行字典值的转换/</id>
    <published>2019-05-27T15:07:10.000Z</published>
    <updated>2019-06-09T02:58:38.532Z</updated>
    
    <content type="html"><![CDATA[<p>在Vue里面，经常会遇到一些字典值的转换，而这些字典值由于和后端进行了约定的，一般不会轻易的改变，所以在前后端开发的项目中，这种字典值最好的做法是前端独立的保存一份，自己在前端自行进行处理。</p><p>我们的做法是使用<code>Vuex</code>的<code>store</code>配合<code>filters</code>来进行前端的字典值转化，首先是在<code>store</code>里面将字典值进行固定，然后通过<code>filters</code>在页面中进行一个转换。</p><h2 id="使用Store"><a href="#使用Store" class="headerlink" title="使用Store"></a>使用Store</h2><p>在<code>Vue</code>里面使用<code>store</code>首先需要安装<code>vuex</code>，安装完毕之后就可以直接在<code>main.js</code>里面直接引用了，但是为了统一管理还是决定新建一个<code>store</code>文件夹，然后将<code>store</code>相关的文件全部统一存放，新建完毕之后项目结构如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---App.vue</span><br><span class="line">---main.js</span><br><span class="line">---store</span><br><span class="line">-----index.js</span><br></pre></td></tr></table></figure></p><p>在新建的<code>index.js</code>里面将<code>Vuex</code>实例注入到<code>Vue</code>中，如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    score: [</span><br><span class="line">      <span class="number">60</span>,</span><br><span class="line">      <span class="number">80</span>,</span><br><span class="line">      <span class="number">100</span></span><br><span class="line">    ],</span><br><span class="line">    enum: &#123;</span><br><span class="line">      <span class="number">60</span>: <span class="string">'及格'</span>,</span><br><span class="line">      <span class="number">80</span>: <span class="string">'良好'</span>,</span><br><span class="line">      <span class="number">100</span>: <span class="string">'优秀'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></p><p>在这里我定义了两个变量，一个是<code>score</code>，一个是<code>enum</code>，<code>score</code>主要是为了展示一些固定的值在前端的展示，而<code>enum</code>则是准备介绍<code>filter</code>的使用</p><h3 id="新建一个Vue页面"><a href="#新建一个Vue页面" class="headerlink" title="新建一个Vue页面"></a>新建一个Vue页面</h3><p>在这个页面里面，主要是介绍<code>store</code>的直接使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item, index) of score"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  computed: &#123;</span></span><br><span class="line"><span class="javascript">    ...mapState([<span class="string">'score'</span>])</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后查看页面，就会发现页面上已经出现了三个分数，分别是在<code>store</code>里面定义的60，80，100。这种方式是通过<code>...mapState</code>来获取的<code>state</code>里面定义的一些值。</p><p>通过这种方式有几种好处，第一就是当需要改变前端某一个字段的值的时候，则可以直接通过<code>store</code>从而减少对项目的改动，其二就是可以让前端项目更加规范、可扩展。</p><h2 id="使用filter来进行一些值的处理"><a href="#使用filter来进行一些值的处理" class="headerlink" title="使用filter来进行一些值的处理"></a>使用filter来进行一些值的处理</h2><p>为了大大提高前端的可扩展性，通过会对一些固定的值进行转换。例如性别，后端可能会返回 0 或者 1，若前端在某些页面上需要显示为<code>男|女</code>，而在某一些页面上需要显示<code>先生|女士</code>，此时通过<code>filter</code>来进行处理，则是一个不错的选择。</p><h3 id="新建一个文件夹和js文件"><a href="#新建一个文件夹和js文件" class="headerlink" title="新建一个文件夹和js文件"></a>新建一个文件夹和js文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---App.vue</span><br><span class="line">---main.js</span><br><span class="line">---store</span><br><span class="line">-----index.js</span><br><span class="line">---utils</span><br><span class="line">-----filter.js</span><br></pre></td></tr></table></figure><p>filter.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">enumConvert</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> store.state.enum[val];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>main.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> filters <span class="keyword">from</span> <span class="string">'./utils/filter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(filters).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  Vue.filter(key, filters[key]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在这里通过<code>Vue.filter</code>将filter方法进行全局注册，然后在<code>Vue</code>页面进行使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item, index) of score"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item | convert&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  computed: &#123;</span></span><br><span class="line"><span class="javascript">    ...mapState([<span class="string">'score'</span>])</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  filters: &#123;</span></span><br><span class="line"><span class="undefined">    convert (val) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> Vue.filter(<span class="string">'enumConvert'</span>)(val);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时页面上就会展示<code>及格</code>，<code>良好</code>，<code>优秀</code>了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Vue里面，经常会遇到一些字典值的转换，而这些字典值由于和后端进行了约定的，一般不会轻易的改变，所以在前后端开发的项目中，这种字典值最好的做法是前端独立的保存一份，自己在前端自行进行处理。&lt;/p&gt;
&lt;p&gt;我们的做法是使用&lt;code&gt;Vuex&lt;/code&gt;的&lt;code&gt;st
      
    
    </summary>
    
      <category term="Vue" scheme="https://somersames.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://somersames.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue中nextTick的使用</title>
    <link href="https://somersames.github.io/2019/05/20/Vue%E4%B8%ADnextTick%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://somersames.github.io/2019/05/20/Vue中nextTick的使用/</id>
    <published>2019-05-20T15:39:42.000Z</published>
    <updated>2019-06-09T02:58:38.532Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间一直在负责一个前后端项目，前端是<code>Vue</code>+<code>ElemeUI</code>，由于自己之前只是会简单的使用 Vue 的一些初级命令，自然只能慢慢的踩坑，然后再出坑….。例如<code>数组无法触发Vue的视图更新</code></p><p>刚开始在使用 Vue 的时候，一直都是在 <code>created</code> 方法里面获取后端数据进行渲染，这样用起来倒也没什么问题，只不过今天突然看到了 Vue 的<code>nextTick</code> 方法，感觉比之前在<code>created</code>里面请求后端更加高级。所以顺便研究了一波。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p><code>nextTick</code>常用于数据更新后，但是dom元素还未完成刷新，如何理解呢? 在 Vue 里面，更新 DOM 元素是异步的，也就是说当我们修改了数据之后，DOM元素并不会立即被刷新。参考<a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97" target="_blank" rel="noopener">深入响应式原理</a></p><p>如下Demo<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">'id'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"nextClick"</span>&gt;</span>点击测试<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      id: <span class="string">'q'</span></span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted () &#123;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    nextClick () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.id = <span class="string">'m'</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> obj = <span class="built_in">document</span>.getElementById(<span class="keyword">this</span>.id);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> one = <span class="built_in">document</span>.getElementById(_this.id);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(one);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(obj);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时你在控制台会看到<code>obj</code>获取的是null，<code>one</code>获取的dom节点才是正确的。</p><p><a href="https://stackoverflow.com/questions/47634258/what-is-nexttick-or-what-does-it-do-in-vuejs" target="_blank" rel="noopener">StackOverFlow关于这个的另一个解释</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这段时间一直在负责一个前后端项目，前端是&lt;code&gt;Vue&lt;/code&gt;+&lt;code&gt;ElemeUI&lt;/code&gt;，由于自己之前只是会简单的使用 Vue 的一些初级命令，自然只能慢慢的踩坑，然后再出坑….。例如&lt;code&gt;数组无法触发Vue的视图更新&lt;/code&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="Vue" scheme="https://somersames.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://somersames.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JDK1.8下ConcurrentHashMap的一些理解(一)</title>
    <link href="https://somersames.github.io/2019/05/13/JDK1.8%E4%B8%8BConcurrentHashMap%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3(%E4%B8%80)/"/>
    <id>https://somersames.github.io/2019/05/13/JDK1.8下ConcurrentHashMap的一些理解(一)/</id>
    <published>2019-05-13T15:26:02.000Z</published>
    <updated>2019-06-09T02:58:38.532Z</updated>
    
    <content type="html"><![CDATA[<p>在JDK1.8里面，<code>ConcurrentHashMap</code>在put方法里面已经将分段锁移除了，转而是CAS锁和synchronized</p><p><code>ConcurrentHashMap</code>是Java里面同时兼顾性能和线程安全的一个键值对集合，同属于键值对的集合还有<code>HashTable</code>以及<code>HashMap</code>，<br><code>HashTable</code>是一个线程安全的类，因为它的所有<code>public</code>方法都被<code>synchronized</code>修饰，这样就导致了一个问题，就是效率太低。</p><p>虽然<code>HashMap</code>在<code>JDK1.8</code>的并发场景下触发扩容时不会出现成环了，但是会出现数据丢失的情况。<br>所以如果需要在多线程的情况下(多读少写))使用Map集合的话，<code>ConcurrentHashMap</code>是一个不错的选择。</p><p><code>ConcurrentHashMap</code>在JDK1.8的时候将put()方法中的分段锁<code>Segment</code>移除，转而采用一种<code>CAS</code>锁和<code>synchronized</code>来实现插入方法的线程安全。<br>如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Implementation for put and putIfAbsent */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//省略相关代码</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                tab = initTable();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                             <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                    <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                V oldVal = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="comment">//省略相关代码</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> oldVal;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到在<code>JDK1.8</code>里面，<code>ConcurrentHashMap</code>是直接采用<code>数组</code>+<code>链表</code>+<code>红黑树</code>来实现，时间复杂度在O(1)和O(n)之间，如果链表转化为红黑树了，那么就是O(1)到O(nlogn)。<br>在这里值得一提的是，<code>ConcurrentHashMap</code>会判断<code>tabAt(tab, i = (n - 1) &amp; hash)</code>是不是 null，是的话就直接采用<code>CAS</code>进行插入，而如果不为空的话，则是<code>synchronized</code>锁住当前<code>Node</code>的首节点，这是因为当该<code>Node</code>不为空的时候，证明了此时出现了<code>Hash</code>碰撞，就会涉及到<code>链表</code>的尾节点新增或者<code>红黑树</code>的节点新增以及<code>红黑树</code>的平衡，这些操作自然都是非原子性的。</p><p>从而导致无法使用<code>CAS</code>，当<code>Node</code>的当前下标为null的时候，由于只是涉及数组的新增，所以用<code>CAS</code>即可。</p><blockquote><p>因为CAS是一种基于版本控制的方式来实现，而碰撞之后的操作太多，所以直接用<code>synchronized</code>比较合适。</p></blockquote><h3 id="ConcurrentHashMap在迭代时和HashMap的区别"><a href="#ConcurrentHashMap在迭代时和HashMap的区别" class="headerlink" title="ConcurrentHashMap在迭代时和HashMap的区别"></a>ConcurrentHashMap在迭代时和HashMap的区别</h3><p>当一个集合在迭代的时候如果动态的添加或者删除元素，那么就会抛出<code>Concurrentmodificationexception</code>，但是在<code>ConcurrentHashMap</code>里面却不会，例如如下代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;String,String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;String, String&gt;();</span><br><span class="line">    map.put(<span class="string">"a"</span>,<span class="string">"a1"</span>);</span><br><span class="line">    map.put(<span class="string">"b"</span>,<span class="string">"b1"</span>);</span><br><span class="line">    map.put(<span class="string">"c"</span>,<span class="string">"c1"</span>);</span><br><span class="line">    map.put(<span class="string">"d"</span>,<span class="string">"d1"</span>);</span><br><span class="line">    map.put(<span class="string">"e"</span>,<span class="string">"e1"</span>);</span><br><span class="line">    Iterator&lt;String&gt; iterator = map.keySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        String it = iterator.next();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"b"</span>.equals(it))&#123;</span><br><span class="line">            map.remove(<span class="string">"d"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(it);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">控制台打印如下：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">e</span><br></pre></td></tr></table></figure></p><p>而当你把<code>ConcurrentHashMap</code>换成<code>HashMap</code>的时候，控制台就会抛出一个异常:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> a</span><br><span class="line">b</span><br><span class="line">java.util.ConcurrentModificationException</span><br><span class="line">at java.util.HashMap$HashIterator.nextNode(HashMap.java:<span class="number">1442</span>)</span><br><span class="line">at java.util.HashMap$KeyIterator.next(HashMap.java:<span class="number">1466</span>)</span><br><span class="line">at xyz.somersames.ListTest.main(ListTest.java:<span class="number">22</span>)</span><br></pre></td></tr></table></figure></p><p>原因在于<code>ConcurrentHashMap</code>的<code>next</code>方法并不会去检查<code>modCount</code>和<code>expectedModCount</code>，但是会检查下一个节点是不是为空<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((p = next) == <span class="keyword">null</span>)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br></pre></td></tr></table></figure></p><p>当我们进行remove的时候，<code>ConcurrentHashMap</code>会直接通过修改指针的方式来进行移除操作，同样的，也会锁住<code>数组</code>的头节点直至移除结束，所以在同一个时刻，只会有一个线程对<code>当前数组下标的所有节点</code>进行操作。</p><p>但是在<code>HashMap</code>里面，<code>next</code>方法会进行一个check，而remove操作会修改<code>modCount</code>，导致<code>modCount</code>和<code>expectedModCount</code>不相等，所以就会导致<br><code>ConcurrentModificationException</code></p><p>稍微修改下代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;String,String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;String, String&gt;();</span><br><span class="line">    map.put(<span class="string">"a"</span>,<span class="string">"a1"</span>);</span><br><span class="line">    map.put(<span class="string">"b"</span>,<span class="string">"b1"</span>);</span><br><span class="line">    map.put(<span class="string">"c"</span>,<span class="string">"c1"</span>);</span><br><span class="line">    map.put(<span class="string">"d"</span>,<span class="string">"d1"</span>);</span><br><span class="line">    map.put(<span class="string">"e"</span>,<span class="string">"e1"</span>);</span><br><span class="line">    Iterator&lt;String&gt; iterator = map.keySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"b"</span>.equals(iterator.next()))&#123;</span><br><span class="line">            map.remove(<span class="string">"d"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">控制台打印如下:</span><br><span class="line">b</span><br><span class="line">d</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.util.NoSuchElementException</span><br><span class="line">at java.util.concurrent.ConcurrentHashMap$KeyIterator.next(ConcurrentHashMap.java:<span class="number">3416</span>)</span><br><span class="line">at com.xzh.ssmtest.ListTest.main(ListTest.java:<span class="number">25</span>)</span><br></pre></td></tr></table></figure></p><h3 id="并发下的处理"><a href="#并发下的处理" class="headerlink" title="并发下的处理"></a>并发下的处理</h3><p>由于每一个<code>Node</code>的首节点都会被<code>synchronized</code>修饰，从而将一个元素的新增转化为一个原子操作，同时<code>Node</code>的<code>value</code>和<code>next</code>都是由<code>volatile</code>关键字进行修饰，从而可以保证可见性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在JDK1.8里面，&lt;code&gt;ConcurrentHashMap&lt;/code&gt;在put方法里面已经将分段锁移除了，转而是CAS锁和synchronized&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;是Java里面同时兼顾性能和线程安全的一个
      
    
    </summary>
    
      <category term="java" scheme="https://somersames.github.io/categories/java/"/>
    
    
      <category term="Java" scheme="https://somersames.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>单例模式引起的一些思考</title>
    <link href="https://somersames.github.io/2019/05/04/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>https://somersames.github.io/2019/05/04/单例模式引起的一些思考/</id>
    <published>2019-05-04T06:33:26.000Z</published>
    <updated>2019-06-08T15:06:14.270Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式通常有饿汉式和懒汉式，懒汉式</p><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p>无线程安全性问题<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleHungryStyle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleHungryStyle instince = <span class="keyword">new</span> SingleHungryStyle();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleHungryStyle <span class="title">getInstince</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instince;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><h4 id="单线程下"><a href="#单线程下" class="headerlink" title="单线程下"></a>单线程下</h4><blockquote><p>demo1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLazyStyle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleLazyStyle instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleLazyStyle <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingleLazyStyle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码在多线程的情况下会出现多个实例，所以需要进行一个加锁判断。</p><h4 id="多线程下"><a href="#多线程下" class="headerlink" title="多线程下"></a>多线程下</h4><blockquote><p>demo2</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLazy1Style</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleLazy1Style instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleLazy1Style <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SingleLazy1Style.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> SingleLazy1Style();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码在多线程的情况下运行多次偶尔会出现一个问题，就是CPU的重排序会导致<code>instance</code>还未完全初始化就被使用了。</p><p>例如:</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.png" alt=""></p><p>此时<code>线程二</code>就有可能报错，因为JVM在进行一个类的初始化的时候是分为三步的。</p><p><code>Java SE 8</code>的JVM规范里面对一个类的加载进行了详细的描述：<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.2" target="_blank" rel="noopener">Java SE 8的JVM规范</a>。<br>具体来说就是分为三步：</p><ul><li>Loading</li><li>Linking</li><li>Initializing</li></ul><h5 id="Creation-and-Loading"><a href="#Creation-and-Loading" class="headerlink" title="Creation and Loading"></a>Creation and Loading</h5><p>在这一步，JVM需要判断需要初始化的类是<code>数组</code>还是一个<code>普通类</code>，如果是一个普通类的话，就再进行判断是需要使用<code>bootstrap class loader</code>来进行加载还是说用<code>user-defined class loader</code>进行加载。</p><h5 id="Linking"><a href="#Linking" class="headerlink" title="Linking"></a>Linking</h5><p>在这一步主要是<code>验证</code>和<code>准备</code></p><ul><li>Verification</li><li>Preparation</li><li>Resolution</li></ul><p>而将未初始化的引用绑定到实例上就是<code>Resolution</code>。具体可以参考:<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html" target="_blank" rel="noopener"> Java SE 8的JVM规范 5.4.3</a></p><h5 id="Initializing"><a href="#Initializing" class="headerlink" title="Initializing"></a>Initializing</h5><p>初始化，即将字段进行一个默认值初始化。</p><p>但是这里因为<code>Linking</code>和<code>Initializing</code>之间并无任何的关联性，所以可能会导致先进行了一个初始化，但是并未将该引用绑定到堆的一个实例上，而此时由轮到另一个线程执行。所以就会导致另一个线程获取的是空对象。</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>但是在这个初始化的过程中，<code>Linking</code>和<code>Initializing</code>之间由于互相不依赖，所以<code>CPU</code>可能会先进行初始化，但是并未进行<code>关联</code>，即将引用关联到JVM里面的一个实例。而直接返回了。此时由于<code>happens-before原则</code>并不能跨线程，所以会出现两种情况：</p><ul><li>如果线程一在线程二之前使用了<code>instance</code>，此时线程二使用<code>instance</code>不会出现任何问题</li><li>如果线程一在初始化完毕之后释放了锁资源，然后线程二执行，因为线程二判断<code>instance</code>已经被初始化了（但此时实际上并未Linking），所以在使用的时候会报错。</li></ul><p>但是这个时候，由于<code>CPU的重排序</code>，导致<code>线程二</code>获取的<code>instance</code>可能出现空指针异常;</p><p>所以一般为了避免这种情况，会加一个<code>volatile</code>关键字来禁止内存重排序。</p><blockquote><p>demo3</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLazy2Style</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingleLazy2Style instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleLazy2Style <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingleLazy2Style.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingleLazy2Style();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>在这里之所以使用<code>volatile</code>的特性之一：防止内存进行重排序（包含写屏障和读屏障）</p><h3 id="happens-before原则"><a href="#happens-before原则" class="headerlink" title="happens-before原则"></a>happens-before原则</h3><p><a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.4.5" target="_blank" rel="noopener">Java SE 8中Happens-before原则</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Two actions can be ordered by a happens-before relationship. If one action happens-before another, then the first is visible to and ordered before the second.</span><br><span class="line"></span><br><span class="line">If we have two actions x and y, <span class="function">we write <span class="title">hb</span><span class="params">(x, y)</span> to indicate that x happens-before y.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">If x and y are actions of the same thread and x comes before y in program order, then <span class="title">hb</span><span class="params">(x, y)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">There is a happens-before edge from the end of a constructor of an object to the start of a <span class="title">finalizer</span> <span class="params">(§<span class="number">12.6</span>)</span> <span class="keyword">for</span> that object.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">If an action x synchronizes-with a following action y, then we also have <span class="title">hb</span><span class="params">(x, y)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">If <span class="title">hb</span><span class="params">(x, y)</span> and <span class="title">hb</span><span class="params">(y, z)</span>, then <span class="title">hb</span><span class="params">(x, z)</span></span></span><br></pre></td></tr></table></figure><p><code>happens-before原则</code>要求在一个线程内，重排序后执行的结果与未重排序之前的执行结果必须一致。所以在<code>demo1</code>中单线程里面，是不会出现任何问题的，因为即使发生重排序，最后在使用<code>instance</code>的时候，instance也一定会完成初始化，否则就是编译器bug了。</p><p>但是在多线程的情况下，<code>happens-before</code>原则无法生效，所以就会导致其他线程在获取实例的时候会出现异常。</p><p>所以在多线程的情况下需要使用<code>volatile</code>关键字进行修饰，主要是因为需要确保首个初始化的线程必须完成整个类的初始化的操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;单例模式通常有饿汉式和懒汉式，懒汉式&lt;/p&gt;
&lt;h3 id=&quot;饿汉式&quot;&gt;&lt;a href=&quot;#饿汉式&quot; class=&quot;headerlink&quot; title=&quot;饿汉式&quot;&gt;&lt;/a&gt;饿汉式&lt;/h3&gt;&lt;p&gt;无线程安全性问题&lt;br&gt;&lt;figure class=&quot;highlight jav
      
    
    </summary>
    
      <category term="设计模式" scheme="https://somersames.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://somersames.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JDK1.7和1.8中的HashMap区别</title>
    <link href="https://somersames.github.io/2019/04/08/JDK1-7%E5%92%8C1-8%E4%B8%AD%E7%9A%84HashMap%E5%8C%BA%E5%88%AB/"/>
    <id>https://somersames.github.io/2019/04/08/JDK1-7和1-8中的HashMap区别/</id>
    <published>2019-04-08T14:47:15.000Z</published>
    <updated>2019-06-08T15:06:14.251Z</updated>
    
    <content type="html"><![CDATA[<p>Jdk1.7和1.8中，HashMap的一些关键点几乎重写了。</p><h2 id="主要变更点："><a href="#主要变更点：" class="headerlink" title="主要变更点："></a>主要变更点：</h2><h3 id="1-hash扰动算法"><a href="#1-hash扰动算法" class="headerlink" title="1. hash扰动算法"></a>1. hash扰动算法</h3><p>在jdk1.7的时候，HahMap的hash扰动算法如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而在jdk1.8的时候，其hash算法已经修改为如下了:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>HashMap在放入一个元素的时候，首先会获取其<code>HashCode</code>，然后将 key 的 HashCode 进行扰动，避免同一个碰撞概率太大。<br>如下例子。</p><p>假设一个key <code>a</code> 的 hashCode 为 <code>1010 1010 1110 1101 1110 1111 1000 0110</code>，如果不进行扰动，那么直接与table的长度 -1 进行<strong>与</strong>运，若table的长度是16，则计算的过程如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1010</span> <span class="number">1010</span> <span class="number">1110</span> <span class="number">1101</span> <span class="number">1110</span> <span class="number">1111</span> <span class="number">1000</span> <span class="number">0110</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span></span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0110</span></span><br></pre></td></tr></table></figure></p><p>计算结果得出： <code>a</code> 的数组下标就是 6</p><p>但是这样就会出现一个问题，即每一次比较的都是最低位，如果某一个 key 和<code>a</code>的高位不同，低位却相同。每一次都是取最低位的几个数值进行运算，那么就会产生很严重的<code>hash碰撞</code>，所以就需要进行<code>hash</code>扰动以减少<code>hash碰撞</code>的概率。</p><h3 id="以-jdk1-8-的扰动算法为例"><a href="#以-jdk1-8-的扰动算法为例" class="headerlink" title="以 jdk1.8 的扰动算法为例"></a>以 jdk1.8 的扰动算法为例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1010</span> <span class="number">1010</span> <span class="number">1110</span> <span class="number">1101</span> <span class="number">1110</span> <span class="number">1111</span> <span class="number">1000</span> <span class="number">0110</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1010</span> <span class="number">1010</span> <span class="number">1110</span> <span class="number">1101</span>  ^ &gt;&gt;&gt;<span class="number">16</span></span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="number">1010</span> <span class="number">1010</span> <span class="number">1110</span> <span class="number">1101</span> <span class="number">0101</span> <span class="number">0101</span> <span class="number">0110</span> <span class="number">1000</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>  &amp;</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1000</span>   <span class="number">8</span></span><br></pre></td></tr></table></figure><p>为什么进行扰动后，碰撞的概率会降低。具体的原因可以阅读这边文章<br><a href="http://vanillajava.blogspot.com/2015/09/an-introduction-to-optimising-hashing.html" target="_blank" rel="noopener">An introduction to optimising a hashing strategy</a></p><h3 id="2-HashMap的数据结构出现了变化"><a href="#2-HashMap的数据结构出现了变化" class="headerlink" title="2. HashMap的数据结构出现了变化"></a>2. HashMap的数据结构出现了变化</h3><p>在 jdk1.7的时候，HashMap是由一个数组和一个链表构成的。<br>插入规则如下：</p><ol><li>计算新插入的 key 的 hashCode，然后通过 hashCode 计算索引，找出该key在<code>Entry</code>中的位置，然后判断该下标是否有元素，如果没有则直接进行插入。</li></ol><ol start="2"><li>如果有的话就按照如下规则找出是否有相同的 key：<blockquote><p>hash相同且key相同<br>hash相同且equals方法返回相同</p></blockquote></li></ol><p>若相同，则直接将当前的 value 替换原来的 value。</p><ol start="3"><li>如果最后还是未发现相同的 key ，则新建一个<code>Entry</code> ，并将头节点设置为该<code>Entry</code>。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment">    * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment">    * value is replaced.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment">    *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">    *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment">    *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">       <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">       <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">       <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">           Object k;</span><br><span class="line">           <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">               V oldValue = e.value;</span><br><span class="line">               e.value = value;</span><br><span class="line">               e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">               <span class="keyword">return</span> oldValue;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       modCount++;</span><br><span class="line">       addEntry(hash, key, value, i);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">       Entry&lt;K,V&gt; e = table[bucketIndex]; <span class="comment">//找出原来table中的元素</span></span><br><span class="line">       table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">       <span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">           resize(<span class="number">2</span> * table.length);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//注意，此时将该节点是作为现在的table的头节点，原来的e则是新节点的next</span></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Creates new entry.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">           value = v;</span><br><span class="line">           next = n;</span><br><span class="line">           key = k;</span><br><span class="line">           hash = h;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ol><p>以下是在 jdk1.7 的时候第三种方式插入的极简版：<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/HashMap1.7.png" alt=""></p><h4 id="而在-jdk1-8-的时候，则是由一个数组加一个链表、红黑树组成"><a href="#而在-jdk1-8-的时候，则是由一个数组加一个链表、红黑树组成" class="headerlink" title="而在 jdk1.8 的时候，则是由一个数组加一个链表、红黑树组成"></a>而在 jdk1.8 的时候，则是由一个数组加一个链表、红黑树组成</h4><p>之所以这样改进，是因为在极端情况下，如果所有的元素都 hash 到了一个下标，那么这样的话，HashMap在查找元素的时候就会退化到一个链表，其时间复杂度是<code>O(n)</code>。</p><p>为了应对这种情况，HashMap在1.8的时候会判断链表上的元素，如果超过了 <code>8</code> 个，就会将链表转化为红黑树。同时在 1.8 的时候，HashMap将链表的插入方式修改为尾插入。</p><blockquote><p>提示：修改为尾插入是为了避免在并发的情况下出现链表成环（在jdk1.7之前会出现、同时HashMap并不适用并发场景下）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//......省略相关代码</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                     <span class="comment">// 在未节点进行插入</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st。如果大于8，则会将链表转为红黑树</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上述的变动最大点在于这两行代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">    treeifyBin(tab, hash);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一行是进行尾插入(1.7是头插入)</p><p>第二行是大于8会进行链表到红黑树的转化</p><h3 id="jdk1-7采用头节点插入导致的链表成环"><a href="#jdk1-7采用头节点插入导致的链表成环" class="headerlink" title="jdk1.7采用头节点插入导致的链表成环"></a>jdk1.7采用头节点插入导致的链表成环</h3><p>虽然<code>HashMap</code>是一个非线程安全的，但是如果在 jdk1.7 版本中将HashMap用于并发环境下会出现什么情况呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">        Entry[] oldTable = table;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">        <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">        transfer(newTable);</span><br><span class="line">        table = newTable;</span><br><span class="line">        threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// jdk1.7 扩容代码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>&#123;</span><br><span class="line">        Entry[] src = table;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = src[j];</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                src[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                    <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">                    e.next = newTable[i];</span><br><span class="line">                    newTable[i] = e;</span><br><span class="line">                    e = next;</span><br><span class="line">                &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h5 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h5><hr><p><strong>此时假设线程二已经将hashMap扩容完毕，但是线程一还在被挂起。</strong><br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/hashMap1.0.png" alt=""></p><p>线程一执行，此时 <code>e</code>是为1，next却是2。</p><hr><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/HshMap%E7%BA%BF%E7%A8%8B%E4%B8%80%E7%AC%AC%E4%B8%80%E6%AC%A1transfer.png" alt=""></p><p>线程一第一次循环执行完毕，此时的<code>e</code>是2，然后`e.next是3。</p><hr><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/HashMap%E7%BA%BF%E7%A8%8B%E4%B8%80%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%89%A7%E8%A1%8C.png" alt=""></p><p>线程一第二次循环执行完毕，此时的<code>e</code>是3，然后<code>e.next是1</code>，注意此时<strong>线程二</strong>中，已经将 <code>3</code> 的next指向了 <code>1</code> ，所以此时<code>e</code>是3，然后 <code>next</code> 是1。</p><hr><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/HashMap%E7%BA%BF%E7%A8%8B%E4%B8%80%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%BE%AA%E7%8E%AF.png" alt=""></p><p>此时第三次循环完毕，由于<code>e</code>还不为空，于是进行第四次循环(<strong>主要原因是线程二已经将<code>3</code>的next指向为<code>1</code></strong>)。<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/HashMap%E7%BA%BF%E7%A8%8B%E4%B8%80%E5%BE%AA%E7%8E%AF%E5%AE%8C%E6%AF%95.png" alt=""></p><p>由于<code>1</code>的 next 是 null，所以循环结束。</p><h3 id="jdk1-8的尾节点插入"><a href="#jdk1-8的尾节点插入" class="headerlink" title="jdk1.8的尾节点插入"></a>jdk1.8的尾节点插入</h3><p>由上面的分析可以不难发现，造成链表成环的主要原因为：多线程下，头节点插入导致原来的链表的尾节点有了<code>next</code>，所以最后会多循环一遍，从而成环。</p><p>而在jdk1.8采用的为节点插入在多线程下，顶多是另一个线程把前面一个线程 resize 的过程再重复一遍，却不会再出现链表成环。</p><h3 id="多线程下通用的bug"><a href="#多线程下通用的bug" class="headerlink" title="多线程下通用的bug"></a>多线程下通用的bug</h3><p>虽然 jdk1.8 修复了链表成环这一个问题，但是多线程的情况下导致的<code>数据丢失</code>问题确实一直存在的。</p><p>所以不要尝试在多线程的情况下使用<code>HashMap</code>，如果需要用到<code>Map</code>结构的话，可以用<code>CurrentHashMap</code>或者<code>HashTable</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Jdk1.7和1.8中，HashMap的一些关键点几乎重写了。&lt;/p&gt;
&lt;h2 id=&quot;主要变更点：&quot;&gt;&lt;a href=&quot;#主要变更点：&quot; class=&quot;headerlink&quot; title=&quot;主要变更点：&quot;&gt;&lt;/a&gt;主要变更点：&lt;/h2&gt;&lt;h3 id=&quot;1-hash扰动算法
      
    
    </summary>
    
      <category term="Java" scheme="https://somersames.github.io/categories/Java/"/>
    
    
      <category term="Java集合" scheme="https://somersames.github.io/tags/Java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Java集合学习之HashSet</title>
    <link href="https://somersames.github.io/2019/04/04/Java%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0%E4%B9%8BHashSet/"/>
    <id>https://somersames.github.io/2019/04/04/Java集合学习之HashSet/</id>
    <published>2019-04-04T15:30:28.000Z</published>
    <updated>2019-06-08T15:06:14.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在一般的使用中，HashSet经常用于数据的去重，例如我们有一个List，这个List里面有一些重复的数据，于是我们便可以这样操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"b"</span>);</span><br><span class="line">list.add(<span class="string">"c"</span>);</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">Set&lt;String&gt; set =<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">set.addAll(list);</span><br></pre></td></tr></table></figure></p><p>此时，在Set里面，只会有一个<code>a</code>元素。</p><h2 id="底层"><a href="#底层" class="headerlink" title="底层"></a>底层</h2><p>其实<code>HashSet</code>的底层是一个<code>HashMap</code>，<code>HashSet</code>的去重使用了<code>HashMap</code>的<code>Key</code>。<br>如图所示：<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/HashSet%E5%BA%95%E5%B1%82.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds the specified element to this set if it is not already present.</span></span><br><span class="line"><span class="comment"> * More formally, adds the specified element &lt;tt&gt;e&lt;/tt&gt; to this set if</span></span><br><span class="line"><span class="comment"> * this set contains no element &lt;tt&gt;e2&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;(e==null&amp;nbsp;?&amp;nbsp;e2==null&amp;nbsp;:&amp;nbsp;e.equals(e2))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> * If this set already contains the element, the call leaves the set</span></span><br><span class="line"><span class="comment"> * unchanged and returns &lt;tt&gt;false&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be added to this set</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this set did not already contain the specified</span></span><br><span class="line"><span class="comment"> * element</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashSet的<code>add</code>方法是向一个map里面放入元素，而<code>HashMap</code>则是不允许键重复，所以就可以确保在<code>HashMap</code>上的键都是不重复的。</p><h2 id="HashMap是如何确保每一个对象都只有一个的呢"><a href="#HashMap是如何确保每一个对象都只有一个的呢" class="headerlink" title="HashMap是如何确保每一个对象都只有一个的呢?"></a>HashMap是如何确保每一个对象都只有一个的呢?</h2><p>首先当调用<code>HashSet</code>的add方法的时候，其实是调用HashMap的<code>put</code>方法，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment">    * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment">    * value is replaced.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment">    *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">    *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment">    *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>这个方法无非是先将这个key进行hash，然后再调用<code>putVal</code>方法进行保存，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这个是<code>HashMap</code>的底层方法，当首次传入值的时候，</p><blockquote><p>   if ((tab = table) == null || (n = tab.length) == 0){<br>           n = (tab = resize()).length;}</p></blockquote><p>如果table未空就进行初始化，如果不为空则执行下面的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Node&lt;K,V&gt; e; K k;</span><br><span class="line"><span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">    ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">    e = p;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">    e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                treeifyBin(tab, hash);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        p = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在HashMap里面，有一个数组<code>table</code>存放着所有的<code>key</code>，而 HashMap 定位下标的方式就是通过<code>(n - 1) &amp; hash</code>。</p><p>当HashMap发现该下标的值是<code>null</code>，就会直接将入参的<code>key</code>和<code>value</code>疯转成一个Node保存进去，如果发现不是<code>null</code>，则<code>HashMap</code>认为发生了<code>HashMap</code>碰撞，于时进行如下判断:</p><p>如果新传入的一个key在<code>HashMap</code>中已经存在，则<code>HashMap</code>会直接将旧的key的value替换掉。否则就会进行新增<br>HashMap在判断一个key是否相等会采取以下措施：</p><p><strong>如果两个Key的hash不同，则HashMap直接会判断key不等</strong></p><ol><li>Key和hash完全相同<blockquote><p>第一次传入key=a，Hash值是1，value是100;<br>第二次传入key=a，Hash值是1，value是101;</p></blockquote></li></ol><p>此时hashMap会认为新传入的key已经存在，所以会将旧的value替换为新的value</p><p><strong>产生Hash碰撞，也就是两个key的hash都是一样的，那么就会通过key是否相同或者equals方法判断对象是否相等了</strong></p><ol start="2"><li>Key不同，hash相同 </li></ol><p>HashMap会判断传入的key、以及key的hash值，如果相等则认为该键以相等，例如:</p><blockquote><p>第一次传入key:a，Hash值是1;<br>第二次传入key:b，Hash值是1;</p></blockquote><p>这个时候由于key不同，hashMap还会通过equals继续判断。</p><ol start="3"><li>由于第二次传入的key是<code>b</code>，但是他们的Key并不相等，此时<code>HashMap</code>就会调用他们的<code>equals</code>方法，如果通过<code>equals</code>方法判断的是相同对象，则也会认为是同一个key。</li></ol><p>此时如果判断新增的key确实不存在就会在当前的table位置通过链表地址方法辛增一个key了。</p><p>那么到这里就可以看到，其实<code>HashSet</code>就是完全的利用了<code>HashMap</code>的键的特性来进行去重。</p><h2 id="Iterator方法"><a href="#Iterator方法" class="headerlink" title="Iterator方法"></a>Iterator方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Returns an iterator over the elements in this set.  The elements</span></span><br><span class="line"><span class="comment">  * are returned in no particular order.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> an Iterator over the elements in this set</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span> ConcurrentModificationException</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> map.keySet().iterator();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>其实都是利用了<code>hashMap</code>的一些方法来实现</p><h2 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全"></a>线程不安全</h2><p>由于HshMap是非线程安全的，自然HashSet也不是一个线程安全的。测试代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Set&lt;Integer&gt; set =<span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">            set.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        HashSetTest hashSetTest =<span class="keyword">new</span> HashSetTest();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(hashSetTest);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(hashSetTest);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(hashSetTest.set.size());</span><br><span class="line">        Set&lt;Integer&gt; set =<span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Integer i :hashSetTest.set)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(i))&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到打印出来的结果会多于<code>10000</code>，这是因为在上面也说到过的，HashMap在判断一个key是否相同以及后续新增节点的时候并非是一个原子性的，所以就有可能会导致<code>t1</code>线程刚好判断10不在hashMap中，准备新增一个节点为10。结果此时t1被挂起，t2执行，但是t2也判断了10不在hashMap中，也准备新增，那么此时就会出现新增了两个一摸一样的Key。这样就会导致<code>Set</code>集合中出现了重复的数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;在一般的使用中，HashSet经常用于数据的去重，例如我们有一个List，这个List里面有一些重复的数据，于是我们便可以这样操作&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://somersames.github.io/categories/Java/"/>
    
    
      <category term="Java集合" scheme="https://somersames.github.io/tags/Java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Spring中AOP的探索与实践(二)之Mongo多数据源切换</title>
    <link href="https://somersames.github.io/2019/03/13/Spring%E4%B8%ADAOP%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5(%E4%BA%8C)%E4%B9%8BMongo%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/"/>
    <id>https://somersames.github.io/2019/03/13/Spring中AOP的探索与实践(二)之Mongo多数据源切换/</id>
    <published>2019-03-12T16:01:27.000Z</published>
    <updated>2019-06-08T15:06:14.256Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的一片文章中介绍了使用AOP的方式来实现Redis的多数据源切换。而今天这一篇则是主要讲述<code>Mongo</code>的多数据源切换。</p><p>使用AOP来实现Mongo的数据源切换与Redis的AOP切换相同，不同之处是需要替换<code>MongoRepository</code>里面的<code>MongoOperations</code>,从而实现多数据源的切换</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>配置类，读取Mongo的配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoMultiProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(MongoMultiProperties.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"mongodb1"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.data.mongodb.db1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MongoProperties <span class="title">db1Properties</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"正在初始化db1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MongoProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"mongodb2"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.data.mongodb.db2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MongoProperties <span class="title">db2Properties</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"正在初始化db2"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MongoProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置<code>MongoRepository</code></p><blockquote><p>以下是为了演示，所以配置了两个MongoRepository，实际上使用了AOP的方式实现的多数据源，只需要配置一个默认的MongoRepository即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableMongoRepositories</span>(mongoTemplateRef = <span class="string">"mongoDB2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DB2Template</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"mongodb2"</span>)</span><br><span class="line">    <span class="keyword">private</span> MongoProperties mongoProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"mongoDB2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MongoTemplate <span class="title">db2Template</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MongoTemplate(db2Factory(mongoProperties));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MongoDbFactory <span class="title">db2Factory</span><span class="params">(MongoProperties mongoProperties)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleMongoDbFactory(<span class="keyword">new</span> MongoClient(mongoProperties.getHost(),mongoProperties.getPort()),mongoProperties.getDatabase());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DB2Repository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">MongoDB2</span>,<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>省略<code>DB1Template</code>的配置，基本上都是差不多的</p><h2 id="一般使用"><a href="#一般使用" class="headerlink" title="一般使用"></a>一般使用</h2><p>上述的配置如果都OK的话，则可以直接使用<code>@Autowired</code>注解使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DB2Repository db2Repository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DB1Repository db1Repository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mongoUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        db2Repository.save(<span class="keyword">new</span> MongoDB2());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是使用AOP的方式的话，切<code>Service</code>还是<code>Repository</code>是需要选择的，首先因为在业务使用中，肯定是包含许多的<code>Service</code>的，如果以后需要再添加其他的<code>Service</code>，还需要添加切点，比较麻烦。</p><p>如果是切<code>Repository</code>的话，那么这就好办了，直接配置一个主Repository，然后切这个主Repository，这样就可以将Service和AOP进行解耦。从而在Service里面，可以随意使用其他的数据源，例如:Mysql数据源，Redis数据源等。更加灵活</p><h2 id="切面写法"><a href="#切面写法" class="headerlink" title="切面写法"></a>切面写法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order</span>(-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoAspect</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.somersames.config.mongo.db2.DB2Repository.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doSwitch</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aopTest1(joinPoint);</span><br><span class="line"><span class="comment">//        aopTest2(joinPoint);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">aopTest1</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Field methodInvocationField = joinPoint.getClass().getDeclaredField(<span class="string">"methodInvocation"</span>);</span><br><span class="line">        methodInvocationField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        ReflectiveMethodInvocation o = (ReflectiveMethodInvocation) methodInvocationField.get(joinPoint);</span><br><span class="line">        Field targetField = o.getClass().getDeclaredField(<span class="string">"target"</span>);</span><br><span class="line">        targetField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object target = targetField.get(o);</span><br><span class="line">        Field modifiersField = Field.class.getDeclaredField(<span class="string">"modifiers"</span>);</span><br><span class="line">        modifiersField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object singletonTarget = AopProxyUtils.getSingletonTarget(target);</span><br><span class="line">        Field mongoOperationsField = singletonTarget.getClass().getDeclaredField(<span class="string">"mongoOperations"</span>);</span><br><span class="line">        mongoOperationsField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//需要移除final修饰的变量</span></span><br><span class="line">        modifiersField.setInt(mongoOperationsField,mongoOperationsField.getModifiers()&amp;~Modifier.FINAL);</span><br><span class="line">        mongoOperationsField.set(singletonTarget, applicationContext.getBean(<span class="string">"mongoDB1"</span>));</span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">aopTest2</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Field methodInvocationField = joinPoint.getClass().getDeclaredField(<span class="string">"methodInvocation"</span>);</span><br><span class="line">        methodInvocationField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        ReflectiveMethodInvocation o = (ReflectiveMethodInvocation) methodInvocationField.get(joinPoint);</span><br><span class="line">        Field h = o.getProxy().getClass().getSuperclass().getDeclaredField(<span class="string">"h"</span>);</span><br><span class="line">        h.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        AopProxy aopProxy = (AopProxy) h.get(o.getProxy());</span><br><span class="line">        Field advised = aopProxy.getClass().getDeclaredField(<span class="string">"advised"</span>);</span><br><span class="line">        advised.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object o2 = advised.get(aopProxy);</span><br><span class="line">        <span class="keyword">if</span> (o2 <span class="keyword">instanceof</span> Advised) &#123;</span><br><span class="line">            Object o1 = ((Advised) o2).getTargetSource().getTarget();</span><br><span class="line">            Object o3 = AopProxyUtils.getSingletonTarget(o1);</span><br><span class="line">            System.out.println(o3);</span><br><span class="line">            Field mongoOperationsField = o3.getClass().getDeclaredField(<span class="string">"mongoOperations"</span>);</span><br><span class="line">            mongoOperationsField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Field modifiersField = Field.class.getDeclaredField(<span class="string">"modifiers"</span>);</span><br><span class="line">            modifiersField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//需要移除final修饰的变量</span></span><br><span class="line">            modifiersField.setInt(mongoOperationsField, mongoOperationsField.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">            mongoOperationsField.set(o3, applicationContext.getBean(<span class="string">"mongoDB1"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(org.springframework.context.ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述的代码中，提供了两种的AOP的写法，但是最终都是获取<code>mongoOperations</code>，然后通过<code>applicationContext</code>来替换。</p><p>对比AOP的Redis写法，这里可以看到在Spring中的<code>AOP</code>实现，最起码使用<code>JDK动态代理</code>和<code>Cglib</code>。所以在本文中，使用的是</p><blockquote><p>Field h = o.getProxy().getClass().getSuperclass().getDeclaredField(“h”);</p></blockquote><p>这个就是获取JDK动态代理的对象</p><p>至此，mongo的两种代理方式9最初版的代码编写完毕，后续可能需要对代码进行优化，从而避免每一次修改<code>application.yml</code>都需要手动添加<code>Repository</code></p><p>完整代码可以访问<a href="https://github.com/Somersames/Multi-Resource" target="_blank" rel="noopener">https://github.com/Somersames/Multi-Resource</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在之前的一片文章中介绍了使用AOP的方式来实现Redis的多数据源切换。而今天这一篇则是主要讲述&lt;code&gt;Mongo&lt;/code&gt;的多数据源切换。&lt;/p&gt;
&lt;p&gt;使用AOP来实现Mongo的数据源切换与Redis的AOP切换相同，不同之处是需要替换&lt;code&gt;MongoR
      
    
    </summary>
    
      <category term="Springboot" scheme="https://somersames.github.io/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://somersames.github.io/tags/Springboot/"/>
    
      <category term="Mongo" scheme="https://somersames.github.io/tags/Mongo/"/>
    
  </entry>
  
  <entry>
    <title>Spring中AOP的探索与实践(一)之Redis多数据源切换</title>
    <link href="https://somersames.github.io/2019/03/12/Spring%E4%B8%ADAOP%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5(%E4%B8%80)%E4%B9%8BRedis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/"/>
    <id>https://somersames.github.io/2019/03/12/Spring中AOP的探索与实践(一)之Redis多数据源切换/</id>
    <published>2019-03-11T16:16:00.000Z</published>
    <updated>2019-06-08T15:06:14.255Z</updated>
    
    <content type="html"><![CDATA[<p>一般在项目的使用过程中，有时候为了减轻数据库的压力，从而将一部分数据缓存至Redis，但是随着业务量的增多。我们所需要的Redis服务器也会越来越多，就算不需要多个Redis数据源，那么在一个redis里面，切换不同的DB也是很麻烦的一件事情。</p><h2 id="非AOP的一般的多数据源操作"><a href="#非AOP的一般的多数据源操作" class="headerlink" title="非AOP的一般的多数据源操作"></a>非AOP的一般的多数据源操作</h2><p>在Redis的多数据源使用中，一般的方法是从配置文件中读取多个<code>RedisProperties</code>，读取到配置文件之后，将<code>RedisProperties</code>配置到<code>RedisTemplate</code>，然后每次使用的时候就通过不同的<code>Template</code>来调用Redis服务器。示例如下:</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="Redis的配置类"><a href="#Redis的配置类" class="headerlink" title="Redis的配置类"></a>Redis的配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"redis1"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function">JedisConnectionFactory <span class="title">jedisConnectionFactory1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JedisConnectionFactory jedisConnectionFactory =<span class="keyword">new</span> JedisConnectionFactory();</span><br><span class="line">        jedisConnectionFactory.setHostName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        jedisConnectionFactory.setPort(<span class="number">6379</span>);</span><br><span class="line">        jedisConnectionFactory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        jedisConnectionFactory.setDatabase(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> jedisConnectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"redis2"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.redis.db1"</span>)</span><br><span class="line">    <span class="function">JedisConnectionFactory <span class="title">jedisConnectionFactory2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JedisConnectionFactory jedisConnectionFactory =<span class="keyword">new</span> JedisConnectionFactory();</span><br><span class="line">        jedisConnectionFactory.setHostName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        jedisConnectionFactory.setPort(<span class="number">6379</span>);</span><br><span class="line">        jedisConnectionFactory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        jedisConnectionFactory.setDatabase(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> jedisConnectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(jedisConnectionFactory1());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(jedisConnectionFactory2());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的配置类里面，分别生成了两个<code>JedisConnectionFactory</code>和两个<code>RedisTemplate</code>，那么在使用的时候直接通过注解<code>@Autowired</code>装配两个<code>RedisTemplate</code>即可。</p><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCommonService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate&lt;String,Object&gt; redisTemplate ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate&lt;String,Object&gt; redisTemplate2 ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redis1Save</span><span class="params">(String key,String value)</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redis1Save2</span><span class="params">(String key,String value)</span> </span>&#123;</span><br><span class="line">        redisTemplate2.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">RestController</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCommonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisCommonService redisCommonService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/redis1"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redis1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redisCommonService.redis1Save(<span class="string">"1"</span>,<span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/redis2"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redis2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redisCommonService.redis1Save2(<span class="string">"2"</span>,<span class="string">"3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在Redis的服务器上可以看到<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/Redis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90.png" alt=""></p><p>可以看到两个数据分别写入到了不同的Db中</p><h2 id="通过AOP的调用"><a href="#通过AOP的调用" class="headerlink" title="通过AOP的调用"></a>通过AOP的调用</h2><p>通过AOP方法调用的基础是需要获取<code>RedisTemplate</code>里面的<code>JedisConnectionFactory</code><br>切面代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"execution(* com.somersames.service.redis.RedisService.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">as</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Field methodInvocationField = joinPoint.getClass().getDeclaredField(<span class="string">"methodInvocation"</span>);</span><br><span class="line">        System.out.println(AopUtils.isAopProxy(joinPoint.getTarget()));</span><br><span class="line">        methodInvocationField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        ReflectiveMethodInvocation o = (ReflectiveMethodInvocation) methodInvocationField.get(joinPoint);</span><br><span class="line">        Field h = o.getProxy().getClass().getDeclaredField(<span class="string">"CGLIB$CALLBACK_0"</span>);</span><br><span class="line">        h.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object dynamicAdvisedInterceptor = h.get(o.getProxy());</span><br><span class="line">        Field advised = dynamicAdvisedInterceptor.getClass().getDeclaredField(<span class="string">"advised"</span>);</span><br><span class="line">        advised.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Object target = ((AdvisedSupport)advised.get(dynamicAdvisedInterceptor)).getTargetSource().getTarget();</span><br><span class="line">        Field re = target.getClass().getDeclaredField(<span class="string">"redisTemplate"</span>);</span><br><span class="line">        re.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object re2= re.get(target);</span><br><span class="line"></span><br><span class="line">        Field d =  re2.getClass().getSuperclass().getDeclaredField(<span class="string">"connectionFactory"</span>);</span><br><span class="line">        d.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object[] objs = joinPoint.getArgs();</span><br><span class="line">        <span class="keyword">if</span>(objs != <span class="keyword">null</span> &amp;&amp; objs.length !=<span class="number">0</span>)&#123;</span><br><span class="line">            re.set(target,applicationContext.getBean((String) objs[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="RedisServer"><a href="#RedisServer" class="headerlink" title="RedisServer"></a>RedisServer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aopRedis</span><span class="params">(String reditTemplate)</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"a"</span>,<span class="string">"a"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的代码也很简单，就是获取<code>RedisServer</code>的<code>aopRedis</code>方法的第一个参数，然后通过AOP将其替换为指定的Redis连接。测试如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisService redisService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/redis"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCurd1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redisService.aopRedis(<span class="string">"redisTemplate2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在<code>AopController</code>里面，我想通过<code>redisTemplate2</code>来执行<code>aopRedis</code>方法。<br>但是在<code>RedisService</code>里面，我们又是配置的是Redis连接数据源1，那么如何</p><blockquote><p>RedisTemplate&lt;String,Object&gt; redisTemplate;</p></blockquote><p>这个时候，我们可以通过切面，直接替换RedisTemplate的连接，从而获取指定的Redis连接，测试如下：<br>启动服务。<br>访问<code>http://localhost:8080/redis</code>。</p><p>在不开启切面的情况下，可以看到直接访问的是<code>0</code>号库，而开启切面之后，在调用<code>RedisService</code>的时候，由于切面将RedisTemplate的<code>connectionFactory</code>替换为2号库，所以访问结果如下:<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/RedisAo.png" alt=""></p><p>本篇文章只是简单的介绍了下AOP的使用，下面几篇可能会基于这篇文章做一些AOP补充和增加一些其他功能。例如：添加Redis的AOP的自动切换，同时添加多个Redis数据源的自动注入，不再手动写Bean。<br>然后会可能基于Mongo的多数据源来讲解AOP的不同代理获取方式，和一般通用的获取方式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一般在项目的使用过程中，有时候为了减轻数据库的压力，从而将一部分数据缓存至Redis，但是随着业务量的增多。我们所需要的Redis服务器也会越来越多，就算不需要多个Redis数据源，那么在一个redis里面，切换不同的DB也是很麻烦的一件事情。&lt;/p&gt;
&lt;h2 id=&quot;非A
      
    
    </summary>
    
      <category term="Springboot" scheme="https://somersames.github.io/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://somersames.github.io/tags/Springboot/"/>
    
      <category term="Redis" scheme="https://somersames.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>使用Mq实现延时队列</title>
    <link href="https://somersames.github.io/2019/03/04/%E4%BD%BF%E7%94%A8Mq%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/"/>
    <id>https://somersames.github.io/2019/03/04/使用Mq实现延时队列/</id>
    <published>2019-03-03T16:30:53.000Z</published>
    <updated>2019-06-08T15:06:14.266Z</updated>
    
    <content type="html"><![CDATA[<p>在实际的应用开发中，下游系统并不需要立即处理上游系统的mq，但是又不可能将消息阻塞在上有系统中。且这两个系统之间又没有接口提供出来。这个时候就需要通过Mq的死信队列来实现一个延时效果</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>由于Mq的发送方不支持延迟发送(<strong>目前的新版本可以使用插件来支持，但是可能由于公司的其他限制，导致无法升级</strong>)，这时候就需要使用Mq的死信队列来实现延时队列</p><p>一般情况下，Mq的发送流程如下：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/Mq%E4%B8%80%E8%88%AC%E6%B5%81%E7%A8%8B.png" alt=""></p><h2 id="Mq的死信队列"><a href="#Mq的死信队列" class="headerlink" title="Mq的死信队列"></a>Mq的死信队列</h2><p>在Mq的使用中，死信队列用于处理一下三种情况：</p><blockquote><ol><li>The message is negatively acknowledged by a consumer using basic.reject or basic.nack with requeue parameter  set to false</li><li>The message expires due to TTL; or</li><li>The message is dropped because its queue exceeded a length limit</li></ol></blockquote><p>上述三种情况分别是</p><ol><li>消费者拒绝了该Mq，同时消费者也设置该消息不重新入队。</li><li>消息过期，即无人消费</li><li>队列设置了长度，同时队列已满</li></ol><p>由于Mq不支持消息的延迟发送，即消息一经投递，就会马上入队，到达交换机。然后根据交换机的属性，进行投递。</p><p>这样就带来了一个问题，如果发送方需要消费者等待一定的时间才能进行消费。如果不经由死信队列，那么只能在发送方做等待。</p><p>例如使用<code>Thread.sleep()</code>来实现，由于<code>Sleep</code>方法是阻塞的，所以这样做又会影响到性能。又或者通过定时任务来实现，但是定时任务每一次又要去取出该发送的Mq，然后再发出去，这样就会非常的影响到效率。</p><h2 id="死信队列实现延迟队列"><a href="#死信队列实现延迟队列" class="headerlink" title="死信队列实现延迟队列"></a>死信队列实现延迟队列</h2><p>通过Rabbitmq的死信转发转发规则2，便可以实现一个延时队列。具体流程如下：<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/Mqexpire.png" alt=""></p><p>这里实现的关键是讲消费队列设置为<code>DLK</code>,<code>TTL</code>,<code>DLX</code>，具体如下：<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/Mqmanage.png" alt=""></p><p>在上图里面，可以看到<code>Tutorials</code>是一个消费队列，同时已经设置了它的死信转发规则。而<code>dTutorials</code>是一个死信队列，这个队列就是用于存放死信队列</p><h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">    ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"></span><br><span class="line">    factory.setHost(HOST);</span><br><span class="line">    factory.setUsername(USER);</span><br><span class="line">    factory.setPassword(PASSWORD);</span><br><span class="line">    factory.setPort(<span class="number">5672</span>);</span><br><span class="line">    factory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个连接</span></span><br><span class="line">    connection = factory.newConnection();</span><br><span class="line"></span><br><span class="line">    channel = connection.createChannel();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在这里分别新建两个Exchange，一个是死信的Exchange，一个是消费者的Exchange</span></span><br><span class="line">    channel.exchangeDeclare(exchangeName,<span class="string">"direct"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">    channel.exchangeDeclare(dExchangeName,<span class="string">"direct"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] bytes  =messgae.getBytes();</span><br><span class="line">    <span class="comment">//声明一个队列 - 持久化，同时设置死信的转发Exchange和Queue。以及消息的过期时间</span></span><br><span class="line">    Map&lt;String,Object&gt; args = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    args.put(<span class="string">"x-dead-letter-exchange"</span>,dExchangeName);</span><br><span class="line">    args.put(<span class="string">"x-dead-letter-routing-key"</span>,routingKey);</span><br><span class="line">    args.put(<span class="string">"x-message-ttl"</span>,<span class="number">2000</span>);</span><br><span class="line">    channel.queueDeclare(queueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, args);</span><br><span class="line">    channel.queueDeclare(dQueeueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置通道预取计数</span></span><br><span class="line">    channel.basicQos(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将消息队列绑定到Exchange</span></span><br><span class="line">    channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line">    channel.queueBind(dQueeueName, dExchangeName, routingKey);</span><br><span class="line">    channel.basicPublish(exchangeName, routingKey, <span class="keyword">null</span>, bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"></span><br><span class="line">        factory.setHost(HOST);</span><br><span class="line">        factory.setUsername(USER);</span><br><span class="line">        factory.setPassword(PASSWORD);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明一个连接</span></span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明消息通道</span></span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//在这里消费者直接消费死信队列即可</span></span><br><span class="line">        channel.queueBind(dQueueName, dExchangeName, routingKey);</span><br><span class="line">        DefaultConsumer defaultConsumer =<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String str = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(str);</span><br><span class="line">                System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"测试"</span>.equals(str))&#123;</span><br><span class="line">                    channel.basicReject(envelope.getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(dQueueName,defaultConsumer);</span><br></pre></td></tr></table></figure><p>下图中可以看到，消费者总是在2秒钟之后收到了发送方发送的消息，这时一个延时队列就实现了</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/GIF2.gif" alt=""></p><h2 id="详细代码连接"><a href="#详细代码连接" class="headerlink" title="详细代码连接"></a>详细代码连接</h2><p>具体的代码以上传至Github:<a href="https://github.com/Somersames/MqTutorials" target="_blank" rel="noopener">https://github.com/Somersames/MqTutorials</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在实际的应用开发中，下游系统并不需要立即处理上游系统的mq，但是又不可能将消息阻塞在上有系统中。且这两个系统之间又没有接口提供出来。这个时候就需要通过Mq的死信队列来实现一个延时效果&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Rabbitmq" scheme="https://somersames.github.io/categories/Rabbitmq/"/>
    
    
      <category term="Rabbitmq" scheme="https://somersames.github.io/tags/Rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>在Mysql中使用变量进行复杂的查询(一)</title>
    <link href="https://somersames.github.io/2019/02/27/%E5%9C%A8Mysql%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F%E8%BF%9B%E8%A1%8C%E5%A4%8D%E6%9D%82%E7%9A%84%E6%9F%A5%E8%AF%A2(%E4%B8%80)/"/>
    <id>https://somersames.github.io/2019/02/27/在Mysql中使用变量进行复杂的查询(一)/</id>
    <published>2019-02-26T16:06:07.000Z</published>
    <updated>2019-06-08T15:06:14.271Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注意，此文章使用的Mysql变量均是用户变量</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首先看一个需求，有如下数据表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1 order by area_id;</span><br><span class="line">+<span class="comment">---------+-----------+</span></span><br><span class="line">| area_id | order_num |</span><br><span class="line">+<span class="comment">---------+-----------+</span></span><br><span class="line">|       1 |        22 |</span><br><span class="line">|       1 |        10 |</span><br><span class="line">|       1 |        10 |</span><br><span class="line">|       2 |        10 |</span><br><span class="line">|       2 |        10 |</span><br><span class="line">|       2 |        22 |</span><br><span class="line">|       3 |        10 |</span><br><span class="line">+<span class="comment">---------+-----------+</span></span><br><span class="line">7 rows in <span class="keyword">set</span> (<span class="number">0.14</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到，这是一个很非常普通的数据表。</p><h2 id="需求一"><a href="#需求一" class="headerlink" title="需求一"></a>需求一</h2><p>假设某一次运营需要统计每一个地区的销量量，让你出一个报表给他，那么方法如下：</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>统计每一个地区的总销量：<br>常用SQL如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select t1.area_id, sum(t1.order_num) from t1 group by area_id;</span><br><span class="line">+<span class="comment">---------+-------------------+</span></span><br><span class="line">| area_id | sum(t1.order_num) |</span><br><span class="line">+<span class="comment">---------+-------------------+</span></span><br><span class="line">|       1 | 42                |</span><br><span class="line">|       2 | 42                |</span><br><span class="line">|       3 | 10                |</span><br><span class="line">+<span class="comment">---------+-------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.14</span> sec)</span><br></pre></td></tr></table></figure></p><p>从图中可以看到，该SQL已经可以把每个地区的销售总量全部统计完毕了。但是有一天，需求又变了。</p><h2 id="需求二："><a href="#需求二：" class="headerlink" title="需求二："></a>需求二：</h2><p>现在其他的运营也过来了，说需要按照区域的Id做为优先级，依次统计每一个优先级地区的总销量。即如下：</p><ol><li>地区1的销量为42，由于没有地区Id为0的，所以地区1的销量是42。</li><li>地区2的销量为42，但是由于地区2的优先级高于1，所以地区2的销量需要包含地区1的销量</li><li>地区3的销量为42，但是由于地区3的优先级高于1和2，所以地区3的销量需要包含地区1的销量和地区2的销量</li></ol><p>此时你会发现，虽然可以进行<code>groupby</code>，但是却无法统计之前的累加和，此时<code>Mysql</code>变量就可以使用了</p><h3 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一:"></a>方法一:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT</span><br><span class="line">r1.area_id,</span><br><span class="line">@t_total := @t_total + r1.total AS &apos;t_total&apos; </span><br><span class="line">FROM</span><br><span class="line">( SELECT @t_total := 0 ) r,</span><br><span class="line">( SELECT t1.area_id, sum( t1.order_num ) AS &apos;total&apos; FROM t1 GROUP BY area_id ) r1 order by r1.area_id;</span><br><span class="line">+---------+---------+</span><br><span class="line">| area_id | t_total |</span><br><span class="line">+---------+---------+</span><br><span class="line">|       1 |      42 |</span><br><span class="line">|       2 |      84 |</span><br><span class="line">|       3 |      94 |</span><br><span class="line">+---------+---------+</span><br><span class="line">3 rows in set (0.18 sec)</span><br></pre></td></tr></table></figure><p>由于需求是需要高一级的地区需要统计所以低一级地区的销量，所以此时这个需求已经完成了。</p><p>此时查看<code>SQL</code>的效果，会发现，地区2的销量已经包含了地区1的，而地区3的销量已经包含了地区1和地区2的，所以该条<code>SQL</code>已经符合运营的需求了。</p><h3 id="Mysql变量的初步使用"><a href="#Mysql变量的初步使用" class="headerlink" title="Mysql变量的初步使用"></a>Mysql变量的初步使用</h3><p>在上面的这条SQL中，可以看到出现了<code>@t_total</code>这个变量，同时也出现了<code>:=</code>操作符，这就是Mysql的变量。</p><h2 id="需求三"><a href="#需求三" class="headerlink" title="需求三"></a>需求三</h2><p>现在运营发现，这样统计的话有点问题，需要进行调整下：</p><ol><li>地区1的销量为42，不能包含自身的销量，于是只能统计比1小的地区，所以地区1的销量是0。</li><li>地区2的销量为42，不能包含自身的销量，于是只能统计比2小的地区，所以地区1的销量是42。</li><li>地区2的销量为10，不能包含自身的销量，于是只能统计比3小的地区，所以地区3的销量是84。</li><li></li></ol><h3 id="方法一-2"><a href="#方法一-2" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT</span><br><span class="line">r1.area_id,</span><br><span class="line">@t_total := @t_total + r1.total AS 't_total',</span><br><span class="line">@before_total := @t_total - r1.total AS 'before_total' </span><br><span class="line">FROM</span><br><span class="line">( <span class="keyword">SELECT</span> @t_total := <span class="number">0</span> ) r,</span><br><span class="line">( <span class="keyword">SELECT</span> @before_total := <span class="number">0</span> ) rr,</span><br><span class="line">( <span class="keyword">SELECT</span> t1.area_id, <span class="keyword">sum</span>( t1.order_num ) <span class="keyword">AS</span> <span class="string">'total'</span> <span class="keyword">FROM</span> t1 <span class="keyword">GROUP</span> <span class="keyword">BY</span> area_id ) r1;</span><br><span class="line">+<span class="comment">---------+---------+--------------+</span></span><br><span class="line">| area_id | t_total | before_total |</span><br><span class="line">+<span class="comment">---------+---------+--------------+</span></span><br><span class="line">|       1 |      42 |            0 |</span><br><span class="line">|       2 |      84 |           42 |</span><br><span class="line">|       3 |      94 |           84 |</span><br><span class="line">+<span class="comment">---------+---------+--------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.16</span> sec)</span><br></pre></td></tr></table></figure><p>此时会看到<code>before_total</code>字段完美的符合和需求三。</p><h2 id="Mysql变量"><a href="#Mysql变量" class="headerlink" title="Mysql变量"></a>Mysql变量</h2><p>通过需求二和需求三可以看到Mysql的变量使用技巧，在Mysql中，使用变量可以实现很多复杂的需求。但是在使用Mysql变量的时候需要注意，用户变量需要配合<code>Select</code>一起来使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;注意，此文章使用的Mysql变量均是用户变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;首先看一个需求，有如下数据
      
    
    </summary>
    
      <category term="Mysql" scheme="https://somersames.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://somersames.github.io/tags/Mysql/"/>
    
  </entry>
  
</feed>
