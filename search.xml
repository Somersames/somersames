<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>JDK1.7中的ConcurrentHashMap实现细节(二)</title>
      <link href="/2019/09/15/JDK1-7%E4%B8%AD%E7%9A%84ConcurrentHashMap%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/"/>
      <url>/2019/09/15/JDK1-7%E4%B8%AD%E7%9A%84ConcurrentHashMap%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在JDK1.7向JDK1.8升级的过程中，<code>ConcurrentHashMap</code>由原来的可重入锁和<code>CAS</code>锁直接被替换为<code>synchronized</code>关键字了，虽然说在功能上都是完全一致的，但是在这里一直都有一个疑惑，既然在1.7的使用过程中没什么问题，那到底是出于什么原因要将其替换呢。</p><h2 id="JDK1-7中的ConcurrentHashMap"><a href="#JDK1-7中的ConcurrentHashMap" class="headerlink" title="JDK1.7中的ConcurrentHashMap"></a>JDK1.7中的ConcurrentHashMap</h2><p>在JDK1.7中，其结构是由一个可重入锁<code>Segment</code>数组和每一个节点下的<code>HashEntry</code>数组来实现的。结构图如下:<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/1.7ConcurrentHashMap.png" alt=""></p><p>由于 segment 是一个锁，所以如果在并发的过程中，多个线程尝试向一个 segment 中的 HashEntry 进行插入的时候，只能有一个线程会获取到锁，其他的线程会被阻塞直至锁被释放，所以这个容器是一个并发安全的。</p><!--那么为什么是一个可重入锁呢，--><p>查看 put 方法的调用链的时候，可以发现最终都是调用的是<code>Segment</code>的<code>put</code>方法。</p><p><code>segment</code> 类在 <code>ConCurrentHashMap</code> 中的变量是以一个数组的形式所存在的，由于<code>segment</code>继承了 ReentrantLock ，所以是它也是一个可重入锁，因此在<code>JDK1.7</code>里面，是通过 <code>segment</code>的 重入锁机制来实现并发的写入。同时也可以发现如果调用的是<code>ConcurrentHashMap</code>的无参构造函数的话，那么初始化<code>Segment</code>数组大小就是16，当然这个数组大小其实是可以被调整的，但是无论怎样进行调整，最终 segment 数组的大小永远都是2的n次方。</p><h2 id="Segment"><a href="#Segment" class="headerlink" title="Segment"></a>Segment</h2><p>在<code>ConcurrentHashMap</code>里面，一个<code>segment</code>就是一个<code>HashEntry</code>的数组，而一个<code>HashEntry</code>就是一个<code>bucket</code>。</p><blockquote><p>但是需要注意的是，ConcurrentHashMap 默认的 segment 数组的大小是16，也就是说最多只可能有16个线程同时进行处理</p></blockquote><p>当调用 put 方法的时候，会通过一个可重入锁的 CAS 操作来尝试获取该 segment 锁，如果获取到了则直接新建一个 Node 节点，如果还未获取到则直接调用<code>scanAndLockForPut</code>方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> HashEntry&lt;K,V&gt; <span class="title">scanAndLockForPut</span><span class="params">(K key, <span class="keyword">int</span> hash, V value)</span> </span>&#123;</span><br><span class="line">    HashEntry&lt;K,V&gt; first = entryForHash(<span class="keyword">this</span>, hash);</span><br><span class="line">    HashEntry&lt;K,V&gt; e = first;</span><br><span class="line">    HashEntry&lt;K,V&gt; node = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> retries = -<span class="number">1</span>; <span class="comment">// negative while locating node</span></span><br><span class="line">    <span class="keyword">while</span> (!tryLock()) &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt; f; <span class="comment">// to recheck first below</span></span><br><span class="line">        <span class="keyword">if</span> (retries &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="comment">// speculatively create node</span></span><br><span class="line">                    node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                retries = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(e.key))</span><br><span class="line">                retries = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                e = e.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (++retries &gt; MAX_SCAN_RETRIES) &#123;</span><br><span class="line">            lock();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((retries &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                 (f = entryForHash(<span class="keyword">this</span>, hash)) != first) &#123;</span><br><span class="line">            e = first = f; <span class="comment">// re-traverse if entry changed</span></span><br><span class="line">            retries = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="scanAndLockForPut方法的作用"><a href="#scanAndLockForPut方法的作用" class="headerlink" title="scanAndLockForPut方法的作用"></a>scanAndLockForPut方法的作用</h3><p>在这个方法里面，会在 while 循环里面尝试 64 次，而且可以看到在这个循环语句里面有一些细节的操作。具体如下：</p><ul><li>判断当前头节点 first 是否为 null，是的话则初始化 node </li><li>如果 first 不是 null，判断当前的 key 是否和 first 相等</li><li>如果 first 即不为null，并且当前的 key 又不和入参的key相同，则直接寻找其 next 节点，直至 next 为null，然后进行第一步</li></ul><p>其实上面的一些步骤仅仅是该方法循环的第一步要做的，当上述三个步骤都进行完毕之后，首先会判断循环的次数是否已经大于 <code>MAX_SCAN_RETRIES</code> 如果是的话，则直接调用 <code>lock</code> 方法，如果不是的话则调用第三个判断。</p><p>第三个判断中会判断当前循环次数是不是偶数，如果是的话则会判断当前的头节点还是不是之前的first，如果不是的话则需要重新将新的头节点赋值给 first 然后将循环次数改成1，再次重试。</p><p>其实这个方法如果仔细看看，你会发现貌似没啥作用，因为返回的是 node，但是 node 一旦第一次被赋值之后，以后便不会做任何的更改，所以正如该方法的注释所说的一样，<strong>这个方法仅仅是为 JVM 做一个预热而已</strong>。</p><h3 id="继续获取锁"><a href="#继续获取锁" class="headerlink" title="继续获取锁"></a>继续获取锁</h3><p>如果在 64 次以内还是未获取到该锁，则会调用<code>lock</code>方法，由于 ConcurrentHashMap 在初始化 segment 的时候，并未显式调用<code>ReentrantLock</code>的构造方法，而 ReentrantLock 又是默认初始化非公平锁，所以此时在 scanAndLockForPut 里面的 lock 其实调用的是 NonfairSync 里面的 lock 方法，即再次以非公平锁的方式来尝试获取锁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当最后一次如果 CAS 操作还未获取到锁的时候，segment 就会调用<strong>acquire(1)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里可以看到的是 if 判断里面还是会再次尝试获取锁，当还未获取到锁的时候，就将该 Node 放入到 FIFO 队列的末尾，然后等待着被唤醒执行</p><p>从上面的一个流程不难看出，在 segment 首先会以可重入锁的方式来尝试性的获取锁，当没取到的时候会<strong>while循环</strong>64次做一个预热，如果在循环的过程中还是未获取到锁，则会进行两次<code>CAS</code>操作(分别在两个不同的方法里面)，如果最终还是无法获取到锁的话，那么此时就会将自己放入到 AQS 中的 FIFO 队列。</p><p>回过头来再看 segment 里面的第一行代码：</p><blockquote><p>HashEntry&lt;K,V&gt; node = tryLock() ? null : scanAndLockForPut(key, hash, value);</p></blockquote><p>那么可以看到的是，在JDK1.7里面，put方法如果在大量并发的情况下，如果要获取一个锁会进行非常多的操作，而且它默认的 segment 数组大小还是 16 ，也就是说map的所有键值，出现碰撞的概率不是 1/map.size()，而永远是 1/16。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Leetcode数组中连续分组</title>
      <link href="/2019/09/08/Leetcode%E6%95%B0%E7%BB%84%E4%B8%AD%E8%BF%9E%E7%BB%AD%E5%88%86%E7%BB%84/"/>
      <url>/2019/09/08/Leetcode%E6%95%B0%E7%BB%84%E4%B8%AD%E8%BF%9E%E7%BB%AD%E5%88%86%E7%BB%84/</url>
      <content type="html"><![CDATA[<p>在Leetcode上有一道题目，如下：</p><blockquote><p>In a deck of cards, each card has an integer written on it.<br>  Return true if and only if you can choose X &gt;= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:<br>  Each group has exactly X cards.<br>  All the cards in each group have the same integer.</p></blockquote><p>这一题就是一个求最大公约数的题目，当任意两组的公约数为1的时候，那么此时就说明，他们的分组数量不相等就可以直接返回false了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasGroupsSizeX</span><span class="params">(<span class="keyword">int</span>[] deck)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10000</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> val : deck)&#123;</span><br><span class="line">            count[val]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> val: deck)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum == -<span class="number">1</span>)&#123;</span><br><span class="line">                sum = count[val];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum = getGcd(sum,count[val]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql的幻读(二)</title>
      <link href="/2019/08/27/mysql%E7%9A%84%E5%B9%BB%E8%AF%BB-%E4%BA%8C/"/>
      <url>/2019/08/27/mysql%E7%9A%84%E5%B9%BB%E8%AF%BB-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在InnoDB里面，是通过快照读来实现<code>RC</code>和<code>PR</code>隔离级别的区分，因为在<code>RC</code>隔离级别下，每一次的select都是一个快照读，所以是可以读取到已经提交的数据，从而导致幻读。所以在<code>RC</code>隔离级别下，快照读和当前读都是可以出现幻读。</p><p>但是在<code>PR</code>的隔离级别下，由于快照读仅仅只生成一次，所以在<code>PR</code>级别下的快照读是无法出现幻读的，但是当前读确实可以出现幻读。</p><p>查看Mysql官方对于<code>幻读</code>的定义。</p><blockquote><p>The so-called phantom problem occurs within a transaction when the same query produces different sets of rows at different times. </p></blockquote><p>也就是说一个事物同一条查询语句查询出来了两个不同的集合就可以称之为幻读。</p><h3 id="ANSI-SQL-隔离级别"><a href="#ANSI-SQL-隔离级别" class="headerlink" title="ANSI SQL 隔离级别"></a>ANSI SQL 隔离级别</h3><p>在<code>ANSI SQL 隔离级别</code>的定义中<code>PR</code>级别是可以出现幻读的。<br>但是在InnoDB引擎里面自己通过<code>GAP锁</code>和<code>Next-Key锁</code>使得<code>PR</code>隔离级别下无法出现幻读。原因就在于InnoDB的<code>GAP</code>锁</p><h2 id="GAP锁"><a href="#GAP锁" class="headerlink" title="GAP锁"></a>GAP锁</h2><p>在<code>InnoDB</code>里面，GAP锁是用于防止幻读的一个手段，具体的操作是首先当我们新增一个数据的时候，<code>InnoDB</code>会在此时加一个<code>GAP</code>锁从而防止其他事务对该区间的一些数据操作，导致幻读的出现。</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><h4 id="PR级别："><a href="#PR级别：" class="headerlink" title="PR级别："></a><code>PR</code>级别：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_lock.test;</span><br><span class="line">+---------+-----------+----------------+------------+-------------+</span><br><span class="line">| user_id | user_name | user_password  | is_deleted | phone       |</span><br><span class="line">+---------+-----------+----------------+------------+-------------+</span><br><span class="line">| a       | zhangsan  | 123456         |          0 | 15112345678 |</span><br><span class="line">| b       | lisi      | lisi123456     |          0 | 15112345678 |</span><br><span class="line">| c       | wangwu    | wangwu123456   |          0 | 15112345678 |</span><br><span class="line">| d       | caocao    | caocao123456   |          0 | 15112345678 |</span><br><span class="line">| e       | liubei    | liubei123456   |          0 | 15112345678 |</span><br><span class="line">| f       | zhangfei  | zhangfei123456 |          0 | 15112345678 |</span><br><span class="line">| g       | guanyu    | guanyu123456   |          0 | 15112345678 |</span><br><span class="line">| h       | daqiao    | daqiao123456   |          0 | 15112345678 |</span><br><span class="line">| m       | xiaoqiao  | xiaoqiao123456 |          0 | 15112345678 |</span><br><span class="line">+---------+-----------+----------------+------------+-------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><em>事物一</em>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start transaction ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test_lock.test where  user_id &gt; &apos;g&apos; and user_id &lt; &apos;m&apos; for update ;</span><br><span class="line">+---------+-----------+---------------+------------+-------------+</span><br><span class="line">| user_id | user_name | user_password | is_deleted | phone       |</span><br><span class="line">+---------+-----------+---------------+------------+-------------+</span><br><span class="line">| h       | daqiao    | daqiao123456  |          0 | 15112345678 |</span><br><span class="line">+---------+-----------+---------------+------------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p><em>事物二</em>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start transaction ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into test_lock.`test` values(&apos;i&apos;,&apos;daqiao&apos;,&apos;daqiao123456&apos;,0,&apos;15112345678&apos;);</span><br></pre></td></tr></table></figure></p><p>此时在<code>PR</code>隔离级别下会阻塞。</p><p>此时查看数据库中的锁：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+----------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+------------------------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                         | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE              | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+----------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+------------------------+-------------+-----------+</span><br><span class="line">| INNODB | 140169161014704:1068:140169076344152   |                235275 |        50 |       16 | test_lock     | test        | NULL           | NULL              | NULL       |       140169076344152 | TABLE     | IX                     | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 140169161014704:7:4:14:140169076341272 |                235275 |        50 |       16 | test_lock     | test        | NULL           | NULL              | PRIMARY    |       140169076341272 | RECORD    | X,GAP,INSERT_INTENTION | WAITING     | &apos;m&apos;       |</span><br><span class="line">| INNODB | 140169161013840:1068:140169076338200   |                235274 |        47 |       20 | test_lock     | test        | NULL           | NULL              | NULL       |       140169076338200 | TABLE     | IX                     | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 140169161013840:7:4:14:140169076335256 |                235274 |        47 |       20 | test_lock     | test        | NULL           | NULL              | PRIMARY    |       140169076335256 | RECORD    | X                      | GRANTED     | &apos;m&apos;       |</span><br><span class="line">| INNODB | 140169161013840:7:4:15:140169076335256 |                235274 |        47 |       20 | test_lock     | test        | NULL           | NULL              | PRIMARY    |       140169076335256 | RECORD    | X                      | GRANTED     | &apos;h&apos;       |</span><br><span class="line">+--------+----------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+------------------------+-------------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>可以看到在<code>m</code>列由于<code>GAP</code>锁和<code>INSERT_INTENTION</code>互相冲突，导致<code>事物二</code>无法进行插入</p><blockquote><p>事物一由于进行<code>for update</code>查询，所以会对区间加一个GAP锁<br>事物二由于是新增，所以会加一个插入意向锁<br>由于<code>GAP</code>锁阻塞住了插入意向锁，导致<code>事物二</code>无法进行插入</p></blockquote><p>此时<code>事物二</code>也会在这里阻塞住，而在<code>RC</code>隔离级别下，<code>事物二</code>是不会等待的。<br>但是如果仔细一点，其实这里还可以发现另一个锁，就是插入意向锁<code>INSERT_INTENTION LOCK</code></p><h2 id="INSERT-INTENTION-LOCK"><a href="#INSERT-INTENTION-LOCK" class="headerlink" title="INSERT_INTENTION_LOCK"></a>INSERT_INTENTION_LOCK</h2><p>Mysql官方文档中将<code>INSERT_INTENTION</code>定义为一个<code>GAP</code>锁，但是它的意义和真正的<code>GAP</code>锁之间是有天大的差别的，<code>INSERT_INTENTION_LOCK</code>并不会阻塞<code>GAP</code>锁，但相反<code>GAP</code>会阻塞<code>INSERT_INTENTION_LOCK</code>，并且该锁的锁定范围是插入行一直到下一个索引，这一整个区间<br>如下例子：<br><em>事物一</em>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start transaction ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into test_lock.`test` values(&apos;i&apos;,&apos;daqiao&apos;,&apos;daqiao123456&apos;,0,&apos;15112345678&apos;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure></p><p><em>事物二</em>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start transaction ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_lock.`test` set user_id=&apos;l&apos;  where  user_id = &apos;k&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 0  Changed: 0  Warnings: 0</span><br></pre></td></tr></table></figure></p><p>此时查看事物中锁：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+----------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                         | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+----------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| INNODB | 140169161014704:1068:140169076344152   |                235293 |        50 |       48 | test_lock     | test        | NULL           | NULL              | NULL       |       140169076344152 | TABLE     | IX        | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 140169161014704:7:4:14:140169076341272 |                235293 |        50 |       48 | test_lock     | test        | NULL           | NULL              | PRIMARY    |       140169076341272 | RECORD    | X,GAP     | GRANTED     | &apos;m&apos;       |</span><br><span class="line">| INNODB | 140169161013840:1068:140169076338200   |                235288 |        47 |       32 | test_lock     | test        | NULL           | NULL              | NULL       |       140169076338200 | TABLE     | IX        | GRANTED     | NULL      |</span><br><span class="line">+--------+----------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>可以看到<code>事物二</code>确实已经执行成功了，而且<code>事物一</code>的插入意向锁并未阻塞事物二的插入语句<br>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在Mysql的<code>InnoDB</code>中，幻读的解决方案是采用了一个间隙锁<code>GAP</code>锁来实现的</p>]]></content>
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql中的幻读(一)</title>
      <link href="/2019/08/18/Mysql%E4%B8%AD%E7%9A%84%E5%B9%BB%E8%AF%BB-%E4%B8%80/"/>
      <url>/2019/08/18/Mysql%E4%B8%AD%E7%9A%84%E5%B9%BB%E8%AF%BB-%E4%B8%80/</url>
      <content type="html"><![CDATA[<h2 id="什么是幻读"><a href="#什么是幻读" class="headerlink" title="什么是幻读"></a>什么是幻读</h2><p>幻读表示的是在一个事物里面 同一个<code>select</code>语句，前后两次查询出来的结果是不相同的，需要注意的一点是，在InnoDB里面，幻读跟事物的隔离级别有关，更加准确的说是跟一个事物的快照和当前读有关</p><p>下面是在Mysql8.0.11版本下进行幻读的复现：</p><ul><li>引擎：InnoDB</li><li>事物隔离级别：Read Commited</li></ul><h3 id="MVCC和快照读以及当前读"><a href="#MVCC和快照读以及当前读" class="headerlink" title="MVCC和快照读以及当前读"></a>MVCC和快照读以及当前读</h3><h4 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h4><p>在介绍MVCC之前先来介绍下MVCC为什么会出现，首先数据库作为一个数据存储工具，那么肯定是存在并发的情况，<br>在Mysql的InnoDB里面最常见的就是<code>x</code>锁，这是一种写锁，在并发的情况下只有一个事务会获取该锁，其他事务则会一直等待直至获取到该锁。</p><p>那么在读取的时候如何保证并发的事物都能正确的读取到自己正确的数据呢？</p><p>在MVCC的概念里面，如果事务的隔离级别是<code>Read Commited</code>的话，那么每一次的快照都都会读取该行的最近一次<code>commited</code>数据，而如果是<code>Repeatable Read</code>的话，则是会读取当前事务ID开始之前的一次<code>commited</code>数据。</p><p>所以MVCC仅仅是作为一个保证数据库并发读情况下的一个数据正确的手段而已，在不同的数据库里面，有不同的实现，例如在<code>OceanBase</code>里面，是通过操作链来解决并发读的问题</p><h4 id="快照读"><a href="#快照读" class="headerlink" title="快照读"></a>快照读</h4><p>快照读是利用MVCC和 <code>undo log</code> 来实现的，其主要作用就是当我们对某行数据修改之后，并不会将原值修改，而是在上一个版本上面再新建一个版本(修改InnoDB的隐藏两列)。<br>所以在不同的隔离级别下，可以根据自己的<code>事物ID</code>来获取自己所需要的数据。当第一条不满足的时候，会沿着<code>undo log</code>一直寻找，在<code>Read Commited</code>隔离级别下就是直接找出该行数据最后一次提交的版本</p><h4 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h4><p>当前读是对数据的加锁读取，读取的都是最新的数据，例如如下SQL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select ... for update</span><br><span class="line">select ... in share mode</span><br><span class="line">insert</span><br><span class="line">update</span><br><span class="line">delete</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>同时也需要注意的一点是，当前读会对涉及到的行都进行加锁</p><h4 id="为什么会有当前读和快找读"><a href="#为什么会有当前读和快找读" class="headerlink" title="为什么会有当前读和快找读"></a>为什么会有当前读和快找读</h4><p>按照Mysql官方的解释，当前读是为了防止其他事物修改你即将进行的操作</p><blockquote><p>If you query data and then insert or update related data within the same transaction, the regular SELECT statement does not give enough protection. Other transactions can update or delete the same rows you just queried. InnoDB supports two types of locking reads that offer extra safety</p></blockquote><h3 id="幻读发生的条件"><a href="#幻读发生的条件" class="headerlink" title="幻读发生的条件"></a>幻读发生的条件</h3><p>首先解释下Mysql官方对于幻读的解释：</p><blockquote><p>The so-called phantom problem occurs within a transaction when the same query produces different sets of rows at different times. For example, if a SELECT is executed twice, but returns a row the second time that was not returned the first time, the row is a “phantom” row.</p></blockquote><p>这里Mysql官方虽然只是给出了对于<code>幻行</code>的定义，但是仍然可以简单解释下，也就是说两次的<code>select</code>前后得到的结果集是不同的，那么新多出来的一行就可以称之为<code>幻行</code></p><p><strong>在这里特别需要注意的是，在PR隔离界别下，只有当前读才会出现幻读</strong></p><h4 id="Read-Commited"><a href="#Read-Commited" class="headerlink" title="Read Commited"></a>Read Commited</h4><p>在<code>Read Commited</code>隔离级别下，每一次的<code>select</code> 都是一次快照读，所以在该隔离级别下，幻读可以在快照读和当前读发生。</p><blockquote><p>事务一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set session transaction isolation level read committed;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; START TRANSACTION;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from szh.t1</span><br><span class="line">    -&gt; ;</span><br><span class="line">+---------+-----------+</span><br><span class="line">| area_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|       1 |        22 |</span><br><span class="line">|       2 |        10 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from `szh`.`t1`;</span><br><span class="line">+---------+-----------+</span><br><span class="line">| area_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|       1 |        22 |</span><br><span class="line">|       2 |        10 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>事务二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `szh`.`t1`(`area_id`, `order_num`) VALUES (3, 22);</span><br></pre></td></tr></table></figure></p></blockquote><p>此时<code>事务一</code>再进行select<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from `szh`.`t1`;</span><br><span class="line">+---------+-----------+</span><br><span class="line">| area_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|       1 |        22 |</span><br><span class="line">|       2 |        10 |</span><br><span class="line">|       3 |        22 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>于是幻读发生了</p><h4 id="Repeatable-Read"><a href="#Repeatable-Read" class="headerlink" title="Repeatable Read"></a>Repeatable Read</h4><p>那么如果在<code>Repeatable Read</code>隔离级别下，上面的SQL在执行一遍会出现什么情况呢？</p><blockquote><p>事务一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; START TRANSACTION;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM `t1`</span><br><span class="line">    -&gt; ;</span><br><span class="line">+---------+-----------+</span><br><span class="line">| area_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|       1 |        22 |</span><br><span class="line">|       2 |        10 |</span><br><span class="line">|       3 |        22 |</span><br><span class="line">|       4 |        33 |</span><br><span class="line">|       5 |        55 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>事务二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `szh`.`t1`(`area_id`, `order_num`) VALUES (6, 66);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>事务一再次select<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM `t1`;</span><br><span class="line">+---------+-----------+</span><br><span class="line">| area_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|       1 |        22 |</span><br><span class="line">|       2 |        10 |</span><br><span class="line">|       3 |        22 |</span><br><span class="line">|       4 |        33 |</span><br><span class="line">|       5 |        55 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p></blockquote><p>可以看到的是在快照读下面，是没有幻读出现的，那么修改select为当前读呢？<br>在事务一里面再次执行以下SQL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM `t1` for update;</span><br><span class="line">+---------+-----------+</span><br><span class="line">| area_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|       1 |        22 |</span><br><span class="line">|       2 |        10 |</span><br><span class="line">|       3 |        22 |</span><br><span class="line">|       4 |        33 |</span><br><span class="line">|       5 |        55 |</span><br><span class="line">|       6 |        66 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>可以看到确实出现了两次的select不同的情况。<br>所以需要强调一点的是，在<code>Repeatable Read</code>隔离级别下，只有当前读才会出现幻读，因为在该级别下，快照读是从<code>begin</code>开始的第一个普通<code>select</code>建立的<code>Read View</code>，以后的普通<code>select</code>都是基于第一次的<code>select</code>，自然而然不会出现幻读了 </p>]]></content>
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql数据库出现死锁的情况(一)</title>
      <link href="/2019/08/04/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%87%BA%E7%8E%B0%E6%AD%BB%E9%94%81%E7%9A%84%E6%83%85%E5%86%B5-%E4%B8%80/"/>
      <url>/2019/08/04/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%87%BA%E7%8E%B0%E6%AD%BB%E9%94%81%E7%9A%84%E6%83%85%E5%86%B5-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>在临近上线之前，我们系统做了一次压力测试，发现有一个接口在高并发情况下会出现一个死锁的情况。。首先申明…不是我写的，我只是帮忙排查下。</p><p>随着对Mysql锁的深入了解，于是就准备写几篇文章来记录下Mysql各种事物和索引的情况下出现死锁的情况。</p><p>今天就介绍下在并发插入的情况下，哪几种情况会出现死锁：</p><h2 id="INNODB下的各种锁"><a href="#INNODB下的各种锁" class="headerlink" title="INNODB下的各种锁"></a>INNODB下的各种锁</h2><p>在介绍锁的时候只会介绍跟本节相关的锁，而且只会讲述大概是什么，至于锁的更加详细的讲解可能会到以后再详细介绍。</p><h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>行锁分为写锁和读取锁，</p><blockquote><p>读锁（S锁）也可以称之为 <code>共享锁</code> ， 它表示的是任何一个事物都可以读取该行数据(可以被多个事物获取到)。</p></blockquote><blockquote><p>写锁（X锁）也可以称之为排它锁，它表示的是该行数据不允许任何人进行修改，同时也不允许任何事物获取该行事物的S锁，但是普通的 <code>select</code> 语句是可以的。</p></blockquote><h2 id="背景信息一"><a href="#背景信息一" class="headerlink" title="背景信息一"></a>背景信息一</h2><h3 id="注意：以下测试都是基于该事物隔离级别和数据库版本"><a href="#注意：以下测试都是基于该事物隔离级别和数据库版本" class="headerlink" title="注意：以下测试都是基于该事物隔离级别和数据库版本"></a>注意：以下测试都是基于该事物隔离级别和数据库版本</h3><p>数据库版本：8.0.11</p><p>事务隔离级别：REPEATABLE-READ</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE 'transaction_isolation';</span><br><span class="line">+<span class="comment">-----------------------+-----------------+</span></span><br><span class="line">| Variable_name         | Value           |</span><br><span class="line">+<span class="comment">-----------------------+-----------------+</span></span><br><span class="line">| transaction_isolation | REPEATABLE-READ |</span><br><span class="line">+<span class="comment">-----------------------+-----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="SQL准备"><a href="#SQL准备" class="headerlink" title="SQL准备:"></a>SQL准备:</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> test_lock  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_0900_ai_ci;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_lock.<span class="string">`test`</span> (</span><br><span class="line">    <span class="string">`user_id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`user_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`user_password`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`is_deleted`</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`user_id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`t1_god`</span> (<span class="string">`user_name`</span>,<span class="string">`user_password`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure><p>准备数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'a'</span>,<span class="string">'zhangsan'</span>,<span class="string">'123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'b'</span>,<span class="string">'lisi'</span>,<span class="string">'lisi123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'c'</span>,<span class="string">'wangwu'</span>,<span class="string">'wangwu123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'d'</span>,<span class="string">'caocao'</span>,<span class="string">'caocao123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'e'</span>,<span class="string">'liubei'</span>,<span class="string">'liubei123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'f'</span>,<span class="string">'zhangfei'</span>,<span class="string">'zhangfei123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'g'</span>,<span class="string">'guanyu'</span>,<span class="string">'guanyu123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'h'</span>,<span class="string">'xiaoqiao'</span>,<span class="string">'xiaoqiao123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br></pre></td></tr></table></figure><h3 id="情况一："><a href="#情况一：" class="headerlink" title="情况一："></a>情况一：</h3><blockquote><p> 三个事物都执行同一个Insert语句，第一个事物然后回滚</p></blockquote><p>此时第三个事物会提示死锁，第二个事物正常插入。</p><h4 id="复现步骤："><a href="#复现步骤：" class="headerlink" title="复现步骤："></a>复现步骤：</h4><p>开启三个事物，每一个事物分别执行如下SQL，然后再将第一个事物进行回滚或者提交，然后你就会发现第三个事物发生了死锁。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## DeadLock</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'i'</span>,<span class="string">'daqiao'</span>,<span class="string">'daqiao123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br></pre></td></tr></table></figure><p>Mysql提示如下：</p><blockquote><p>[2019-08-04 14:33:48] Connected<br>sql&gt; start transaction<br>[2019-08-04 14:33:49] completed in 4 ms<br>sql&gt; begin<br>[2019-08-04 14:33:49] completed in 6 ms<br>sql&gt; insert into test_lock.<code>test</code> values(‘i’,’daqiao’,’daqiao123456’,0,’15112345678’)<br>[2019-08-04 14:34:00] [40001][1213] Deadlock found when trying to get lock; try restarting transaction<br>[2019-08-04 14:34:00] [40001][1213] Deadlock found when trying to get lock; try restarting transaction</p></blockquote><p>那么打印出Mysql出现死锁的日志：重点日志如下</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">LATEST DETECTED DEADLOCK</span><br><span class="line">------------------------</span><br><span class="line"><span class="number">2019</span>-<span class="number">08</span>-<span class="number">04</span> <span class="number">06</span>:<span class="number">33</span>:<span class="number">59</span> <span class="number">0</span>x7f1818599700</span><br><span class="line">*** (<span class="number">1</span>) TRANSACTION:</span><br><span class="line">TRANSACTION <span class="number">231690</span>, ACTIVE <span class="number">34</span> sec inserting</span><br><span class="line">mysql tables in <span class="keyword">use</span> <span class="number">1</span>, locked <span class="number">1</span></span><br><span class="line">LOCK WAIT <span class="number">4</span> lock <span class="keyword">struct</span>(s), heap size <span class="number">1136</span>, <span class="number">2</span> row lock(s)</span><br><span class="line">MySQL thread id <span class="number">9</span>, OS thread handle <span class="number">139741464762112</span>, query id <span class="number">95</span> <span class="number">172</span><span class="variable">.17</span><span class="variable">.0</span><span class="variable">.1</span> root update</span><br><span class="line"><span class="comment">/* ApplicationName=IntelliJ IDEA 2019.1.3 */</span> insert into test_lock.<span class="meta">`test` values('i','daqiao','daqiao123456',0,'15112345678')</span></span><br><span class="line">*** (<span class="number">1</span>) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id <span class="number">7</span> page no <span class="number">4</span> n bits <span class="number">80</span> index PRIMARY of <span class="keyword">table</span> <span class="meta">`test_lock`.`test` trx id 231690 lock_mode X insert intention waiting</span></span><br><span class="line">Record lock, heap no <span class="number">1</span> PHYSICAL RECORD: n_fields <span class="number">1</span>; compact format; info bits <span class="number">0</span></span><br><span class="line"> <span class="number">0</span>: len <span class="number">8</span>; hex <span class="number">73757072656</span>d756d; asc supremum;;</span><br><span class="line"></span><br><span class="line">*** (<span class="number">2</span>) TRANSACTION:</span><br><span class="line">TRANSACTION <span class="number">231691</span>, ACTIVE <span class="number">10</span> sec inserting</span><br><span class="line">mysql tables in <span class="keyword">use</span> <span class="number">1</span>, locked <span class="number">1</span></span><br><span class="line"><span class="number">4</span> lock <span class="keyword">struct</span>(s), heap size <span class="number">1136</span>, <span class="number">2</span> row lock(s)</span><br><span class="line">MySQL thread id <span class="number">10</span>, OS thread handle <span class="number">139741464467200</span>, query id <span class="number">139</span> <span class="number">172</span><span class="variable">.17</span><span class="variable">.0</span><span class="variable">.1</span> root update</span><br><span class="line"><span class="comment">/* ApplicationName=IntelliJ IDEA 2019.1.3 */</span> insert into test_lock.<span class="meta">`test` values('i','daqiao','daqiao123456',0,'15112345678')</span></span><br><span class="line">*** (<span class="number">2</span>) HOLDS THE LOCK(S):</span><br><span class="line">RECORD LOCKS space id <span class="number">7</span> page no <span class="number">4</span> n bits <span class="number">80</span> index PRIMARY of <span class="keyword">table</span> <span class="meta">`test_lock`.`test` trx id 231691 lock mode S</span></span><br><span class="line">Record lock, heap no <span class="number">1</span> PHYSICAL RECORD: n_fields <span class="number">1</span>; compact format; info bits <span class="number">0</span></span><br><span class="line"> <span class="number">0</span>: len <span class="number">8</span>; hex <span class="number">73757072656</span>d756d; asc supremum;;</span><br><span class="line"></span><br><span class="line">*** (<span class="number">2</span>) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id <span class="number">7</span> page no <span class="number">4</span> n bits <span class="number">80</span> index PRIMARY of <span class="keyword">table</span> <span class="meta">`test_lock`.`test` trx id 231691 lock_mode X insert intention waiting</span></span><br><span class="line">Record lock, heap no <span class="number">1</span> PHYSICAL RECORD: n_fields <span class="number">1</span>; compact format; info bits <span class="number">0</span></span><br><span class="line"> <span class="number">0</span>: len <span class="number">8</span>; hex <span class="number">73757072656</span>d756d; asc supremum;;</span><br><span class="line"></span><br><span class="line">*** WE ROLL BACK TRANSACTION (<span class="number">2</span>)</span><br><span class="line">------------</span><br></pre></td></tr></table></figure><p>从以上日志我们可以看到，事物一正在请求该行记录的 <code>X锁</code> ，事物二持有该行的<code>S锁</code>，但是也在等待获取该行的<code>X锁</code>。</p><p>关于Mysql的 <code>insert</code> 逻辑，可以大致理解为如果一个事物正在对一个记录进行 <code>insert</code>，此时 InnoDB 并不会主动的将其加一个锁，而是在主键索引上加一个 <code>trx_id</code>，</p><p>当第二个事物检测到该行记录正在被一个活跃的事物持有的时候，此时第二个事物会帮第一个事物的隐式锁住转为显式锁。如下例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## DeadLock</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'i'</span>,<span class="string">'daqiao'</span>,<span class="string">'daqiao123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br></pre></td></tr></table></figure><p>此时查看Mysql中锁的情况：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/insert%E6%AD%BB%E9%94%81%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%BA%8B%E7%89%A9.png" alt=""></p><p>可以看到此时Mysql仅仅是在表上加入了一个插入意向锁（IX锁），持有该锁表示该事物在接下来有可能会对自己设计到的行加入排它锁（X锁）</p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html" target="_blank" rel="noopener">Mysql关于意向锁的介绍</a></p><blockquote><p>The intention locking protocol is as follows:</p><ul><li>Before a transaction can acquire a shared lock on a row in a table, it must first acquire an <code>IS</code> lock or stronger on the table.</li><li>Before a transaction can acquire an exclusive lock on a row in a table, it must first acquire an <code>IX</code> lock on the table.</li></ul></blockquote><p>大意就是如果你想获得一个行的 <code>X锁</code>，那么你就必须先获取表的 <code>IX锁</code></p><p>那么此时再进行第二个事物的插入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## DeadLock</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_lock.<span class="string">`test`</span> <span class="keyword">values</span>(<span class="string">'i'</span>,<span class="string">'daqiao'</span>,<span class="string">'daqiao123456'</span>,<span class="number">0</span>,<span class="string">'15112345678'</span>);</span><br></pre></td></tr></table></figure><p>再次查看数据库中的锁：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/Mysql%E7%AC%AC%E4%BA%8C%E4%B8%AA%E4%BA%8B%E7%89%A9.png" alt=""></p><p>此时会发现第一个事物已经获取到了行级别的<code>X锁</code>，第二个事物获取到了 <code>IX</code> 锁以及 <code>S锁</code> 。</p><p>那么此时第三个事物开启之后数据库中的锁又会是什么样子的呢？</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/Mysql%E7%AC%AC%E4%B8%89%E4%B8%AA%E4%BA%8B%E7%89%A9.png" alt=""></p><p>可以发现另外两个事物都在等待获取该行的<code>S锁</code>。然后此时第一个事物进行回滚，此时第三个事物就会提示死锁。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><h4 id="前提结论"><a href="#前提结论" class="headerlink" title="前提结论"></a>前提结论</h4><ol><li><code>S锁</code>是可以升级到<code>X锁</code>的</li><li>一个<code>S锁</code>需要升级到<code>X</code>锁必须保证只有当前事物持有<code>S锁</code></li></ol><h4 id="死锁原因"><a href="#死锁原因" class="headerlink" title="死锁原因"></a>死锁原因</h4><p>当第一个事物回滚之后，第二个事物和第三个事物都会获得到该行的<code>S锁</code>，但是此时第二个事物将要执行 insert 语句，也就是第二个事物正在等待获取该行的<code>X锁</code>，但是此时第三个事物也正在准备 insert，它也在准备获取 <code>X锁</code>，目前这两个事物都持有该行的 <code>S锁</code> ，而如果需要获取 <code>X锁</code>，则是需要对方释放<code>S</code>锁。如下图：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/TwoTrxLock.png" alt=""></p><h3 id="简单复现步骤："><a href="#简单复现步骤：" class="headerlink" title="简单复现步骤："></a>简单复现步骤：</h3><p>为了验证上面的情况，我准备如下几个SQL：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">## 事物一</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test_lock.test <span class="keyword">where</span> user_id=<span class="string">'h'</span>  <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 事物二</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test_lock.test <span class="keyword">where</span> user_id=<span class="string">'h'</span>  <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>;</span><br><span class="line"></span><br><span class="line">## 事物一再执行</span><br><span class="line"><span class="keyword">update</span> test_lock.<span class="string">`test`</span> <span class="keyword">set</span> user_name=<span class="string">'abc'</span>  <span class="keyword">where</span>  user_id = <span class="string">'h'</span>;</span><br><span class="line"></span><br><span class="line">## 事物二再执行</span><br><span class="line"><span class="keyword">update</span> test_lock.<span class="string">`test`</span> <span class="keyword">set</span> user_name=<span class="string">'abc'</span>  <span class="keyword">where</span>  user_id = <span class="string">'h'</span>;</span><br><span class="line"></span><br><span class="line">## 此时事物二就会提示死锁</span><br></pre></td></tr></table></figure><p>这是因为事物一和事物二都在等待对方释放<code>S锁</code>，但是都不肯释放，于是死锁发生了。</p><h3 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h3><blockquote><p> 三个事物都执行同一个Insert语句，第一个事物然后提交</p></blockquote><p>此时第二个事物和第三个事物都会提示主键冲突，并无死锁出现。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这种情况下的死锁是由于 <code>S锁</code> 升级到 <code>X锁</code>导致的一种死锁，在平常的业务代码中应该尽量避免并发插入一个主键。</p>]]></content>
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue里面相同页面不同URL的刷新解决方案</title>
      <link href="/2019/07/24/Vue%E9%87%8C%E9%9D%A2%E7%9B%B8%E5%90%8C%E9%A1%B5%E9%9D%A2%E4%B8%8D%E5%90%8CURL%E7%9A%84%E5%88%B7%E6%96%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/07/24/Vue%E9%87%8C%E9%9D%A2%E7%9B%B8%E5%90%8C%E9%A1%B5%E9%9D%A2%E4%B8%8D%E5%90%8CURL%E7%9A%84%E5%88%B7%E6%96%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>随着项目的收尾，使用<code>Vue</code>也有大概两个月时间了，在这期间也才遇到过了不少的问题，今天就来说下 <code>Vue</code> 中URL不同但是页面相同的解决办法。</p><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>假设有两个URL，都对应的是一个相同的 Vue 页面，URL分别是 <code>view/account/1</code> 和 <code>edit/account/1</code>，此时如果由 <code>view/account/1</code> 跳转至 <code>edit/account/1</code>，你会发现页面是不会刷新的， 从而直接影响了整体的功能。</p><p>于是去网上寻找解决方案，在一个 github 的 issue 里面，看到也有人反映过这个问题，不过作者的回复是采用</p><p><code>reload</code> 方式进行强制刷新，也就是类似于 F5 那样，页面首先会白一下，然后就再出现元素。这样虽然可以实现页面上元素的一些加载，但是同时它的弊端也体现出来了，就是对用户极度的不友好，所以最后我们才用了一种Reload的方式来进行刷新的。</p><p>首先是在<code>App.vue</code>里面添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;router-view v-<span class="keyword">if</span>=<span class="string">'isAlive'</span>/&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">  provide () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      reload: <span class="keyword">this</span>.reload</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isAlive: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reload () &#123;</span><br><span class="line">      <span class="keyword">this</span>.isAlive = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isAlive = <span class="literal">true</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>然后再需要刷新的 Vue 页面直接通过 <code>inject</code> 来进行使用即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> &lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;el-form :model=<span class="string">"account"</span>&gt;</span><br><span class="line">        &lt;el-form-item label=<span class="string">"姓名"</span> prop=<span class="string">"name"</span> &gt;</span><br><span class="line">          &lt;el-input v-model=<span class="string">"account.name"</span> placeholder=<span class="string">"请输入"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">          &lt;el-form-item label="年龄" prop="age" &gt;</span><br><span class="line">          &lt;el-input v-model="account.age" placeholder="请输入"&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">          &lt;el-form-item label="性别" prop="gender" &gt;</span><br><span class="line">          &lt;el-input v-model="account.gender" placeholder="请输入"&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  inject: ['reload'],</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      account: &#123;</span><br><span class="line">        name: null,</span><br><span class="line">        age: null,</span><br><span class="line">        gender: null</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    '$route' (to, from) &#123;</span><br><span class="line">      this.reload();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>最后便可以实现页面状态的重新加载。</p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为什么Spring官方推荐通过构造器注入</title>
      <link href="/2019/07/22/%E4%B8%BA%E4%BB%80%E4%B9%88Spring%E5%AE%98%E6%96%B9%E6%8E%A8%E8%8D%90%E9%80%9A%E8%BF%87%E6%9E%84%E9%80%A0%E5%99%A8%E6%B3%A8%E5%85%A5/"/>
      <url>/2019/07/22/%E4%B8%BA%E4%BB%80%E4%B9%88Spring%E5%AE%98%E6%96%B9%E6%8E%A8%E8%8D%90%E9%80%9A%E8%BF%87%E6%9E%84%E9%80%A0%E5%99%A8%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>我们在使用Spring的时候，最方便的就是它的IOC（控制反转），也就是所有的Bean都交由</p><p>Spring进行管理，那么我们在看网上的文章或者自己在写代码的时候经常会像这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   TestDao TestDao;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> TestDao TestDao;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">TestService</span><span class="params">(TestDao TestDao)</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.TestDao = TestDao;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是貌似许多人都会使用第一种方式，因为这样简单方便，如果是采用第二种的话，每一次新增加一个bean，都需要在构造器的入参上面加一个参数，就会显得有点麻烦。</p><p>但是如果采用第一个写法，就会在IDEA里面出现一个提示：</p><blockquote><p> spring官方建议通过构造器的方式进行注入</p></blockquote><p>这又是为什么呢？</p><p><a href="https://spring.io/blog/2007/07/11/setter-injection-versus-constructor-injection-and-the-use-of-required/" target="_blank" rel="noopener">Spring官方对于Setter注入和构造器注入的看法</a></p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>在springboot里面，最常用的注入方式有两种：一种是构造器注入，一种是field注入</p><p>在上一部分的代码里面，第一个是 Field 注入，第二个是构造器注入，既然这两种方式Spring都支持，那么到底这两种有什么区别呢？</p><h3 id="Field注入"><a href="#Field注入" class="headerlink" title="Field注入"></a>Field注入</h3><p>这边新建两个测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    A a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a.sayA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时你启动Spring的话，就会出现一个空指针的异常，如果需要避免的话，则必须是类 <code>A</code> 先进行初始化，然后再初始化 <code>B</code> 。（当然Spring官方也提供了很多方式来控制 Bean 的初始化顺序，但是和本篇文章无关）</p><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> A a;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">(A a)</span></span>&#123;</span><br><span class="line">        a.sayA();</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时Spring的项目就会正常的启动，那么为什么同样的代码，一个通过构造器注入，一个通过Field注入，两者的结果相差这么大呢？</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>官方之所以现在推荐使用构造器注入，是因为通过构造器注入是可以防止 <code>空指针异常</code>，同时可以确保的是被引用的 <code>Bean</code> ，它的引用是不可以变的，所以这可能是Spring官方团队的一些权衡点吧<br>当然早期的时候，Spring曾推荐过使用Setter注入，不够现在可能Spring可能觉得构造器注入比较好。</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019年07月第一周总结</title>
      <link href="/2019/07/07/2019%E5%B9%B407%E6%9C%88%E7%AC%AC%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2019/07/07/2019%E5%B9%B407%E6%9C%88%E7%AC%AC%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>这一周主要学习如下：</p><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>在使用ElementUI的时候有一个<code>el-select</code>标签，我们有一个需求就是需要在下拉列表的时候还需要过滤出特定的选项，但是<code>ElementUI</code>官方默认的过滤却只能支持 label 的筛选，所以这个时候就需要重新<code>filter-method</code>方法来过滤出所需要的选项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">v-model</span>=<span class="string">"selectData"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">"selectData.value"</span> <span class="attr">placeholder</span>=<span class="string">"请选择"</span> <span class="attr">filterable</span> <span class="attr">:filter-method</span>=<span class="string">"search"</span> <span class="attr">prop</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"item in options"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"item.value"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label</span>=<span class="string">"item.label"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:value</span>=<span class="string">"item.value"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"float: left"</span>&gt;</span>&#123;&#123; item.label &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"float: right; font-size: 15px"</span>&gt;</span>&#123;&#123; item.value &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="undefined">    return &#123;</span></span><br><span class="line"><span class="undefined">      options: [&#123;</span></span><br><span class="line"><span class="undefined">        value: '选项1',</span></span><br><span class="line"><span class="undefined">        label: '黄金糕'</span></span><br><span class="line"><span class="undefined">      &#125;, &#123;</span></span><br><span class="line"><span class="undefined">        value: '选项2',</span></span><br><span class="line"><span class="undefined">        label: '双皮奶'</span></span><br><span class="line"><span class="undefined">      &#125;, &#123;</span></span><br><span class="line"><span class="undefined">        value: '选项3',</span></span><br><span class="line"><span class="undefined">        label: '蚵仔煎'</span></span><br><span class="line"><span class="undefined">      &#125;, &#123;</span></span><br><span class="line"><span class="undefined">        value: '选项4',</span></span><br><span class="line"><span class="undefined">        label: '龙须面'</span></span><br><span class="line"><span class="undefined">      &#125;, &#123;</span></span><br><span class="line"><span class="undefined">        value: '选项5',</span></span><br><span class="line"><span class="undefined">        label: '北京烤鸭'</span></span><br><span class="line"><span class="undefined">      &#125;],</span></span><br><span class="line"><span class="undefined">      selectData: &#123;</span></span><br><span class="line"><span class="undefined">        value: ''</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    search (val) &#123;</span></span><br><span class="line"><span class="undefined">      let copyObj2 = JSON.parse(JSON.stringify(this.options));</span></span><br><span class="line"><span class="undefined">      if (val != null &amp;&amp; val !== '') &#123;</span></span><br><span class="line"><span class="undefined">        this.options = copyObj2.filter((item) =&gt; &#123;</span></span><br><span class="line"><span class="undefined">          if (item.value.indexOf(val) &gt; -1) &#123;</span></span><br><span class="line"><span class="undefined">            debugger;</span></span><br><span class="line"><span class="undefined">            return true;</span></span><br><span class="line"><span class="undefined">          &#125; else &#123;</span></span><br><span class="line"><span class="undefined">            return false;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125; else &#123;</span></span><br><span class="line"><span class="undefined">        this.options = copyObj2;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是后来又说要把选择的值给另一个字段…于是我就在search方法下面加了一行<code>this.otherField = val</code>。。后来前端把那一行给去除了。。。然后修改为如下代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">"selectData.value"</span> <span class="attr">placeholder</span>=<span class="string">"请选择"</span> <span class="attr">filterable</span> <span class="attr">:filter-method</span>=<span class="string">"(val)=&gt;search(val,()=&gt;&#123;this.otherField=val&#125;)"</span> <span class="attr">prop</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"> search (val, callback) &#123;</span><br><span class="line">      callback();</span><br><span class="line">  // 一样的代码</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>后来就没管了，不过现在觉得这样写的话有好处也有坏处。好处就是对于如果只有很少的字段变动的话，这样改无疑的好的，因为可以避免在方法里面写太多的字段，但是一旦重复的多起来，我觉得在方法里面写起来比较好。</p><h2 id="ElasticSearch的乐观锁机制（同步的坑）"><a href="#ElasticSearch的乐观锁机制（同步的坑）" class="headerlink" title="ElasticSearch的乐观锁机制（同步的坑）"></a>ElasticSearch的乐观锁机制（同步的坑）</h2><p>上周由于在做补偿机制的时候，需要对Es一些数据进行频繁的更新，但是在测试的时候 ES 经常会返回<code>version conflict</code> ，后来搜索了一下，发现 ES 对于每一个数据都有一个<code>_version</code>字段</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-07-07%20%E4%B8%8B%E5%8D%888.57.25.png" alt=""></p><p>而我们对一个数据如果频繁更新的话，就会导致ES的乐观锁生效，从而更新失败。如下：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-07-07%20%E4%B8%8B%E5%8D%889.13.03.png" alt=""></p><p>由于我使用的ES版本是ES6.7.1，这时候只能通过<code>if_seq_no</code>来解决了，因为当我尝试使用外部版本号控制的时候，突然发现。。。ES官方竟然不推荐了</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-07-07%20%E4%B8%8B%E5%8D%889.27.26.png" alt=""></p><p>这部分后续写文章继续分析了。。。</p><h2 id="ES的升级以及基础排序方法"><a href="#ES的升级以及基础排序方法" class="headerlink" title="ES的升级以及基础排序方法"></a>ES的升级以及基础排序方法</h2><p>由于需要列表的数据进行综合查询然后排序，这个时候就只能手写排序方法了，好在ES的官方文档倒也详细，所以参照官方的文档，自己摸索了两个小时倒也写出来了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String script = <span class="string">"你的排序脚本"</span>;</span><br><span class="line">Script inline = <span class="keyword">new</span> Script(script);</span><br><span class="line">SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"你的索引"</span>);</span><br><span class="line">SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">sourceBuilder.sort(<span class="keyword">new</span> ScriptSortBuilder(inline,ScriptSortBuilder.ScriptSortType.NUMBER).order(SortOrder.DESC));</span><br></pre></td></tr></table></figure><h2 id="Rabbitmq"><a href="#Rabbitmq" class="headerlink" title="Rabbitmq"></a>Rabbitmq</h2><p>由于Mq环境需要统一下，所以这段时间也把自己负责的Mq又<code>fanout</code>改为<code>direct</code>了。改动起来到也没啥难度，就是在<code>convertAndSend</code>方法里面多加了一个<code>routeKey</code>参数而已</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>这周主要是在 Leetcode 上写了点<code>Array</code>的一些算法题，因为都是简单的题目，暂时还未遇到一些比较经典的题目</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>周三才想起来试试记录下，下周估计会详细点</p>]]></content>
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Es6.X升级到Es7.x的变化</title>
      <link href="/2019/07/07/Es6-X%E5%8D%87%E7%BA%A7%E5%88%B0Es7-x%E7%9A%84%E5%8F%98%E5%8C%96/"/>
      <url>/2019/07/07/Es6-X%E5%8D%87%E7%BA%A7%E5%88%B0Es7-x%E7%9A%84%E5%8F%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>ElasticSearch6.升级至ElasticSearch7.x的一些变化</p><p>由于最近需要将<code>Es6.x</code>升级至<code>Es7</code>，所以正好记录下在升级过程中遇到的一些问题，以便以后翻阅。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="Es7-x系列中取消了Type"><a href="#Es7-x系列中取消了Type" class="headerlink" title="Es7.x系列中取消了Type"></a>Es7.x系列中取消了Type</h3><p>在<code>Es6</code>系列之前，创建一个索引是需要<code>index,type</code>这两个缺一不可的，例如如下请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> PUT localhost:9200/es_6     </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"mappings"</span>:&#123;</span><br><span class="line">        <span class="attr">"index_type"</span>:&#123;</span><br><span class="line">            <span class="attr">"properties"</span>:&#123;</span><br><span class="line">                <span class="attr">"message"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"acknowledged"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"shards_acknowledged"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"es_6"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在 <code>ES7</code> 版本中，如果再使用这个 Json 串的话是会跑出一个异常的，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"error"</span>: &#123;</span><br><span class="line">        <span class="attr">"root_cause"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"mapper_parsing_exception"</span>,</span><br><span class="line">                <span class="attr">"reason"</span>: <span class="string">"Root mapping definition has unsupported parameters:  [index_type : &#123;properties=&#123;message=&#123;type=text&#125;&#125;&#125;]"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"mapper_parsing_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"Failed to parse mapping [_doc]: Root mapping definition has unsupported parameters:  [index_type : &#123;properties=&#123;message=&#123;type=text&#125;&#125;&#125;]"</span>,</span><br><span class="line">        <span class="attr">"caused_by"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"mapper_parsing_exception"</span>,</span><br><span class="line">            <span class="attr">"reason"</span>: <span class="string">"Root mapping definition has unsupported parameters:  [index_type : &#123;properties=&#123;message=&#123;type=text&#125;&#125;&#125;]"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么此时在<code>ES7</code>版本中，建立 mapping 是不需要 Type 的，所以其索引修改为下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT localhost:9201/es_7</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"mappings"</span>:&#123;</span><br><span class="line">        <span class="attr">"properties"</span>:&#123;</span><br><span class="line">            <span class="attr">"message"</span>:&#123;</span><br><span class="line">                <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"acknowledged"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"shards_acknowledged"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"es_7"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES7-x中新建数据"><a href="#ES7-x中新建数据" class="headerlink" title="ES7.x中新建数据"></a>ES7.x中新建数据</h3><p>在 ES6 中由于有一个 Type 类型，因此在新建数据的时候都需要穿入一个Type，那么在 Es7 里面，由于 Type 被取消了，所以在 ES7 里面的新增就需要稍微修改下了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST localhost:9201/es_7/_create/1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"message"</span>:<span class="string">"a"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_index"</span>: <span class="string">"es_7"</span>,</span><br><span class="line">    <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">    <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"_seq_no"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实还有另一种写法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST localhost:9201/es_7/_doc/2?op_type=create</span><br></pre></td></tr></table></figure><p>剩下的一些改动可能就是新的业务上线需要对某些数据进行频繁的改动，而ES的乐观锁机制导致经常失败，这个问题得需要单独处理下</p>]]></content>
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue里面冒号和非冒号区别</title>
      <link href="/2019/06/27/vue%E9%87%8C%E9%9D%A2%E5%86%92%E5%8F%B7%E5%92%8C%E9%9D%9E%E5%86%92%E5%8F%B7%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/06/27/vue%E9%87%8C%E9%9D%A2%E5%86%92%E5%8F%B7%E5%92%8C%E9%9D%9E%E5%86%92%E5%8F%B7%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h2 id="vue里面冒号和非冒号的却别"><a href="#vue里面冒号和非冒号的却别" class="headerlink" title="vue里面冒号和非冒号的却别"></a>vue里面冒号和非冒号的却别</h2><p>今天在使用Vue的时候，突然发现了一个问题，就是在后端传过来的值因为是一个<code>boolean</code>类型的，但是前端又需要进行展示，由于我们使用的是<code>ElementUI</code>的话，于是参照官网上就是这样写的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select v-model=&quot;option_boolean&quot;&gt;</span><br><span class="line">        &lt;el-option label=&quot;1&quot; value=&quot;true&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">        &lt;el-option label=&quot;2&quot; value=&quot;false&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">&lt;/el-select&gt;</span><br></pre></td></tr></table></figure><p>但是此时页面上展示并非是 1 和 2 ，而是 true 和 false。如下：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-06-26%20%E4%B8%8B%E5%8D%8810.20.15.png" alt=""></p><p>按照正常的逻辑，此时这个下拉框里面的值应该是1，而不是true。如果此时修改为如下写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select v-model=&quot;option_boolean&quot;&gt;</span><br><span class="line">        &lt;el-option label=&quot;1&quot; :value=&quot;true&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">        &lt;el-option label=&quot;2&quot; :value=&quot;false&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br></pre></td></tr></table></figure><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-06-26%20%E4%B8%8B%E5%8D%8810.22.58.png" alt=""></p><p>此时的页面就会显示正常了。</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>在 Vue 里面，冒号<code>:</code>代表的是一个双向绑定，其值要么是一个变量，要么是一个函数，而此 Demo 里面，第一个例子中，value仅仅是作为一个属性，所以它只能是接受字符串类型等</p><p>但是在第二个例子里面，由于使用了 Vue 的一个双向绑定模式，所以此时便可以正确的识别出 boolean 类型的值了</p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何对多个IF进行优化呢?</title>
      <link href="/2019/06/11/%E5%A6%82%E4%BD%95%E5%AF%B9%E5%A4%9A%E4%B8%AAIF%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96%E5%91%A2/"/>
      <url>/2019/06/11/%E5%A6%82%E4%BD%95%E5%AF%B9%E5%A4%9A%E4%B8%AAIF%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96%E5%91%A2/</url>
      <content type="html"><![CDATA[<p>在项目中，不可避免的会使用到<code>IF</code>条件，如果仅仅是偶尔试使用以下，倒也无妨，但是如果在项目中大量的使用<code>IF</code>判断，那么会造成项目的杂乱无章。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>数据库调优(一)</title>
      <link href="/2019/06/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%B0%83%E4%BC%98-%E4%B8%80/"/>
      <url>/2019/06/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%B0%83%E4%BC%98-%E4%B8%80/</url>
      <content type="html"><![CDATA[<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>在上一篇文章中，我们有一个表，里面的内容如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from org_copy;</span><br><span class="line">+<span class="comment">--------+-----------------+---------------+----------+</span></span><br><span class="line">| org_id | org_name        | org_parent_id | org_copy |</span><br><span class="line">+<span class="comment">--------+-----------------+---------------+----------+</span></span><br><span class="line">|      1 | 一级部门        |             0 | 1        |</span><br><span class="line">|      2 | 一一级部门      |             0 | 2        |</span><br><span class="line">|      3 | 1.1级部门       |             1 | 3        |</span><br><span class="line">|      4 | 1.2级部门       |             1 | 4        |</span><br><span class="line">|      5 | 1.1.1部门       |             3 | 5        |</span><br><span class="line">|      6 | 1.1.2部门       |             3 | 6        |</span><br><span class="line">|      7 | 1.1.1.1部门     |             5 | 7        |</span><br><span class="line">|      8 | 1.3部门         |             1 | 8        |</span><br><span class="line">|      9 | 1.2.1部门       |             4 | 9        |</span><br><span class="line">+<span class="comment">--------+-----------------+---------------+----------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>这应该是一个很基本的一个mysql表，同时我们在上一篇文章中，也执行了如下SQL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org_copy WHERE org_name&gt;'一级部门' and  org_parent_id=1;</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table    | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | org_copy | NULL       | range | index_name    | index_name | 768     | NULL |    1 |    11.11 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>那么如果此时我们换一个SQL来进行查询呢?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org_copy WHERE org_name&gt;'1' and  org_parent_id=1;</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | org_copy | NULL       | ALL  | index_name    | NULL | NULL    | NULL |    9 |    11.11 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>此时是不是会一脸疑惑…为啥我的这个SQL，明明一样呀，但是为啥第一个就可以走索引呢???<br>因为在mysql里面，会判断<code>当前where条件查询的数据量</code>，由于索引是由一个<code>B+</code>树的形式存在，所以当通过<code>org_name</code>来进行比较筛选的时候，是可以很快的定位出大致需要查询的数据量。</p><p>而当数据量大于30%的时候，mysql就会采用一种全表扫描的方式来进行查询，这也就是为什么不建议在区分度低的字段上建立索引了，假设一个字段只有三个值或者两个值，那么极有可能mysql会直接通过全表扫描的方式进行查询。</p><h3 id="索引覆盖"><a href="#索引覆盖" class="headerlink" title="索引覆盖"></a>索引覆盖</h3><p>这个是mysql调优中经常忽略的一点，由于mysql在建立索引的时候会一次性将索引字段存入到索引树中，所以如果我们的<code>where</code>条件中所包含的字段均可以在索引中找到的话，那么mysql就会直接从索引中去取数据，而不会进行回表。例如如下SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain  SELECT org_parent_id FROM org_copy WHERE org_copy=1;</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | org_copy | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 4325 |    10.00 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>由于<code>org_copy</code>字段非索引，所以此时只能是通过回表的方式进行查询。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>由于mysql会在数据量大于<code>30%</code>的时候进行全表扫描，所以最好就是不要在区分度低的字段上建立索引，避免进行了全表扫描。</li><li>对于过滤字段的使用，应该是尽最大的努力让<code>SQL</code>采用索引覆盖，如果无法避免的话就尽量让最左原则生效。进而加快查询速度。</li></ol>]]></content>
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库最左原则以及理解</title>
      <link href="/2019/06/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%80%E5%B7%A6%E5%8E%9F%E5%88%99%E4%BB%A5%E5%8F%8A%E7%90%86%E8%A7%A3/"/>
      <url>/2019/06/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%80%E5%B7%A6%E5%8E%9F%E5%88%99%E4%BB%A5%E5%8F%8A%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>本次的实验是基于<code>Mysql8</code>版本。首先在数据库中有一个表，其结构如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table org;</span><br><span class="line">+<span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Table | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                   |</span><br><span class="line">+<span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| org   | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`org`</span> (</span><br><span class="line">  <span class="string">`org_id`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`org_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`org_parent_id`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`org_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`index_name`</span> (<span class="string">`org_name`</span>,<span class="string">`org_parent_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br><span class="line">+<span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到在这个表中，有一个主键<code>org_id</code>以及一个联合索引<code>index_name</code>。其他的并无特别之处。</p><h3 id="最左原则"><a href="#最左原则" class="headerlink" title="最左原则"></a>最左原则</h3><p>在Mysql里面，有一个最左原则，官网的介绍如下：</p><blockquote><p>The name index is an index over the last_name and first_name columns. The index can be used for lookups in queries that specify       values in a known range for combinations of last_name and first_name values. It can also be used for queries that specify just a      last_name value because that column is a leftmost prefix of the index (as described later in this section). Therefore, the name       index is used for lookups in the following queries。</p></blockquote><p>既然是最左原则，那么尝试着写一条SQL如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org WHERE org_name='1' and  org_parent_id=1;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key        | key_len | ref         | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | org   | NULL       | ref  | index_name    | index_name | 773     | const,const |    1 |   100.00 | Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到其<code>type</code>是 ref 类型的，于是去<code>mysql</code>官网寻找<code>ref</code>类型的索引是什么：</p><blockquote><p> All rows with matching index values are read from this table for each combination of rows from the previous tables. ref is used if    the join uses only a leftmost prefix of the key or if the key is not a PRIMARY KEY or UNIQUE index (in other words, if the join       cannot select a single row based on the key value). If the key that is used matches only a few rows, this is a good join type.</p></blockquote><p>啥意思呢，就是当使用的索引符合最左原则的时候，且索引即不是<code>主键</code>也不是<code>唯一索引</code>。那么它所使用的类型就是<code>ref</code>。</p><p>那如果将<code>org_name</code>和<code>org_parant_id</code>反着呢?<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org WHERE org_parent_id =1  and org_name='1';</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key        | key_len | ref         | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | org   | NULL       | ref  | index_name    | index_name | 773     | const,const |    1 |   100.00 | Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>说好的最左原则呢。。。索引的org_parent_id不是在右边的嘛。</p><p>其实在这种情况下，无论<code>org_parent_id</code>在左边还是在右边，对于查询结果来说，都是一样的。既然都是一样的，那么<code>Mysql</code>的优化器就直接把该条语句给优化掉了，所以你会发现无论是<code>org_name</code>在左还是在右边都是会使用到索引。</p><p>那再换一条SQL呢？<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org WHERE org_name&gt;'1' and  org_parent_id=1;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra                    |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | org   | NULL       | index | index_name    | index_name | 773     | NULL |    9 |    11.11 | Using where; Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>这就尴尬了…由于在<code>最左原则</code>里面，若前一个索引使用了<code>&gt;</code>、<code>&lt;</code>等比较符的时候，后面一个是不会进行索引查询的，这个跟<code>Mysql</code>的索引结构有关系(文章后面会介绍)，但是为啥这里又会走索引呢? 这个时候由于在<code>Extra</code>里面看到了<code>Using index</code>，猜测难道是发生了索引覆盖? 于是我又建立了一个表。<br>于是立即又新建了一张表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table org_copy;</span><br><span class="line">+----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Table    | Create Table                                                                                                                                                                                                                                                                                |</span><br><span class="line">+----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| org_copy | CREATE TABLE `org_copy` (</span><br><span class="line">  `org_id` int(5) NOT NULL,</span><br><span class="line">  `org_name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `org_parent_id` int(5) DEFAULT NULL,</span><br><span class="line">  `org_copy` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`org_id`),</span><br><span class="line">  KEY `index_name` (`org_name`,`org_parent_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 |</span><br><span class="line">+----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>这时，我再次执行刚才的<code>sql</code>。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org_copy WHERE org_name&gt;'一级部门' and  org_parent_id=1;</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table    | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | org_copy | NULL       | range | index_name    | index_name | 768     | NULL |    1 |    11.11 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>看起来的确是由于发生了<code>索引覆盖</code>，导致了虽然不符合<code>最左原则</code>，但是还是走了一个索引。</p><h3 id="索引覆盖"><a href="#索引覆盖" class="headerlink" title="索引覆盖"></a>索引覆盖</h3><p>什么是索引覆盖呢?<br>在<code>org</code>这个表里面，有三个字段，但是这三个字段分别是一个<code>主键索引</code>和一个<code>联合索引</code>，由于我查询的字段就包含在索引里面，那么<br>而恰好这个表的所有字段都在索引里面，这就导致了<code>mysql</code>可以直接从索引里面获取到所需要的数据，那么此时就不必要再去通过<code>磁盘IO</code>去查询额外的字段数据了。也就不需要进行</p><p>继续回到<code>最左原则</code>，由于<code>最左原则</code>要求在聚合索引里面，每一个列是要为一个等值连接。即，如果<code>org_name</code>使用了非等值连接，那么就会导致<code>org_parent_id</code>无法使用最左原则。例子如下：若<code>org_parent_id</code>使用非等值连接，为了避免<code>索引覆盖</code>对<code>SQL</code>的影响，所以此次的<code>SQL</code>在 copy表里面执行。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM org_copy WHERE org_name='1' and  org_parent_id&gt;1;</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table    | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | org_copy | NULL       | range | index_name    | index_name | 773     | NULL |    1 |   100.00 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到确实是使用了<code>聚合索引</code>，同时最后一列的<code>Using index condition</code>也表明，这条查询语句会先通过索引来过滤出符合的数据，然后从过滤出来的数据里面在使用我们的<code>where</code>条件进行二次过滤，最终找出符合的数据。</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>在Mysql里面，索引是以<code>B+树</code>的形式实现的，而索引又分为一级索引(主键)和二级索引(该文章中的<code>index_name</code>)，其实在<code>InnoDB</code>里面，二级索引的叶子节点所存放的数据就是主键索引所对应的地址，这也称之为<code>回表</code>。<br>回到文章中来，在这篇文章中介绍的<code>index_name</code>索引里面，mysql是根据索引列的顺序，一个一个在索引里面进行查找过滤，如果该索引在某一列断开了，例如索引<code>A</code>的列是(A、B、C)，但是在<code>SQL</code>里面却是<code>where A =&#39;a&#39; and C=&#39;c&#39;</code>，此时就会只使用该索引<code>A</code>的<code>A</code>列，这个跟<code>B+</code>树的特点有关。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table index_test;</span><br><span class="line">+<span class="comment">------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Table      | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                                                |</span><br><span class="line">+<span class="comment">------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| index_test | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`index_test`</span> (</span><br><span class="line">  <span class="string">`a`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`b`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`c`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`d`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`f`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`a`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`index_name`</span> (<span class="string">`b`</span>,<span class="string">`c`</span>,<span class="string">`d`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br><span class="line">+<span class="comment">------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`index_test`</span> <span class="keyword">WHERE</span> b=<span class="string">'b'</span> <span class="keyword">and</span> d=<span class="string">'d'</span>;</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table      | partitions | type | possible_keys | key        | key_len | ref   | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | index_test | NULL       | ref  | index_name    | index_name | 768     | const |    1 |    50.00 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到<code>ref</code>就一个<code>const</code>，所以基本可以推测目前只用了<code>b</code>列，那么换成<code>WHERE b=&#39;b&#39; and c=&#39;c&#39;</code>呢?<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM `index_test` WHERE b='b' and c='c';</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table      | partitions | type | possible_keys | key        | key_len | ref         | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------------+------+----------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | index_test | NULL       | ref  | index_name    | index_name | 773     | const,const |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+------+---------------+------------+---------+-------------+------+----------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>所有对于使用<code>最左原则</code>来进行调优的话，首先应该注意的是索引列最好都是<code>等值连接</code>，并且中途最好不要有任何的断裂。这样才能发挥出联合索引的优势</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>ElementUI使用rules遇到的一些问题</title>
      <link href="/2019/05/30/ElementUi%E4%BD%BF%E7%94%A8rules%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2019/05/30/ElementUi%E4%BD%BF%E7%94%A8rules%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>这些天一直在踩<code>Vue</code>的坑…今天遇到的一个问题是在一个父组件中，将某些数据通过<code>props</code>传递给子组件，同时在子组件里面也有相应的一些<code>rules</code>规则，但是在实际的开发中，却发现子组件的<code>rules</code>并未生效…反而一直提示对应的 message，后来才发现是跟 ElementUI 的<code>prop</code>有关。</p><p>首先看一段代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>该Demo是为了测试Vue中rule和prop的不同<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"vehicles"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"公共汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"bus.wheel"</span> <span class="attr">:rules</span>=<span class="string">"&#123;required: true,message: '请输入公共汽车车轮个数'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"vehicles.bus.wheel"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"公共汽车司机驾照"</span> <span class="attr">prop</span>=<span class="string">"bus.driver.license"</span> <span class="attr">:rules</span>=<span class="string">"&#123;validator: licenseCheck ,trigger:'blur'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"vehicles.bus.driver.license"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"公共汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"bus.driver.years"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"vehicles.bus.driver.years"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">car</span> <span class="attr">:car</span>=<span class="string">"vehicles.car"</span>&gt;</span><span class="tag">&lt;/<span class="name">car</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">import Car from './Car';</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    Car</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="undefined">    return &#123;</span></span><br><span class="line"><span class="undefined">      vehicles: &#123;</span></span><br><span class="line"><span class="undefined">        bus: &#123;</span></span><br><span class="line"><span class="undefined">          wheel: null,</span></span><br><span class="line"><span class="undefined">          driver: &#123;</span></span><br><span class="line"><span class="undefined">            license: null,</span></span><br><span class="line"><span class="undefined">            years: null</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        car: &#123;</span></span><br><span class="line"><span class="undefined">          wheel: null,</span></span><br><span class="line"><span class="undefined">          driver: &#123;</span></span><br><span class="line"><span class="undefined">            license: null,</span></span><br><span class="line"><span class="undefined">            years: null</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        train: &#123;</span></span><br><span class="line"><span class="undefined">          wheel: null,</span></span><br><span class="line"><span class="undefined">          driver: &#123;</span></span><br><span class="line"><span class="undefined">            license: null,</span></span><br><span class="line"><span class="undefined">            years: null</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      person: &#123;</span></span><br><span class="line"><span class="undefined">        child: &#123;</span></span><br><span class="line"><span class="undefined">          year: null</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    licenseCheck (rule, value, callback) &#123;</span></span><br><span class="line"><span class="undefined">      let m = this.car;</span></span><br><span class="line"><span class="undefined">      console.log(m);</span></span><br><span class="line"><span class="undefined">      debugger;</span></span><br><span class="line"><span class="undefined">      if (value != null) &#123;</span></span><br><span class="line"><span class="undefined">        if (value != 'A') &#123;</span></span><br><span class="line"><span class="undefined">          callback(new Error('必须A照'));</span></span><br><span class="line"><span class="undefined">        &#125; else &#123;</span></span><br><span class="line"><span class="undefined">          callback();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    init () &#123;</span></span><br><span class="line"><span class="undefined">      console.log(this.car);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时在这个组件中，一切都是正常的，但是一个完整的项目里面，是不可能将所有的元素都堆积在一个页面中，那样的话以后的维护就会非常的麻烦。所以此时就需要一个子组件，然后将父组件中一些数据传递至子组件。<br>代码如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>小汽车子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"wheel"</span> <span class="attr">:rules</span>=<span class="string">"&#123;required: true,message: '请输入公共汽车车轮个数'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.wheel"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车司机驾照"</span> <span class="attr">prop</span>=<span class="string">"driver.license"</span> <span class="attr">:rules</span>=<span class="string">"&#123;validator: licenseCheck ,trigger:'blur'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.driver.license"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"driver.years"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.driver.years"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="undefined">    car: &#123;</span></span><br><span class="line"><span class="undefined">      type: Object,</span></span><br><span class="line"><span class="undefined">      default: function () &#123;</span></span><br><span class="line"><span class="undefined">        return &#123;&#125;;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    licenseCheck (rule, value, callback) &#123;</span></span><br><span class="line"><span class="undefined">      let m = this.car;</span></span><br><span class="line"><span class="undefined">      console.log(m);</span></span><br><span class="line"><span class="undefined">      debugger;</span></span><br><span class="line"><span class="undefined">      if (value != null) &#123;</span></span><br><span class="line"><span class="undefined">        if (value &lt;= 'D') &#123;</span></span><br><span class="line"><span class="undefined">          callback(new Error('必须C照以上'));</span></span><br><span class="line"><span class="undefined">        &#125; else &#123;</span></span><br><span class="line"><span class="undefined">          callback();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    init () &#123;</span></span><br><span class="line"><span class="undefined">      console.log(this.car);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted () &#123;</span></span><br><span class="line"><span class="undefined">    this.init();</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>当然在这个页面里面，一切都是可以正常输入的…就是<code>rules</code>无法使用。由于自己才是刚刚开始接触<code>vue</code>和<code>ElementUI</code>，所以对<code>vue</code>里面的一些使用技巧还不是很熟悉，这个时候看了下父组件里面的<code>prop</code>和<code>v-model</code>，发现<code>prop</code>都是比<code>v-model</code>少一个前缀…所以以为在子组件里面也是这样..其实后来才发新这个。</p><p>然后再去查看<code>ElementUI</code>的官网，发现</p><blockquote><p>prop    表单域 model 字段，在使用 validate、resetFields 方法的情况下，该属性是必填的    string    传入 Form 组件的 model 中的字段</p></blockquote><p>于时倒父组件中看了下，发现<code>el-form</code>确实有<code>:model</code>，然后参照了下<code>ElementUI</code>的介绍…突然想到是不是<code>prop</code>已经自动的将<code>:model</code>的对象带过来了…后来在子组件中进行了测试，修改后如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>小汽车子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"car.wheel"</span> <span class="attr">:rules</span>=<span class="string">"&#123;required: true,message: '请输入公共汽车车轮个数'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.wheel"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车司机驾照"</span> <span class="attr">prop</span>=<span class="string">"car.driver.license"</span> <span class="attr">:rules</span>=<span class="string">"&#123;validator: licenseCheck ,trigger:'blur'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.driver.license"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"小汽车车轮个数"</span> <span class="attr">prop</span>=<span class="string">"car.driver.years"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"car.driver.years"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="undefined">    car: &#123;</span></span><br><span class="line"><span class="undefined">      type: Object,</span></span><br><span class="line"><span class="undefined">      default: function () &#123;</span></span><br><span class="line"><span class="undefined">        return &#123;&#125;;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    licenseCheck (rule, value, callback) &#123;</span></span><br><span class="line"><span class="undefined">      let m = this.car;</span></span><br><span class="line"><span class="undefined">      console.log(m);</span></span><br><span class="line"><span class="undefined">      debugger;</span></span><br><span class="line"><span class="undefined">      if (value != null) &#123;</span></span><br><span class="line"><span class="undefined">        if (value === 'A') &#123;</span></span><br><span class="line"><span class="undefined">          callback(new Error('必须A照'));</span></span><br><span class="line"><span class="undefined">        &#125; else &#123;</span></span><br><span class="line"><span class="undefined">          callback();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    init () &#123;</span></span><br><span class="line"><span class="undefined">      console.log(this.car);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted () &#123;</span></span><br><span class="line"><span class="undefined">    this.init();</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>于是一切都正常了，后来为了测试是不是非要在<code>el-form</code>上加一个<code>:model</code>才能正常使用<code>rules</code>，所以就写了一个<code>el-form</code>测试。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">""</span> <span class="attr">prop</span>=<span class="string">"person.child.year"</span> <span class="attr">:rules</span>=<span class="string">"&#123;validator: childCheck ,trigger:'blur'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"person.child.year"</span> <span class="attr">placeholder</span>=<span class="string">"请输入小孩的年龄"</span> &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">import Car from './Car';</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    Car</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="undefined">    return &#123;</span></span><br><span class="line"><span class="undefined">      person: &#123;</span></span><br><span class="line"><span class="undefined">        child: &#123;</span></span><br><span class="line"><span class="undefined">          year: null</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    childCheck (rule, value, callback) &#123;</span></span><br><span class="line"><span class="undefined">      debugger;</span></span><br><span class="line"><span class="undefined">      if (parseInt(value) &gt; 16) &#123;</span></span><br><span class="line"><span class="undefined">        callback(new Error('请输入16以下'));</span></span><br><span class="line"><span class="undefined">      &#125; else &#123;</span></span><br><span class="line"><span class="undefined">        callback();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    init () &#123;</span></span><br><span class="line"><span class="undefined">      console.log(this.car);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后发现在<code>childCheck</code>里面<code>value</code>总是获取不到值…一直是 undefinded ,然后再在<code>el-form</code>里面加上一个<code>:modele</code>…修改如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">""</span> <span class="attr">prop</span>=<span class="string">"child.year"</span> <span class="attr">:rules</span>=<span class="string">"&#123;validator: childCheck ,trigger:'blur'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"person.child.year"</span> <span class="attr">placeholder</span>=<span class="string">"请输入小孩的年龄"</span> &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">import Car from './Car';</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    Car</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="undefined">    return &#123;</span></span><br><span class="line"><span class="undefined">      person: &#123;</span></span><br><span class="line"><span class="undefined">        child: &#123;</span></span><br><span class="line"><span class="undefined">          year: null</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    childCheck (rule, value, callback) &#123;</span></span><br><span class="line"><span class="undefined">      debugger;</span></span><br><span class="line"><span class="undefined">      if (parseInt(value) &gt; 16) &#123;</span></span><br><span class="line"><span class="undefined">        callback(new Error('请输入16以下'));</span></span><br><span class="line"><span class="undefined">      &#125; else &#123;</span></span><br><span class="line"><span class="undefined">        callback();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    init () &#123;</span></span><br><span class="line"><span class="undefined">      console.log(this.car);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后就都好了…</p><p>所以以后还是得多看看官方文档…</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>在Vue中使用filters来进行字典值的转换</title>
      <link href="/2019/05/27/%E5%9C%A8Vue%E4%B8%AD%E4%BD%BF%E7%94%A8filters%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%AD%97%E5%85%B8%E5%80%BC%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
      <url>/2019/05/27/%E5%9C%A8Vue%E4%B8%AD%E4%BD%BF%E7%94%A8filters%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%AD%97%E5%85%B8%E5%80%BC%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<p>在Vue里面，经常会遇到一些字典值的转换，而这些字典值由于和后端进行了约定的，一般不会轻易的改变，所以在前后端开发的项目中，这种字典值最好的做法是前端独立的保存一份，自己在前端自行进行处理。</p><p>我们的做法是使用<code>Vuex</code>的<code>store</code>配合<code>filters</code>来进行前端的字典值转化，首先是在<code>store</code>里面将字典值进行固定，然后通过<code>filters</code>在页面中进行一个转换。</p><h2 id="使用Store"><a href="#使用Store" class="headerlink" title="使用Store"></a>使用Store</h2><p>在<code>Vue</code>里面使用<code>store</code>首先需要安装<code>vuex</code>，安装完毕之后就可以直接在<code>main.js</code>里面直接引用了，但是为了统一管理还是决定新建一个<code>store</code>文件夹，然后将<code>store</code>相关的文件全部统一存放，新建完毕之后项目结构如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---App.vue</span><br><span class="line">---main.js</span><br><span class="line">---store</span><br><span class="line">-----index.js</span><br></pre></td></tr></table></figure></p><p>在新建的<code>index.js</code>里面将<code>Vuex</code>实例注入到<code>Vue</code>中，如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    score: [</span><br><span class="line">      <span class="number">60</span>,</span><br><span class="line">      <span class="number">80</span>,</span><br><span class="line">      <span class="number">100</span></span><br><span class="line">    ],</span><br><span class="line">    enum: &#123;</span><br><span class="line">      <span class="number">60</span>: <span class="string">'及格'</span>,</span><br><span class="line">      <span class="number">80</span>: <span class="string">'良好'</span>,</span><br><span class="line">      <span class="number">100</span>: <span class="string">'优秀'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></p><p>在这里我定义了两个变量，一个是<code>score</code>，一个是<code>enum</code>，<code>score</code>主要是为了展示一些固定的值在前端的展示，而<code>enum</code>则是准备介绍<code>filter</code>的使用</p><h3 id="新建一个Vue页面"><a href="#新建一个Vue页面" class="headerlink" title="新建一个Vue页面"></a>新建一个Vue页面</h3><p>在这个页面里面，主要是介绍<code>store</code>的直接使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item, index) of score"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  computed: &#123;</span></span><br><span class="line"><span class="javascript">    ...mapState([<span class="string">'score'</span>])</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后查看页面，就会发现页面上已经出现了三个分数，分别是在<code>store</code>里面定义的60，80，100。这种方式是通过<code>...mapState</code>来获取的<code>state</code>里面定义的一些值。</p><p>通过这种方式有几种好处，第一就是当需要改变前端某一个字段的值的时候，则可以直接通过<code>store</code>从而减少对项目的改动，其二就是可以让前端项目更加规范、可扩展。</p><h2 id="使用filter来进行一些值的处理"><a href="#使用filter来进行一些值的处理" class="headerlink" title="使用filter来进行一些值的处理"></a>使用filter来进行一些值的处理</h2><p>为了大大提高前端的可扩展性，通过会对一些固定的值进行转换。例如性别，后端可能会返回 0 或者 1，若前端在某些页面上需要显示为<code>男|女</code>，而在某一些页面上需要显示<code>先生|女士</code>，此时通过<code>filter</code>来进行处理，则是一个不错的选择。</p><h3 id="新建一个文件夹和js文件"><a href="#新建一个文件夹和js文件" class="headerlink" title="新建一个文件夹和js文件"></a>新建一个文件夹和js文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---App.vue</span><br><span class="line">---main.js</span><br><span class="line">---store</span><br><span class="line">-----index.js</span><br><span class="line">---utils</span><br><span class="line">-----filter.js</span><br></pre></td></tr></table></figure><p>filter.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">enumConvert</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> store.state.enum[val];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>main.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> filters <span class="keyword">from</span> <span class="string">'./utils/filter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(filters).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  Vue.filter(key, filters[key]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在这里通过<code>Vue.filter</code>将filter方法进行全局注册，然后在<code>Vue</code>页面进行使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item, index) of score"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item | convert&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  computed: &#123;</span></span><br><span class="line"><span class="javascript">    ...mapState([<span class="string">'score'</span>])</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  filters: &#123;</span></span><br><span class="line"><span class="undefined">    convert (val) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> Vue.filter(<span class="string">'enumConvert'</span>)(val);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时页面上就会展示<code>及格</code>，<code>良好</code>，<code>优秀</code>了</p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue中nextTick的使用</title>
      <link href="/2019/05/20/Vue%E4%B8%ADnextTick%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/05/20/Vue%E4%B8%ADnextTick%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>这段时间一直在负责一个前后端项目，前端是<code>Vue</code>+<code>ElemeUI</code>，由于自己之前只是会简单的使用 Vue 的一些初级命令，自然只能慢慢的踩坑，然后再出坑….。例如<code>数组无法触发Vue的视图更新</code></p><p>刚开始在使用 Vue 的时候，一直都是在 <code>created</code> 方法里面获取后端数据进行渲染，这样用起来倒也没什么问题，只不过今天突然看到了 Vue 的<code>nextTick</code> 方法，感觉比之前在<code>created</code>里面请求后端更加高级。所以顺便研究了一波。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p><code>nextTick</code>常用于数据更新后，但是dom元素还未完成刷新，如何理解呢? 在 Vue 里面，更新 DOM 元素是异步的，也就是说当我们修改了数据之后，DOM元素并不会立即被刷新。参考<a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97" target="_blank" rel="noopener">深入响应式原理</a></p><p>如下Demo<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">'id'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"nextClick"</span>&gt;</span>点击测试<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      id: <span class="string">'q'</span></span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted () &#123;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    nextClick () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.id = <span class="string">'m'</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> obj = <span class="built_in">document</span>.getElementById(<span class="keyword">this</span>.id);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> one = <span class="built_in">document</span>.getElementById(_this.id);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(one);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(obj);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时你在控制台会看到<code>obj</code>获取的是null，<code>one</code>获取的dom节点才是正确的。</p><p><a href="https://stackoverflow.com/questions/47634258/what-is-nexttick-or-what-does-it-do-in-vuejs" target="_blank" rel="noopener">StackOverFlow关于这个的另一个解释</a></p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JDK1.8下ConcurrentHashMap的一些理解(一)</title>
      <link href="/2019/05/13/JDK1.8%E4%B8%8BConcurrentHashMap%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3(%E4%B8%80)/"/>
      <url>/2019/05/13/JDK1.8%E4%B8%8BConcurrentHashMap%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<p>在JDK1.8里面，<code>ConcurrentHashMap</code>在put方法里面已经将分段锁移除了，转而是CAS锁和synchronized</p><p><code>ConcurrentHashMap</code>是Java里面同时兼顾性能和线程安全的一个键值对集合，同属于键值对的集合还有<code>HashTable</code>以及<code>HashMap</code>，<br><code>HashTable</code>是一个线程安全的类，因为它的所有<code>public</code>方法都被<code>synchronized</code>修饰，这样就导致了一个问题，就是效率太低。</p><p>虽然<code>HashMap</code>在<code>JDK1.8</code>的并发场景下触发扩容时不会出现成环了，但是会出现数据丢失的情况。<br>所以如果需要在多线程的情况下(多读少写))使用Map集合的话，<code>ConcurrentHashMap</code>是一个不错的选择。</p><p><code>ConcurrentHashMap</code>在JDK1.8的时候将put()方法中的分段锁<code>Segment</code>移除，转而采用一种<code>CAS</code>锁和<code>synchronized</code>来实现插入方法的线程安全。<br>如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Implementation for put and putIfAbsent */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//省略相关代码</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                tab = initTable();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                             <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                    <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                V oldVal = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="comment">//省略相关代码</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> oldVal;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到在<code>JDK1.8</code>里面，<code>ConcurrentHashMap</code>是直接采用<code>数组</code>+<code>链表</code>+<code>红黑树</code>来实现，时间复杂度在O(1)和O(n)之间，如果链表转化为红黑树了，那么就是O(1)到O(nlogn)。<br>在这里值得一提的是，<code>ConcurrentHashMap</code>会判断<code>tabAt(tab, i = (n - 1) &amp; hash)</code>是不是 null，是的话就直接采用<code>CAS</code>进行插入，而如果不为空的话，则是<code>synchronized</code>锁住当前<code>Node</code>的首节点，这是因为当该<code>Node</code>不为空的时候，证明了此时出现了<code>Hash</code>碰撞，就会涉及到<code>链表</code>的尾节点新增或者<code>红黑树</code>的节点新增以及<code>红黑树</code>的平衡，这些操作自然都是非原子性的。</p><p>从而导致无法使用<code>CAS</code>，当<code>Node</code>的当前下标为null的时候，由于只是涉及数组的新增，所以用<code>CAS</code>即可。</p><blockquote><p>因为CAS是一种基于版本控制的方式来实现，而碰撞之后的操作太多，所以直接用<code>synchronized</code>比较合适。</p></blockquote><h3 id="ConcurrentHashMap在迭代时和HashMap的区别"><a href="#ConcurrentHashMap在迭代时和HashMap的区别" class="headerlink" title="ConcurrentHashMap在迭代时和HashMap的区别"></a>ConcurrentHashMap在迭代时和HashMap的区别</h3><p>当一个集合在迭代的时候如果动态的添加或者删除元素，那么就会抛出<code>Concurrentmodificationexception</code>，但是在<code>ConcurrentHashMap</code>里面却不会，例如如下代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;String,String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;String, String&gt;();</span><br><span class="line">    map.put(<span class="string">"a"</span>,<span class="string">"a1"</span>);</span><br><span class="line">    map.put(<span class="string">"b"</span>,<span class="string">"b1"</span>);</span><br><span class="line">    map.put(<span class="string">"c"</span>,<span class="string">"c1"</span>);</span><br><span class="line">    map.put(<span class="string">"d"</span>,<span class="string">"d1"</span>);</span><br><span class="line">    map.put(<span class="string">"e"</span>,<span class="string">"e1"</span>);</span><br><span class="line">    Iterator&lt;String&gt; iterator = map.keySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        String it = iterator.next();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"b"</span>.equals(it))&#123;</span><br><span class="line">            map.remove(<span class="string">"d"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(it);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">控制台打印如下：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">e</span><br></pre></td></tr></table></figure></p><p>而当你把<code>ConcurrentHashMap</code>换成<code>HashMap</code>的时候，控制台就会抛出一个异常:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> a</span><br><span class="line">b</span><br><span class="line">java.util.ConcurrentModificationException</span><br><span class="line">at java.util.HashMap$HashIterator.nextNode(HashMap.java:<span class="number">1442</span>)</span><br><span class="line">at java.util.HashMap$KeyIterator.next(HashMap.java:<span class="number">1466</span>)</span><br><span class="line">at xyz.somersames.ListTest.main(ListTest.java:<span class="number">22</span>)</span><br></pre></td></tr></table></figure></p><p>原因在于<code>ConcurrentHashMap</code>的<code>next</code>方法并不会去检查<code>modCount</code>和<code>expectedModCount</code>，但是会检查下一个节点是不是为空<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((p = next) == <span class="keyword">null</span>)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br></pre></td></tr></table></figure></p><p>当我们进行remove的时候，<code>ConcurrentHashMap</code>会直接通过修改指针的方式来进行移除操作，同样的，也会锁住<code>数组</code>的头节点直至移除结束，所以在同一个时刻，只会有一个线程对<code>当前数组下标的所有节点</code>进行操作。</p><p>但是在<code>HashMap</code>里面，<code>next</code>方法会进行一个check，而remove操作会修改<code>modCount</code>，导致<code>modCount</code>和<code>expectedModCount</code>不相等，所以就会导致<br><code>ConcurrentModificationException</code></p><p>稍微修改下代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;String,String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;String, String&gt;();</span><br><span class="line">    map.put(<span class="string">"a"</span>,<span class="string">"a1"</span>);</span><br><span class="line">    map.put(<span class="string">"b"</span>,<span class="string">"b1"</span>);</span><br><span class="line">    map.put(<span class="string">"c"</span>,<span class="string">"c1"</span>);</span><br><span class="line">    map.put(<span class="string">"d"</span>,<span class="string">"d1"</span>);</span><br><span class="line">    map.put(<span class="string">"e"</span>,<span class="string">"e1"</span>);</span><br><span class="line">    Iterator&lt;String&gt; iterator = map.keySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"b"</span>.equals(iterator.next()))&#123;</span><br><span class="line">            map.remove(<span class="string">"d"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">控制台打印如下:</span><br><span class="line">b</span><br><span class="line">d</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.util.NoSuchElementException</span><br><span class="line">at java.util.concurrent.ConcurrentHashMap$KeyIterator.next(ConcurrentHashMap.java:<span class="number">3416</span>)</span><br><span class="line">at com.xzh.ssmtest.ListTest.main(ListTest.java:<span class="number">25</span>)</span><br></pre></td></tr></table></figure></p><h3 id="并发下的处理"><a href="#并发下的处理" class="headerlink" title="并发下的处理"></a>并发下的处理</h3><p>由于每一个<code>Node</code>的首节点都会被<code>synchronized</code>修饰，从而将一个元素的新增转化为一个原子操作，同时<code>Node</code>的<code>value</code>和<code>next</code>都是由<code>volatile</code>关键字进行修饰，从而可以保证可见性。</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>单例模式引起的一些思考</title>
      <link href="/2019/05/04/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
      <url>/2019/05/04/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>单例模式通常有饿汉式和懒汉式，懒汉式</p><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p>无线程安全性问题<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleHungryStyle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleHungryStyle instince = <span class="keyword">new</span> SingleHungryStyle();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleHungryStyle <span class="title">getInstince</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instince;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><h4 id="单线程下"><a href="#单线程下" class="headerlink" title="单线程下"></a>单线程下</h4><blockquote><p>demo1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLazyStyle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleLazyStyle instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleLazyStyle <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingleLazyStyle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码在多线程的情况下会出现多个实例，所以需要进行一个加锁判断。</p><h4 id="多线程下"><a href="#多线程下" class="headerlink" title="多线程下"></a>多线程下</h4><blockquote><p>demo2</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLazy1Style</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleLazy1Style instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleLazy1Style <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SingleLazy1Style.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> SingleLazy1Style();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码在多线程的情况下运行多次偶尔会出现一个问题，就是CPU的重排序会导致<code>instance</code>还未完全初始化就被使用了。</p><p>例如:</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.png" alt=""></p><p>此时<code>线程二</code>就有可能报错，因为JVM在进行一个类的初始化的时候是分为三步的。</p><p><code>Java SE 8</code>的JVM规范里面对一个类的加载进行了详细的描述：<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.2" target="_blank" rel="noopener">Java SE 8的JVM规范</a>。<br>具体来说就是分为三步：</p><ul><li>Loading</li><li>Linking</li><li>Initializing</li></ul><h5 id="Creation-and-Loading"><a href="#Creation-and-Loading" class="headerlink" title="Creation and Loading"></a>Creation and Loading</h5><p>在这一步，JVM需要判断需要初始化的类是<code>数组</code>还是一个<code>普通类</code>，如果是一个普通类的话，就再进行判断是需要使用<code>bootstrap class loader</code>来进行加载还是说用<code>user-defined class loader</code>进行加载。</p><h5 id="Linking"><a href="#Linking" class="headerlink" title="Linking"></a>Linking</h5><p>在这一步主要是<code>验证</code>和<code>准备</code></p><ul><li>Verification</li><li>Preparation</li><li>Resolution</li></ul><p>而将未初始化的引用绑定到实例上就是<code>Resolution</code>。具体可以参考:<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html" target="_blank" rel="noopener"> Java SE 8的JVM规范 5.4.3</a></p><h5 id="Initializing"><a href="#Initializing" class="headerlink" title="Initializing"></a>Initializing</h5><p>初始化，即将字段进行一个默认值初始化。</p><p>但是这里因为<code>Linking</code>和<code>Initializing</code>之间并无任何的关联性，所以可能会导致先进行了一个初始化，但是并未将该引用绑定到堆的一个实例上，而此时由轮到另一个线程执行。所以就会导致另一个线程获取的是空对象。</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>但是在这个初始化的过程中，<code>Linking</code>和<code>Initializing</code>之间由于互相不依赖，所以<code>CPU</code>可能会先进行初始化，但是并未进行<code>关联</code>，即将引用关联到JVM里面的一个实例。而直接返回了。此时由于<code>happens-before原则</code>并不能跨线程，所以会出现两种情况：</p><ul><li>如果线程一在线程二之前使用了<code>instance</code>，此时线程二使用<code>instance</code>不会出现任何问题</li><li>如果线程一在初始化完毕之后释放了锁资源，然后线程二执行，因为线程二判断<code>instance</code>已经被初始化了（但此时实际上并未Linking），所以在使用的时候会报错。</li></ul><p>但是这个时候，由于<code>CPU的重排序</code>，导致<code>线程二</code>获取的<code>instance</code>可能出现空指针异常;</p><p>所以一般为了避免这种情况，会加一个<code>volatile</code>关键字来禁止内存重排序。</p><blockquote><p>demo3</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLazy2Style</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingleLazy2Style instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleLazy2Style <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingleLazy2Style.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingleLazy2Style();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>在这里之所以使用<code>volatile</code>的特性之一：防止内存进行重排序（包含写屏障和读屏障）</p><h3 id="happens-before原则"><a href="#happens-before原则" class="headerlink" title="happens-before原则"></a>happens-before原则</h3><p><a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.4.5" target="_blank" rel="noopener">Java SE 8中Happens-before原则</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Two actions can be ordered by a happens-before relationship. If one action happens-before another, then the first is visible to and ordered before the second.</span><br><span class="line"></span><br><span class="line">If we have two actions x and y, <span class="function">we write <span class="title">hb</span><span class="params">(x, y)</span> to indicate that x happens-before y.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">If x and y are actions of the same thread and x comes before y in program order, then <span class="title">hb</span><span class="params">(x, y)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">There is a happens-before edge from the end of a constructor of an object to the start of a <span class="title">finalizer</span> <span class="params">(§<span class="number">12.6</span>)</span> <span class="keyword">for</span> that object.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">If an action x synchronizes-with a following action y, then we also have <span class="title">hb</span><span class="params">(x, y)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">If <span class="title">hb</span><span class="params">(x, y)</span> and <span class="title">hb</span><span class="params">(y, z)</span>, then <span class="title">hb</span><span class="params">(x, z)</span></span></span><br></pre></td></tr></table></figure><p><code>happens-before原则</code>要求在一个线程内，重排序后执行的结果与未重排序之前的执行结果必须一致。所以在<code>demo1</code>中单线程里面，是不会出现任何问题的，因为即使发生重排序，最后在使用<code>instance</code>的时候，instance也一定会完成初始化，否则就是编译器bug了。</p><p>但是在多线程的情况下，<code>happens-before</code>原则无法生效，所以就会导致其他线程在获取实例的时候会出现异常。</p><p>所以在多线程的情况下需要使用<code>volatile</code>关键字进行修饰，主要是因为需要确保首个初始化的线程必须完成整个类的初始化的操作。</p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JDK1.7和1.8中的HashMap区别</title>
      <link href="/2019/04/08/JDK1-7%E5%92%8C1-8%E4%B8%AD%E7%9A%84HashMap%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/04/08/JDK1-7%E5%92%8C1-8%E4%B8%AD%E7%9A%84HashMap%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>Jdk1.7和1.8中，HashMap的一些关键点几乎重写了。</p><h2 id="主要变更点："><a href="#主要变更点：" class="headerlink" title="主要变更点："></a>主要变更点：</h2><h3 id="1-hash扰动算法"><a href="#1-hash扰动算法" class="headerlink" title="1. hash扰动算法"></a>1. hash扰动算法</h3><p>在jdk1.7的时候，HahMap的hash扰动算法如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而在jdk1.8的时候，其hash算法已经修改为如下了:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>HashMap在放入一个元素的时候，首先会获取其<code>HashCode</code>，然后将 key 的 HashCode 进行扰动，避免同一个碰撞概率太大。<br>如下例子。</p><p>假设一个key <code>a</code> 的 hashCode 为 <code>1010 1010 1110 1101 1110 1111 1000 0110</code>，如果不进行扰动，那么直接与table的长度 -1 进行<strong>与</strong>运，若table的长度是16，则计算的过程如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1010</span> <span class="number">1010</span> <span class="number">1110</span> <span class="number">1101</span> <span class="number">1110</span> <span class="number">1111</span> <span class="number">1000</span> <span class="number">0110</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span></span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0110</span></span><br></pre></td></tr></table></figure></p><p>计算结果得出： <code>a</code> 的数组下标就是 6</p><p>但是这样就会出现一个问题，即每一次比较的都是最低位，如果某一个 key 和<code>a</code>的高位不同，低位却相同。每一次都是取最低位的几个数值进行运算，那么就会产生很严重的<code>hash碰撞</code>，所以就需要进行<code>hash</code>扰动以减少<code>hash碰撞</code>的概率。</p><h3 id="以-jdk1-8-的扰动算法为例"><a href="#以-jdk1-8-的扰动算法为例" class="headerlink" title="以 jdk1.8 的扰动算法为例"></a>以 jdk1.8 的扰动算法为例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1010</span> <span class="number">1010</span> <span class="number">1110</span> <span class="number">1101</span> <span class="number">1110</span> <span class="number">1111</span> <span class="number">1000</span> <span class="number">0110</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1010</span> <span class="number">1010</span> <span class="number">1110</span> <span class="number">1101</span>  ^ &gt;&gt;&gt;<span class="number">16</span></span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="number">1010</span> <span class="number">1010</span> <span class="number">1110</span> <span class="number">1101</span> <span class="number">0101</span> <span class="number">0101</span> <span class="number">0110</span> <span class="number">1000</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>  &amp;</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1000</span>   <span class="number">8</span></span><br></pre></td></tr></table></figure><p>为什么进行扰动后，碰撞的概率会降低。具体的原因可以阅读这边文章<br><a href="http://vanillajava.blogspot.com/2015/09/an-introduction-to-optimising-hashing.html" target="_blank" rel="noopener">An introduction to optimising a hashing strategy</a></p><h3 id="2-HashMap的数据结构出现了变化"><a href="#2-HashMap的数据结构出现了变化" class="headerlink" title="2. HashMap的数据结构出现了变化"></a>2. HashMap的数据结构出现了变化</h3><p>在 jdk1.7的时候，HashMap是由一个数组和一个链表构成的。<br>插入规则如下：</p><ol><li>计算新插入的 key 的 hashCode，然后通过 hashCode 计算索引，找出该key在<code>Entry</code>中的位置，然后判断该下标是否有元素，如果没有则直接进行插入。</li></ol><ol start="2"><li>如果有的话就按照如下规则找出是否有相同的 key：<blockquote><p>hash相同且key相同<br>hash相同且equals方法返回相同</p></blockquote></li></ol><p>若相同，则直接将当前的 value 替换原来的 value。</p><ol start="3"><li>如果最后还是未发现相同的 key ，则新建一个<code>Entry</code> ，并将头节点设置为该<code>Entry</code>。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment">    * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment">    * value is replaced.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment">    *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">    *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment">    *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">       <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">       <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">       <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">           Object k;</span><br><span class="line">           <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">               V oldValue = e.value;</span><br><span class="line">               e.value = value;</span><br><span class="line">               e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">               <span class="keyword">return</span> oldValue;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       modCount++;</span><br><span class="line">       addEntry(hash, key, value, i);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">       Entry&lt;K,V&gt; e = table[bucketIndex]; <span class="comment">//找出原来table中的元素</span></span><br><span class="line">       table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">       <span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">           resize(<span class="number">2</span> * table.length);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//注意，此时将该节点是作为现在的table的头节点，原来的e则是新节点的next</span></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Creates new entry.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">           value = v;</span><br><span class="line">           next = n;</span><br><span class="line">           key = k;</span><br><span class="line">           hash = h;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ol><p>以下是在 jdk1.7 的时候第三种方式插入的极简版：<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/HashMap1.7.png" alt=""></p><h4 id="而在-jdk1-8-的时候，则是由一个数组加一个链表、红黑树组成"><a href="#而在-jdk1-8-的时候，则是由一个数组加一个链表、红黑树组成" class="headerlink" title="而在 jdk1.8 的时候，则是由一个数组加一个链表、红黑树组成"></a>而在 jdk1.8 的时候，则是由一个数组加一个链表、红黑树组成</h4><p>之所以这样改进，是因为在极端情况下，如果所有的元素都 hash 到了一个下标，那么这样的话，HashMap在查找元素的时候就会退化到一个链表，其时间复杂度是<code>O(n)</code>。</p><p>为了应对这种情况，HashMap在1.8的时候会判断链表上的元素，如果超过了 <code>8</code> 个，就会将链表转化为红黑树。同时在 1.8 的时候，HashMap将链表的插入方式修改为尾插入。</p><blockquote><p>提示：修改为尾插入是为了避免在并发的情况下出现链表成环（在jdk1.7之前会出现、同时HashMap并不适用并发场景下）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//......省略相关代码</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                     <span class="comment">// 在未节点进行插入</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st。如果大于8，则会将链表转为红黑树</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上述的变动最大点在于这两行代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">    treeifyBin(tab, hash);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一行是进行尾插入(1.7是头插入)</p><p>第二行是大于8会进行链表到红黑树的转化</p><h3 id="jdk1-7采用头节点插入导致的链表成环"><a href="#jdk1-7采用头节点插入导致的链表成环" class="headerlink" title="jdk1.7采用头节点插入导致的链表成环"></a>jdk1.7采用头节点插入导致的链表成环</h3><p>虽然<code>HashMap</code>是一个非线程安全的，但是如果在 jdk1.7 版本中将HashMap用于并发环境下会出现什么情况呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">        Entry[] oldTable = table;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">        <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">        transfer(newTable);</span><br><span class="line">        table = newTable;</span><br><span class="line">        threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// jdk1.7 扩容代码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>&#123;</span><br><span class="line">        Entry[] src = table;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = src[j];</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                src[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                    <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">                    e.next = newTable[i];</span><br><span class="line">                    newTable[i] = e;</span><br><span class="line">                    e = next;</span><br><span class="line">                &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h5 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h5><hr><p><strong>此时假设线程二已经将hashMap扩容完毕，但是线程一还在被挂起。</strong><br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/hashMap1.0.png" alt=""></p><p>线程一执行，此时 <code>e</code>是为1，next却是2。</p><hr><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/HshMap%E7%BA%BF%E7%A8%8B%E4%B8%80%E7%AC%AC%E4%B8%80%E6%AC%A1transfer.png" alt=""></p><p>线程一第一次循环执行完毕，此时的<code>e</code>是2，然后`e.next是3。</p><hr><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/HashMap%E7%BA%BF%E7%A8%8B%E4%B8%80%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%89%A7%E8%A1%8C.png" alt=""></p><p>线程一第二次循环执行完毕，此时的<code>e</code>是3，然后<code>e.next是1</code>，注意此时<strong>线程二</strong>中，已经将 <code>3</code> 的next指向了 <code>1</code> ，所以此时<code>e</code>是3，然后 <code>next</code> 是1。</p><hr><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/HashMap%E7%BA%BF%E7%A8%8B%E4%B8%80%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%BE%AA%E7%8E%AF.png" alt=""></p><p>此时第三次循环完毕，由于<code>e</code>还不为空，于是进行第四次循环(<strong>主要原因是线程二已经将<code>3</code>的next指向为<code>1</code></strong>)。<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/HashMap%E7%BA%BF%E7%A8%8B%E4%B8%80%E5%BE%AA%E7%8E%AF%E5%AE%8C%E6%AF%95.png" alt=""></p><p>由于<code>1</code>的 next 是 null，所以循环结束。</p><h3 id="jdk1-8的尾节点插入"><a href="#jdk1-8的尾节点插入" class="headerlink" title="jdk1.8的尾节点插入"></a>jdk1.8的尾节点插入</h3><p>由上面的分析可以不难发现，造成链表成环的主要原因为：多线程下，头节点插入导致原来的链表的尾节点有了<code>next</code>，所以最后会多循环一遍，从而成环。</p><p>而在jdk1.8采用的为节点插入在多线程下，顶多是另一个线程把前面一个线程 resize 的过程再重复一遍，却不会再出现链表成环。</p><h3 id="多线程下通用的bug"><a href="#多线程下通用的bug" class="headerlink" title="多线程下通用的bug"></a>多线程下通用的bug</h3><p>虽然 jdk1.8 修复了链表成环这一个问题，但是多线程的情况下导致的<code>数据丢失</code>问题确实一直存在的。</p><p>所以不要尝试在多线程的情况下使用<code>HashMap</code>，如果需要用到<code>Map</code>结构的话，可以用<code>CurrentHashMap</code>或者<code>HashTable</code></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java集合学习之HashSet</title>
      <link href="/2019/04/04/Java%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0%E4%B9%8BHashSet/"/>
      <url>/2019/04/04/Java%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0%E4%B9%8BHashSet/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在一般的使用中，HashSet经常用于数据的去重，例如我们有一个List，这个List里面有一些重复的数据，于是我们便可以这样操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"b"</span>);</span><br><span class="line">list.add(<span class="string">"c"</span>);</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">Set&lt;String&gt; set =<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">set.addAll(list);</span><br></pre></td></tr></table></figure></p><p>此时，在Set里面，只会有一个<code>a</code>元素。</p><h2 id="底层"><a href="#底层" class="headerlink" title="底层"></a>底层</h2><p>其实<code>HashSet</code>的底层是一个<code>HashMap</code>，<code>HashSet</code>的去重使用了<code>HashMap</code>的<code>Key</code>。<br>如图所示：<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/HashSet%E5%BA%95%E5%B1%82.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds the specified element to this set if it is not already present.</span></span><br><span class="line"><span class="comment"> * More formally, adds the specified element &lt;tt&gt;e&lt;/tt&gt; to this set if</span></span><br><span class="line"><span class="comment"> * this set contains no element &lt;tt&gt;e2&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;(e==null&amp;nbsp;?&amp;nbsp;e2==null&amp;nbsp;:&amp;nbsp;e.equals(e2))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> * If this set already contains the element, the call leaves the set</span></span><br><span class="line"><span class="comment"> * unchanged and returns &lt;tt&gt;false&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be added to this set</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this set did not already contain the specified</span></span><br><span class="line"><span class="comment"> * element</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashSet的<code>add</code>方法是向一个map里面放入元素，而<code>HashMap</code>则是不允许键重复，所以就可以确保在<code>HashMap</code>上的键都是不重复的。</p><h2 id="HashMap是如何确保每一个对象都只有一个的呢"><a href="#HashMap是如何确保每一个对象都只有一个的呢" class="headerlink" title="HashMap是如何确保每一个对象都只有一个的呢?"></a>HashMap是如何确保每一个对象都只有一个的呢?</h2><p>首先当调用<code>HashSet</code>的add方法的时候，其实是调用HashMap的<code>put</code>方法，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment">    * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment">    * value is replaced.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment">    *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">    *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment">    *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>这个方法无非是先将这个key进行hash，然后再调用<code>putVal</code>方法进行保存，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这个是<code>HashMap</code>的底层方法，当首次传入值的时候，</p><blockquote><p>   if ((tab = table) == null || (n = tab.length) == 0){<br>           n = (tab = resize()).length;}</p></blockquote><p>如果table未空就进行初始化，如果不为空则执行下面的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Node&lt;K,V&gt; e; K k;</span><br><span class="line"><span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">    ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">    e = p;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">    e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                treeifyBin(tab, hash);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        p = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在HashMap里面，有一个数组<code>table</code>存放着所有的<code>key</code>，而 HashMap 定位下标的方式就是通过<code>(n - 1) &amp; hash</code>。</p><p>当HashMap发现该下标的值是<code>null</code>，就会直接将入参的<code>key</code>和<code>value</code>疯转成一个Node保存进去，如果发现不是<code>null</code>，则<code>HashMap</code>认为发生了<code>HashMap</code>碰撞，于时进行如下判断:</p><p>如果新传入的一个key在<code>HashMap</code>中已经存在，则<code>HashMap</code>会直接将旧的key的value替换掉。否则就会进行新增<br>HashMap在判断一个key是否相等会采取以下措施：</p><p><strong>如果两个Key的hash不同，则HashMap直接会判断key不等</strong></p><ol><li>Key和hash完全相同<blockquote><p>第一次传入key=a，Hash值是1，value是100;<br>第二次传入key=a，Hash值是1，value是101;</p></blockquote></li></ol><p>此时hashMap会认为新传入的key已经存在，所以会将旧的value替换为新的value</p><p><strong>产生Hash碰撞，也就是两个key的hash都是一样的，那么就会通过key是否相同或者equals方法判断对象是否相等了</strong></p><ol start="2"><li>Key不同，hash相同 </li></ol><p>HashMap会判断传入的key、以及key的hash值，如果相等则认为该键以相等，例如:</p><blockquote><p>第一次传入key:a，Hash值是1;<br>第二次传入key:b，Hash值是1;</p></blockquote><p>这个时候由于key不同，hashMap还会通过equals继续判断。</p><ol start="3"><li>由于第二次传入的key是<code>b</code>，但是他们的Key并不相等，此时<code>HashMap</code>就会调用他们的<code>equals</code>方法，如果通过<code>equals</code>方法判断的是相同对象，则也会认为是同一个key。</li></ol><p>此时如果判断新增的key确实不存在就会在当前的table位置通过链表地址方法辛增一个key了。</p><p>那么到这里就可以看到，其实<code>HashSet</code>就是完全的利用了<code>HashMap</code>的键的特性来进行去重。</p><h2 id="Iterator方法"><a href="#Iterator方法" class="headerlink" title="Iterator方法"></a>Iterator方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Returns an iterator over the elements in this set.  The elements</span></span><br><span class="line"><span class="comment">  * are returned in no particular order.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> an Iterator over the elements in this set</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span> ConcurrentModificationException</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> map.keySet().iterator();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>其实都是利用了<code>hashMap</code>的一些方法来实现</p><h2 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全"></a>线程不安全</h2><p>由于HshMap是非线程安全的，自然HashSet也不是一个线程安全的。测试代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Set&lt;Integer&gt; set =<span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">            set.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        HashSetTest hashSetTest =<span class="keyword">new</span> HashSetTest();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(hashSetTest);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(hashSetTest);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(hashSetTest.set.size());</span><br><span class="line">        Set&lt;Integer&gt; set =<span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Integer i :hashSetTest.set)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(i))&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到打印出来的结果会多于<code>10000</code>，这是因为在上面也说到过的，HashMap在判断一个key是否相同以及后续新增节点的时候并非是一个原子性的，所以就有可能会导致<code>t1</code>线程刚好判断10不在hashMap中，准备新增一个节点为10。结果此时t1被挂起，t2执行，但是t2也判断了10不在hashMap中，也准备新增，那么此时就会出现新增了两个一摸一样的Key。这样就会导致<code>Set</code>集合中出现了重复的数据。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring中AOP的探索与实践(二)之Mongo多数据源切换</title>
      <link href="/2019/03/13/Spring%E4%B8%ADAOP%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5(%E4%BA%8C)%E4%B9%8BMongo%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/"/>
      <url>/2019/03/13/Spring%E4%B8%ADAOP%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5(%E4%BA%8C)%E4%B9%8BMongo%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/</url>
      <content type="html"><![CDATA[<p>在之前的一片文章中介绍了使用AOP的方式来实现Redis的多数据源切换。而今天这一篇则是主要讲述<code>Mongo</code>的多数据源切换。</p><p>使用AOP来实现Mongo的数据源切换与Redis的AOP切换相同，不同之处是需要替换<code>MongoRepository</code>里面的<code>MongoOperations</code>,从而实现多数据源的切换</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>配置类，读取Mongo的配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoMultiProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(MongoMultiProperties.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"mongodb1"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.data.mongodb.db1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MongoProperties <span class="title">db1Properties</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"正在初始化db1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MongoProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"mongodb2"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.data.mongodb.db2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MongoProperties <span class="title">db2Properties</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"正在初始化db2"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MongoProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置<code>MongoRepository</code></p><blockquote><p>以下是为了演示，所以配置了两个MongoRepository，实际上使用了AOP的方式实现的多数据源，只需要配置一个默认的MongoRepository即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableMongoRepositories</span>(mongoTemplateRef = <span class="string">"mongoDB2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DB2Template</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"mongodb2"</span>)</span><br><span class="line">    <span class="keyword">private</span> MongoProperties mongoProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"mongoDB2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MongoTemplate <span class="title">db2Template</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MongoTemplate(db2Factory(mongoProperties));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MongoDbFactory <span class="title">db2Factory</span><span class="params">(MongoProperties mongoProperties)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleMongoDbFactory(<span class="keyword">new</span> MongoClient(mongoProperties.getHost(),mongoProperties.getPort()),mongoProperties.getDatabase());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DB2Repository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">MongoDB2</span>,<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>省略<code>DB1Template</code>的配置，基本上都是差不多的</p><h2 id="一般使用"><a href="#一般使用" class="headerlink" title="一般使用"></a>一般使用</h2><p>上述的配置如果都OK的话，则可以直接使用<code>@Autowired</code>注解使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DB2Repository db2Repository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DB1Repository db1Repository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mongoUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        db2Repository.save(<span class="keyword">new</span> MongoDB2());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是使用AOP的方式的话，切<code>Service</code>还是<code>Repository</code>是需要选择的，首先因为在业务使用中，肯定是包含许多的<code>Service</code>的，如果以后需要再添加其他的<code>Service</code>，还需要添加切点，比较麻烦。</p><p>如果是切<code>Repository</code>的话，那么这就好办了，直接配置一个主Repository，然后切这个主Repository，这样就可以将Service和AOP进行解耦。从而在Service里面，可以随意使用其他的数据源，例如:Mysql数据源，Redis数据源等。更加灵活</p><h2 id="切面写法"><a href="#切面写法" class="headerlink" title="切面写法"></a>切面写法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order</span>(-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoAspect</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.somersames.config.mongo.db2.DB2Repository.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doSwitch</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aopTest1(joinPoint);</span><br><span class="line"><span class="comment">//        aopTest2(joinPoint);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">aopTest1</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Field methodInvocationField = joinPoint.getClass().getDeclaredField(<span class="string">"methodInvocation"</span>);</span><br><span class="line">        methodInvocationField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        ReflectiveMethodInvocation o = (ReflectiveMethodInvocation) methodInvocationField.get(joinPoint);</span><br><span class="line">        Field targetField = o.getClass().getDeclaredField(<span class="string">"target"</span>);</span><br><span class="line">        targetField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object target = targetField.get(o);</span><br><span class="line">        Field modifiersField = Field.class.getDeclaredField(<span class="string">"modifiers"</span>);</span><br><span class="line">        modifiersField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object singletonTarget = AopProxyUtils.getSingletonTarget(target);</span><br><span class="line">        Field mongoOperationsField = singletonTarget.getClass().getDeclaredField(<span class="string">"mongoOperations"</span>);</span><br><span class="line">        mongoOperationsField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//需要移除final修饰的变量</span></span><br><span class="line">        modifiersField.setInt(mongoOperationsField,mongoOperationsField.getModifiers()&amp;~Modifier.FINAL);</span><br><span class="line">        mongoOperationsField.set(singletonTarget, applicationContext.getBean(<span class="string">"mongoDB1"</span>));</span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">aopTest2</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Field methodInvocationField = joinPoint.getClass().getDeclaredField(<span class="string">"methodInvocation"</span>);</span><br><span class="line">        methodInvocationField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        ReflectiveMethodInvocation o = (ReflectiveMethodInvocation) methodInvocationField.get(joinPoint);</span><br><span class="line">        Field h = o.getProxy().getClass().getSuperclass().getDeclaredField(<span class="string">"h"</span>);</span><br><span class="line">        h.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        AopProxy aopProxy = (AopProxy) h.get(o.getProxy());</span><br><span class="line">        Field advised = aopProxy.getClass().getDeclaredField(<span class="string">"advised"</span>);</span><br><span class="line">        advised.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object o2 = advised.get(aopProxy);</span><br><span class="line">        <span class="keyword">if</span> (o2 <span class="keyword">instanceof</span> Advised) &#123;</span><br><span class="line">            Object o1 = ((Advised) o2).getTargetSource().getTarget();</span><br><span class="line">            Object o3 = AopProxyUtils.getSingletonTarget(o1);</span><br><span class="line">            System.out.println(o3);</span><br><span class="line">            Field mongoOperationsField = o3.getClass().getDeclaredField(<span class="string">"mongoOperations"</span>);</span><br><span class="line">            mongoOperationsField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Field modifiersField = Field.class.getDeclaredField(<span class="string">"modifiers"</span>);</span><br><span class="line">            modifiersField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//需要移除final修饰的变量</span></span><br><span class="line">            modifiersField.setInt(mongoOperationsField, mongoOperationsField.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">            mongoOperationsField.set(o3, applicationContext.getBean(<span class="string">"mongoDB1"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(org.springframework.context.ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述的代码中，提供了两种的AOP的写法，但是最终都是获取<code>mongoOperations</code>，然后通过<code>applicationContext</code>来替换。</p><p>对比AOP的Redis写法，这里可以看到在Spring中的<code>AOP</code>实现，最起码使用<code>JDK动态代理</code>和<code>Cglib</code>。所以在本文中，使用的是</p><blockquote><p>Field h = o.getProxy().getClass().getSuperclass().getDeclaredField(“h”);</p></blockquote><p>这个就是获取JDK动态代理的对象</p><p>至此，mongo的两种代理方式9最初版的代码编写完毕，后续可能需要对代码进行优化，从而避免每一次修改<code>application.yml</code>都需要手动添加<code>Repository</code></p><p>完整代码可以访问<a href="https://github.com/Somersames/Multi-Resource" target="_blank" rel="noopener">https://github.com/Somersames/Multi-Resource</a></p>]]></content>
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> Mongo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring中AOP的探索与实践(一)之Redis多数据源切换</title>
      <link href="/2019/03/12/Spring%E4%B8%ADAOP%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5(%E4%B8%80)%E4%B9%8BRedis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/"/>
      <url>/2019/03/12/Spring%E4%B8%ADAOP%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5(%E4%B8%80)%E4%B9%8BRedis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/</url>
      <content type="html"><![CDATA[<p>一般在项目的使用过程中，有时候为了减轻数据库的压力，从而将一部分数据缓存至Redis，但是随着业务量的增多。我们所需要的Redis服务器也会越来越多，就算不需要多个Redis数据源，那么在一个redis里面，切换不同的DB也是很麻烦的一件事情。</p><h2 id="非AOP的一般的多数据源操作"><a href="#非AOP的一般的多数据源操作" class="headerlink" title="非AOP的一般的多数据源操作"></a>非AOP的一般的多数据源操作</h2><p>在Redis的多数据源使用中，一般的方法是从配置文件中读取多个<code>RedisProperties</code>，读取到配置文件之后，将<code>RedisProperties</code>配置到<code>RedisTemplate</code>，然后每次使用的时候就通过不同的<code>Template</code>来调用Redis服务器。示例如下:</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="Redis的配置类"><a href="#Redis的配置类" class="headerlink" title="Redis的配置类"></a>Redis的配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"redis1"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function">JedisConnectionFactory <span class="title">jedisConnectionFactory1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JedisConnectionFactory jedisConnectionFactory =<span class="keyword">new</span> JedisConnectionFactory();</span><br><span class="line">        jedisConnectionFactory.setHostName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        jedisConnectionFactory.setPort(<span class="number">6379</span>);</span><br><span class="line">        jedisConnectionFactory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        jedisConnectionFactory.setDatabase(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> jedisConnectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"redis2"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.redis.db1"</span>)</span><br><span class="line">    <span class="function">JedisConnectionFactory <span class="title">jedisConnectionFactory2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JedisConnectionFactory jedisConnectionFactory =<span class="keyword">new</span> JedisConnectionFactory();</span><br><span class="line">        jedisConnectionFactory.setHostName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        jedisConnectionFactory.setPort(<span class="number">6379</span>);</span><br><span class="line">        jedisConnectionFactory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        jedisConnectionFactory.setDatabase(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> jedisConnectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(jedisConnectionFactory1());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(jedisConnectionFactory2());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的配置类里面，分别生成了两个<code>JedisConnectionFactory</code>和两个<code>RedisTemplate</code>，那么在使用的时候直接通过注解<code>@Autowired</code>装配两个<code>RedisTemplate</code>即可。</p><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCommonService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate&lt;String,Object&gt; redisTemplate ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate&lt;String,Object&gt; redisTemplate2 ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redis1Save</span><span class="params">(String key,String value)</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redis1Save2</span><span class="params">(String key,String value)</span> </span>&#123;</span><br><span class="line">        redisTemplate2.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">RestController</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCommonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisCommonService redisCommonService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/redis1"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redis1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redisCommonService.redis1Save(<span class="string">"1"</span>,<span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/redis2"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redis2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redisCommonService.redis1Save2(<span class="string">"2"</span>,<span class="string">"3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在Redis的服务器上可以看到<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/Redis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90.png" alt=""></p><p>可以看到两个数据分别写入到了不同的Db中</p><h2 id="通过AOP的调用"><a href="#通过AOP的调用" class="headerlink" title="通过AOP的调用"></a>通过AOP的调用</h2><p>通过AOP方法调用的基础是需要获取<code>RedisTemplate</code>里面的<code>JedisConnectionFactory</code><br>切面代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"execution(* com.somersames.service.redis.RedisService.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">as</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Field methodInvocationField = joinPoint.getClass().getDeclaredField(<span class="string">"methodInvocation"</span>);</span><br><span class="line">        System.out.println(AopUtils.isAopProxy(joinPoint.getTarget()));</span><br><span class="line">        methodInvocationField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        ReflectiveMethodInvocation o = (ReflectiveMethodInvocation) methodInvocationField.get(joinPoint);</span><br><span class="line">        Field h = o.getProxy().getClass().getDeclaredField(<span class="string">"CGLIB$CALLBACK_0"</span>);</span><br><span class="line">        h.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object dynamicAdvisedInterceptor = h.get(o.getProxy());</span><br><span class="line">        Field advised = dynamicAdvisedInterceptor.getClass().getDeclaredField(<span class="string">"advised"</span>);</span><br><span class="line">        advised.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Object target = ((AdvisedSupport)advised.get(dynamicAdvisedInterceptor)).getTargetSource().getTarget();</span><br><span class="line">        Field re = target.getClass().getDeclaredField(<span class="string">"redisTemplate"</span>);</span><br><span class="line">        re.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object re2= re.get(target);</span><br><span class="line"></span><br><span class="line">        Field d =  re2.getClass().getSuperclass().getDeclaredField(<span class="string">"connectionFactory"</span>);</span><br><span class="line">        d.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object[] objs = joinPoint.getArgs();</span><br><span class="line">        <span class="keyword">if</span>(objs != <span class="keyword">null</span> &amp;&amp; objs.length !=<span class="number">0</span>)&#123;</span><br><span class="line">            re.set(target,applicationContext.getBean((String) objs[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="RedisServer"><a href="#RedisServer" class="headerlink" title="RedisServer"></a>RedisServer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aopRedis</span><span class="params">(String reditTemplate)</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"a"</span>,<span class="string">"a"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的代码也很简单，就是获取<code>RedisServer</code>的<code>aopRedis</code>方法的第一个参数，然后通过AOP将其替换为指定的Redis连接。测试如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisService redisService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/redis"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCurd1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redisService.aopRedis(<span class="string">"redisTemplate2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在<code>AopController</code>里面，我想通过<code>redisTemplate2</code>来执行<code>aopRedis</code>方法。<br>但是在<code>RedisService</code>里面，我们又是配置的是Redis连接数据源1，那么如何</p><blockquote><p>RedisTemplate&lt;String,Object&gt; redisTemplate;</p></blockquote><p>这个时候，我们可以通过切面，直接替换RedisTemplate的连接，从而获取指定的Redis连接，测试如下：<br>启动服务。<br>访问<code>http://localhost:8080/redis</code>。</p><p>在不开启切面的情况下，可以看到直接访问的是<code>0</code>号库，而开启切面之后，在调用<code>RedisService</code>的时候，由于切面将RedisTemplate的<code>connectionFactory</code>替换为2号库，所以访问结果如下:<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/RedisAo.png" alt=""></p><p>本篇文章只是简单的介绍了下AOP的使用，下面几篇可能会基于这篇文章做一些AOP补充和增加一些其他功能。例如：添加Redis的AOP的自动切换，同时添加多个Redis数据源的自动注入，不再手动写Bean。<br>然后会可能基于Mongo的多数据源来讲解AOP的不同代理获取方式，和一般通用的获取方式</p>]]></content>
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Mq实现延时队列</title>
      <link href="/2019/03/04/%E4%BD%BF%E7%94%A8Mq%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/"/>
      <url>/2019/03/04/%E4%BD%BF%E7%94%A8Mq%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<p>在实际的应用开发中，下游系统并不需要立即处理上游系统的mq，但是又不可能将消息阻塞在上有系统中。且这两个系统之间又没有接口提供出来。这个时候就需要通过Mq的死信队列来实现一个延时效果</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>由于Mq的发送方不支持延迟发送(<strong>目前的新版本可以使用插件来支持，但是可能由于公司的其他限制，导致无法升级</strong>)，这时候就需要使用Mq的死信队列来实现延时队列</p><p>一般情况下，Mq的发送流程如下：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/Mq%E4%B8%80%E8%88%AC%E6%B5%81%E7%A8%8B.png" alt=""></p><h2 id="Mq的死信队列"><a href="#Mq的死信队列" class="headerlink" title="Mq的死信队列"></a>Mq的死信队列</h2><p>在Mq的使用中，死信队列用于处理一下三种情况：</p><blockquote><ol><li>The message is negatively acknowledged by a consumer using basic.reject or basic.nack with requeue parameter  set to false</li><li>The message expires due to TTL; or</li><li>The message is dropped because its queue exceeded a length limit</li></ol></blockquote><p>上述三种情况分别是</p><ol><li>消费者拒绝了该Mq，同时消费者也设置该消息不重新入队。</li><li>消息过期，即无人消费</li><li>队列设置了长度，同时队列已满</li></ol><p>由于Mq不支持消息的延迟发送，即消息一经投递，就会马上入队，到达交换机。然后根据交换机的属性，进行投递。</p><p>这样就带来了一个问题，如果发送方需要消费者等待一定的时间才能进行消费。如果不经由死信队列，那么只能在发送方做等待。</p><p>例如使用<code>Thread.sleep()</code>来实现，由于<code>Sleep</code>方法是阻塞的，所以这样做又会影响到性能。又或者通过定时任务来实现，但是定时任务每一次又要去取出该发送的Mq，然后再发出去，这样就会非常的影响到效率。</p><h2 id="死信队列实现延迟队列"><a href="#死信队列实现延迟队列" class="headerlink" title="死信队列实现延迟队列"></a>死信队列实现延迟队列</h2><p>通过Rabbitmq的死信转发转发规则2，便可以实现一个延时队列。具体流程如下：<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/Mqexpire.png" alt=""></p><p>这里实现的关键是讲消费队列设置为<code>DLK</code>,<code>TTL</code>,<code>DLX</code>，具体如下：<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/Mqmanage.png" alt=""></p><p>在上图里面，可以看到<code>Tutorials</code>是一个消费队列，同时已经设置了它的死信转发规则。而<code>dTutorials</code>是一个死信队列，这个队列就是用于存放死信队列</p><h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">    ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"></span><br><span class="line">    factory.setHost(HOST);</span><br><span class="line">    factory.setUsername(USER);</span><br><span class="line">    factory.setPassword(PASSWORD);</span><br><span class="line">    factory.setPort(<span class="number">5672</span>);</span><br><span class="line">    factory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个连接</span></span><br><span class="line">    connection = factory.newConnection();</span><br><span class="line"></span><br><span class="line">    channel = connection.createChannel();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在这里分别新建两个Exchange，一个是死信的Exchange，一个是消费者的Exchange</span></span><br><span class="line">    channel.exchangeDeclare(exchangeName,<span class="string">"direct"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">    channel.exchangeDeclare(dExchangeName,<span class="string">"direct"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] bytes  =messgae.getBytes();</span><br><span class="line">    <span class="comment">//声明一个队列 - 持久化，同时设置死信的转发Exchange和Queue。以及消息的过期时间</span></span><br><span class="line">    Map&lt;String,Object&gt; args = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    args.put(<span class="string">"x-dead-letter-exchange"</span>,dExchangeName);</span><br><span class="line">    args.put(<span class="string">"x-dead-letter-routing-key"</span>,routingKey);</span><br><span class="line">    args.put(<span class="string">"x-message-ttl"</span>,<span class="number">2000</span>);</span><br><span class="line">    channel.queueDeclare(queueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, args);</span><br><span class="line">    channel.queueDeclare(dQueeueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置通道预取计数</span></span><br><span class="line">    channel.basicQos(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将消息队列绑定到Exchange</span></span><br><span class="line">    channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line">    channel.queueBind(dQueeueName, dExchangeName, routingKey);</span><br><span class="line">    channel.basicPublish(exchangeName, routingKey, <span class="keyword">null</span>, bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"></span><br><span class="line">        factory.setHost(HOST);</span><br><span class="line">        factory.setUsername(USER);</span><br><span class="line">        factory.setPassword(PASSWORD);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明一个连接</span></span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明消息通道</span></span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//在这里消费者直接消费死信队列即可</span></span><br><span class="line">        channel.queueBind(dQueueName, dExchangeName, routingKey);</span><br><span class="line">        DefaultConsumer defaultConsumer =<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String str = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(str);</span><br><span class="line">                System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"测试"</span>.equals(str))&#123;</span><br><span class="line">                    channel.basicReject(envelope.getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(dQueueName,defaultConsumer);</span><br></pre></td></tr></table></figure><p>下图中可以看到，消费者总是在2秒钟之后收到了发送方发送的消息，这时一个延时队列就实现了</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/GIF2.gif" alt=""></p><h2 id="详细代码连接"><a href="#详细代码连接" class="headerlink" title="详细代码连接"></a>详细代码连接</h2><p>具体的代码以上传至Github:<a href="https://github.com/Somersames/MqTutorials" target="_blank" rel="noopener">https://github.com/Somersames/MqTutorials</a></p>]]></content>
      
      <categories>
          
          <category> Rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在Mysql中使用变量进行复杂的查询(一)</title>
      <link href="/2019/02/27/%E5%9C%A8Mysql%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F%E8%BF%9B%E8%A1%8C%E5%A4%8D%E6%9D%82%E7%9A%84%E6%9F%A5%E8%AF%A2(%E4%B8%80)/"/>
      <url>/2019/02/27/%E5%9C%A8Mysql%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F%E8%BF%9B%E8%A1%8C%E5%A4%8D%E6%9D%82%E7%9A%84%E6%9F%A5%E8%AF%A2(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<blockquote><p>注意，此文章使用的Mysql变量均是用户变量</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首先看一个需求，有如下数据表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1 order by area_id;</span><br><span class="line">+<span class="comment">---------+-----------+</span></span><br><span class="line">| area_id | order_num |</span><br><span class="line">+<span class="comment">---------+-----------+</span></span><br><span class="line">|       1 |        22 |</span><br><span class="line">|       1 |        10 |</span><br><span class="line">|       1 |        10 |</span><br><span class="line">|       2 |        10 |</span><br><span class="line">|       2 |        10 |</span><br><span class="line">|       2 |        22 |</span><br><span class="line">|       3 |        10 |</span><br><span class="line">+<span class="comment">---------+-----------+</span></span><br><span class="line">7 rows in <span class="keyword">set</span> (<span class="number">0.14</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到，这是一个很非常普通的数据表。</p><h2 id="需求一"><a href="#需求一" class="headerlink" title="需求一"></a>需求一</h2><p>假设某一次运营需要统计每一个地区的销量量，让你出一个报表给他，那么方法如下：</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>统计每一个地区的总销量：<br>常用SQL如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select t1.area_id, sum(t1.order_num) from t1 group by area_id;</span><br><span class="line">+<span class="comment">---------+-------------------+</span></span><br><span class="line">| area_id | sum(t1.order_num) |</span><br><span class="line">+<span class="comment">---------+-------------------+</span></span><br><span class="line">|       1 | 42                |</span><br><span class="line">|       2 | 42                |</span><br><span class="line">|       3 | 10                |</span><br><span class="line">+<span class="comment">---------+-------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.14</span> sec)</span><br></pre></td></tr></table></figure></p><p>从图中可以看到，该SQL已经可以把每个地区的销售总量全部统计完毕了。但是有一天，需求又变了。</p><h2 id="需求二："><a href="#需求二：" class="headerlink" title="需求二："></a>需求二：</h2><p>现在其他的运营也过来了，说需要按照区域的Id做为优先级，依次统计每一个优先级地区的总销量。即如下：</p><ol><li>地区1的销量为42，由于没有地区Id为0的，所以地区1的销量是42。</li><li>地区2的销量为42，但是由于地区2的优先级高于1，所以地区2的销量需要包含地区1的销量</li><li>地区3的销量为42，但是由于地区3的优先级高于1和2，所以地区3的销量需要包含地区1的销量和地区2的销量</li></ol><p>此时你会发现，虽然可以进行<code>groupby</code>，但是却无法统计之前的累加和，此时<code>Mysql</code>变量就可以使用了</p><h3 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一:"></a>方法一:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT</span><br><span class="line">r1.area_id,</span><br><span class="line">@t_total := @t_total + r1.total AS &apos;t_total&apos; </span><br><span class="line">FROM</span><br><span class="line">( SELECT @t_total := 0 ) r,</span><br><span class="line">( SELECT t1.area_id, sum( t1.order_num ) AS &apos;total&apos; FROM t1 GROUP BY area_id ) r1 order by r1.area_id;</span><br><span class="line">+---------+---------+</span><br><span class="line">| area_id | t_total |</span><br><span class="line">+---------+---------+</span><br><span class="line">|       1 |      42 |</span><br><span class="line">|       2 |      84 |</span><br><span class="line">|       3 |      94 |</span><br><span class="line">+---------+---------+</span><br><span class="line">3 rows in set (0.18 sec)</span><br></pre></td></tr></table></figure><p>由于需求是需要高一级的地区需要统计所以低一级地区的销量，所以此时这个需求已经完成了。</p><p>此时查看<code>SQL</code>的效果，会发现，地区2的销量已经包含了地区1的，而地区3的销量已经包含了地区1和地区2的，所以该条<code>SQL</code>已经符合运营的需求了。</p><h3 id="Mysql变量的初步使用"><a href="#Mysql变量的初步使用" class="headerlink" title="Mysql变量的初步使用"></a>Mysql变量的初步使用</h3><p>在上面的这条SQL中，可以看到出现了<code>@t_total</code>这个变量，同时也出现了<code>:=</code>操作符，这就是Mysql的变量。</p><h2 id="需求三"><a href="#需求三" class="headerlink" title="需求三"></a>需求三</h2><p>现在运营发现，这样统计的话有点问题，需要进行调整下：</p><ol><li>地区1的销量为42，不能包含自身的销量，于是只能统计比1小的地区，所以地区1的销量是0。</li><li>地区2的销量为42，不能包含自身的销量，于是只能统计比2小的地区，所以地区1的销量是42。</li><li>地区2的销量为10，不能包含自身的销量，于是只能统计比3小的地区，所以地区3的销量是84。</li><li></li></ol><h3 id="方法一-2"><a href="#方法一-2" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT</span><br><span class="line">r1.area_id,</span><br><span class="line">@t_total := @t_total + r1.total AS 't_total',</span><br><span class="line">@before_total := @t_total - r1.total AS 'before_total' </span><br><span class="line">FROM</span><br><span class="line">( <span class="keyword">SELECT</span> @t_total := <span class="number">0</span> ) r,</span><br><span class="line">( <span class="keyword">SELECT</span> @before_total := <span class="number">0</span> ) rr,</span><br><span class="line">( <span class="keyword">SELECT</span> t1.area_id, <span class="keyword">sum</span>( t1.order_num ) <span class="keyword">AS</span> <span class="string">'total'</span> <span class="keyword">FROM</span> t1 <span class="keyword">GROUP</span> <span class="keyword">BY</span> area_id ) r1;</span><br><span class="line">+<span class="comment">---------+---------+--------------+</span></span><br><span class="line">| area_id | t_total | before_total |</span><br><span class="line">+<span class="comment">---------+---------+--------------+</span></span><br><span class="line">|       1 |      42 |            0 |</span><br><span class="line">|       2 |      84 |           42 |</span><br><span class="line">|       3 |      94 |           84 |</span><br><span class="line">+<span class="comment">---------+---------+--------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.16</span> sec)</span><br></pre></td></tr></table></figure><p>此时会看到<code>before_total</code>字段完美的符合和需求三。</p><h2 id="Mysql变量"><a href="#Mysql变量" class="headerlink" title="Mysql变量"></a>Mysql变量</h2><p>通过需求二和需求三可以看到Mysql的变量使用技巧，在Mysql中，使用变量可以实现很多复杂的需求。但是在使用Mysql变量的时候需要注意，用户变量需要配合<code>Select</code>一起来使用。</p>]]></content>
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java异步IO的回调机制</title>
      <link href="/2019/01/24/java%E5%BC%82%E6%AD%A5IO%E7%9A%84%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/01/24/java%E5%BC%82%E6%AD%A5IO%E7%9A%84%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>在Java的nio里面，经常遇到的一个词语是<code>回调</code>，一个主线程负责分发各种请求至子线程，同时子线程处理完毕之后通知主线程，这其中就涉及到了回调机制。</p><p>在Java中，异步IO的回调方式主要是<code>CallBack</code>和<code>Future</code>。</p><p>由于<code>Future</code>获取结果是一种阻塞的方式，所以本次就主要来了解<code>Callback</code>回调方式的运行机制。</p><p>由于在异步IO里面，主线程不需要等待子线程来获取结果，所以可以极大的提高程序运行的效率，但是子线程必须在完成之后通知父线程，于时这就引出了回调。</p><p>在Java中回调是通过一个匿名对象来实现，每一个线程子线程在运行的时候都会传入一个匿名的对象，然后子线程完成任务之后，通过调用该对匿名对象来进行回调</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><h4 id="回调接口"><a href="#回调接口" class="headerlink" title="回调接口"></a>回调接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComplateHande</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">complated</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fial</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子线程"><a href="#子线程" class="headerlink" title="子线程"></a>子线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientServer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ComplateHande complateHande;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sleepTime;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClientServer</span><span class="params">(ComplateHande complateHande,String message,<span class="keyword">int</span> sleepTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message= message;</span><br><span class="line">        <span class="keyword">this</span>.sleepTime = sleepTime;</span><br><span class="line">        <span class="keyword">this</span>.complateHande = complateHande;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClientServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            comulate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">comulate</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.currentThread().sleep(sleepTime*<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.message);</span><br><span class="line">        <span class="keyword">this</span>.complateHande.complated();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Main方法"><a href="#Main方法" class="headerlink" title="Main方法"></a>Main方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ClientServer clientServer1 =<span class="keyword">new</span> ClientServer(<span class="keyword">new</span> ComplateHande() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">complated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"处理完毕"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fial</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"处理失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"一号任务"</span>,<span class="number">2</span>);</span><br><span class="line">        clientServer1.start();</span><br><span class="line">        ClientServer clientServer2 =<span class="keyword">new</span> ClientServer(<span class="keyword">new</span> ComplateHande() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">complated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"2处理完毕"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fial</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"处理失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"二号任务"</span>,<span class="number">1</span>);</span><br><span class="line">        clientServer2.start();</span><br><span class="line">        ClientServer clientServer3 =<span class="keyword">new</span> ClientServer(<span class="keyword">new</span> ComplateHande() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">complated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"3处理完毕"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fial</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"2处理失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"三号任务"</span>,<span class="number">1</span>);</span><br><span class="line">        clientServer3.start();</span><br><span class="line">        ClientServer clientServer4 =<span class="keyword">new</span> ClientServer(<span class="keyword">new</span> ComplateHande() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">complated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"4处理完毕"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fial</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"处理失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"四号任务"</span>,<span class="number">3</span>);</span><br><span class="line">        clientServer4.start();</span><br><span class="line">        Thread.currentThread().sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">"自己处理自己的事情+1"</span>);</span><br><span class="line">        Thread.currentThread().sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">"自己处理自己的事情+1"</span>);</span><br><span class="line">        Thread.currentThread().sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">"自己处理自己的事情+1"</span>);</span><br><span class="line">        Thread.currentThread().sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">"自己处理自己的事情+1"</span>);</span><br><span class="line">        Thread.currentThread().sleep(<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">二号任务</span><br><span class="line"><span class="number">2</span>处理完毕</span><br><span class="line">三号任务</span><br><span class="line"><span class="number">3</span>处理完毕</span><br><span class="line">自己处理自己的事情+<span class="number">1</span></span><br><span class="line">一号任务</span><br><span class="line">自己处理自己的事情+<span class="number">1</span></span><br><span class="line">处理完毕</span><br><span class="line">四号任务</span><br><span class="line"><span class="number">4</span>处理完毕</span><br><span class="line">自己处理自己的事情+<span class="number">1</span></span><br><span class="line">自己处理自己的事情+<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h2><p>在<code>nio</code>里面，其实还有其他的实现方式，比如通过建立一个主线程的阻塞队列，然后分发任务至子线程，子线程若处理完毕，则提交任务至主线程</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSO单点登录的理论与实践(一)</title>
      <link href="/2019/01/13/SSO%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%9A%84%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E4%B8%80/"/>
      <url>/2019/01/13/SSO%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%9A%84%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E4%B8%80/</url>
      <content type="html"><![CDATA[<h1 id="SSO简介"><a href="#SSO简介" class="headerlink" title="SSO简介"></a>SSO简介</h1><p>随着企业业务的发展，企业中可能会出现多个业务的系统。如果是对内使用的话，那稍微还好点，如果是ToC的业务，客户如果每进入一个系统都需要登录的话，对用户来说是一个麻烦事情，很可能会造成用户的流失。</p><p>如果在每一个系统里面都存储一份用户的账号和密码数据，这种做法显然是不靠谱的，而且也不安全的。会造成客户的数据大量冗余，而且还会导致后期维护十分的麻烦。</p><p>所以，现在一般都会采用SSO单点登录</p><p>在介绍<code>SSO登录</code>之前，需要先了解一下浏览器的<strong>同源策略</strong></p><h2 id="浏览器同源策略"><a href="#浏览器同源策略" class="headerlink" title="浏览器同源策略"></a>浏览器同源策略</h2><p>此处直接将mozilla官网给出的介绍搬过来<code>https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</code></p><table><thead><tr><th>URL</th><th>结果</th><th>原因</th></tr></thead><tbody><tr><td><a href="http://store.company.com/dir2/other.html" target="_blank" rel="noopener">http://store.company.com/dir2/other.html</a></td><td>成功</td><td></td></tr><tr><td><a href="http://store.company.com/dir/inner/another.html" target="_blank" rel="noopener">http://store.company.com/dir/inner/another.html</a></td><td>成功</td><td></td></tr><tr><td><a href="https://store.company.com/secure.html" target="_blank" rel="noopener">https://store.company.com/secure.html</a></td><td>失败</td><td>不同协议 ( https和http )</td></tr><tr><td><a href="http://store.company.com:81/dir/etc.html" target="_blank" rel="noopener">http://store.company.com:81/dir/etc.html</a></td><td>失败</td><td>不同端口 ( 81和80)</td></tr><tr><td><a href="http://news.company.com/dir/other.html" target="_blank" rel="noopener">http://news.company.com/dir/other.html</a></td><td>失败</td><td>不同域名 ( news和store )</td></tr></tbody></table><blockquote><p>所以根据浏览器的同源策略，SSO单点登录又分为跨域和非跨域</p></blockquote><h2 id="SSO登录"><a href="#SSO登录" class="headerlink" title="SSO登录"></a>SSO登录</h2><table><thead><tr><th>类别</th><th>示例</th><th>实现要求</th></tr></thead><tbody><tr><td>同一个域名下单点登录</td><td><code>a.com/user</code>,<code>a.com/order</code></td><td>用户在访问完用户系统之后，如果进入订单系统，则无需登录拿到用户信息</td></tr><tr><td>非同一个域名下SSO登录</td><td><code>a.com/user</code>,<code>b.com/user</code></td><td>当用户访问a系统然后再访问b系统，自动获取用户数据</td></tr><tr><td>前后端分离跨域</td><td>这个只是上面非同源跨域的一个前后端分离版本</td><td>实现细节如上，不过是前端自己一个服务器</td></tr></tbody></table><p>而实现<code>SSO登录</code>的一个关键点是用户的唯一标识，即如何确在一个系统中生成的用户凭据在其他几个系统中都可以被识别。</p><h3 id="SSO登录同源的实现"><a href="#SSO登录同源的实现" class="headerlink" title="SSO登录同源的实现"></a>SSO登录同源的实现</h3><p>同源之间的实现比较简单，因为是同源，所以可以直接通过<code>cookie</code>或者<code>jwt</code>实现，具体的流程图如下：</p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/sso%E5%90%8C%E6%BA%90.png" alt=""></p><p>仅仅想实现同源下的<code>SSO</code>登录，实现的方式可以有多种，但是最终的一点就是<code>SSO</code>生成的用户凭据，其他的系统必须要可以解密出来。这样一个同源下的<code>SSO单点登录</code>便可以实现</p><h3 id="SSO登录非同源的实现"><a href="#SSO登录非同源的实现" class="headerlink" title="SSO登录非同源的实现"></a>SSO登录非同源的实现</h3><p>由于是在非同源下实现<code>SSO单点登录</code>，所以一个用户在<code>a.com</code>下登录了账户，那么当用户访问<code>b.com</code>的时候，<code>cookie</code>肯定是带不过去的。这时候不妨参考下业内的公司的设计</p><h4 id="淘宝和天猫的实现"><a href="#淘宝和天猫的实现" class="headerlink" title="淘宝和天猫的实现"></a>淘宝和天猫的实现</h4><p>打开浏览器，在<code>taobao.com</code>下登录我们的账号，成功获取到用户信息之后，这时候我们再新建一个标签页，然后打开<code>tmall.com</code>，这时候会发现，天猫已经自动的帮我们登录了账号。<br>考虑以下问题：</p><ol><li>淘宝和天猫的域名并非同源</li><li>我们只在一处进行了登录</li><li>我们并未在<code>tmall</code>域名下输入任何我们的信息，然后我们再次访问天猫，天猫就自动识别出来我们了</li></ol><p>很明显，我们在请求<code>tmall</code>之前，淘宝已经将我们的信息同步到了<code>tmall</code></p><p>所以根据上面的例子，我们需要考虑的是，如何让不同系统之间互相识别用户</p><p>常见的非同源SSO登录体系中一般有一个统一的授权中心，再加上一个共用的用户凭据存储中心，如下：<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/sso2.png" alt=""></p><p>在上图的流程中，不仅可以通过<code>jsonp</code>来进行传输，还可以通过<code>iframe</code>进行通信(淘宝和天猫的做法)，</p><p>这个简单版的<code>SSO</code>登录，主要是通过cookies来存储token，然后进行每个跨域系统的交互，当然这个方式是有瑕疵的，因为这种方式在跨域系统多的时候，需要维护多个跨域系统，代码会写的比较多，后期如果新增或者删除一个系统的话，需要需改js文件，就会显得很繁琐。</p><h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h2><p>由于同源下的<code>SSO登录</code>实现起来比较简单，所以此次直接实现前后端分离的SSO单点登录</p><p>可以看下非同源下的实现：</p><blockquote><p>所用技术:SprngCloud,redis,vue</p></blockquote><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/jc5gk-wxd0.gif" alt=""></p><p>首先分别访问<code>http://localhost:8092/#/orderinfo</code>和<code>http://localhost:8091/#/orderinfo</code>,这个时候由于都没有登录，所以直接被重定向到登录界面，但是在<code>http://localhost:8092/#/</code>登录之后，再次访问<code>http://localhost:8091/#/orderinfo</code>，可以看到<code>8092</code>端口的服务直接识别出来了是该用户</p><p>这里有两个注意点：首先，我在<code>8092</code>端口的服务器上并未登录过，而且<code>8091</code>服务和<code>8092</code>服务是一个非同源服务，所以很明显<code>8091</code>服务是无法将<code>cookie</code>给到<code>8092</code>服务器。</p><h3 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h3><p>此次的项目结构是一个<code>Auth</code>认证中心，<code>两个后端系统</code>，<code>两个前端系统</code>。而且一个前端分别对应一个后端系统</p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>首先两个子系统的认证分别是基于cookie，然后将<code>tokan</code>存入cookie，首次登录的时候，cookie肯定是不存在的，然后重定向至<code>SSO登录系统</code>,<code>SSO</code>认证之后会下发一个<code>token</code>，然后登录的系统会将此token以<code>get</code>的方式作为参数传给另一个个系统，另一个系统再将此<code>token</code>存入<code>cookie</code>进行回写，最终实现两个系统都一起登录</p><p>###回调实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(ApiConstant.APP+<span class="string">"/&#123;token&#125;"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResponseUtils <span class="title">getInfo</span><span class="params">(@PathVariable String token , HttpServletResponse response)</span></span>&#123;</span><br><span class="line">       ResponseUtils&lt;String&gt; resp = <span class="keyword">new</span> ResponseUtils&lt;String&gt;();</span><br><span class="line">       ResponseEnum.SUCCESS.setResponse(resp);</span><br><span class="line">       response.addCookie(<span class="keyword">new</span> Cookie(<span class="string">"token"</span>,token));</span><br><span class="line">       <span class="keyword">return</span> resp;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>获取<code>SSO登录</code>返回的<code>token</code>然后调用各个跨域系统<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">setApp1Token (userdata) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(userdata)</span><br><span class="line">      <span class="keyword">this</span>.$http(&#123;</span><br><span class="line">        method: <span class="string">'get'</span>,</span><br><span class="line">        url: <span class="string">'http://localhost:8083/api/app1/query/'</span> + userdata</span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">this</span>.$http(&#123;</span><br><span class="line">        method: <span class="string">'get'</span>,</span><br><span class="line">        url: <span class="string">'http://localhost:8085/api/app2/query/'</span> + userdata</span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'OK'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><blockquote><p><a href="https://github.com/Somersames/Springboot-vue-sso" target="_blank" rel="noopener">https://github.com/Somersames/Springboot-vue-sso</a><br>该项目为了验证，仅仅是用userId进行md5加密作为token，所以比较简陋，但是以后如果有时间会继续写几篇文章同时也将这个项目补起来</p></blockquote>]]></content>
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> SSO </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在Spring中全局处理异常</title>
      <link href="/2019/01/10/%E5%9C%A8Spring%E4%B8%AD%E5%85%A8%E5%B1%80%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8/"/>
      <url>/2019/01/10/%E5%9C%A8Spring%E4%B8%AD%E5%85%A8%E5%B1%80%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<p>随着业务的发展，在每一个业务模块里面都可能会出现一些自定义的通用异常，例如·<code>验证失败</code>，<code>权限不足</code>等等 ，这些自定义的异常很可能会被所有模块公用，在代码里面，最常见的一种写法是在每一个方法里面进行捕获，然后在<code>Controller</code>里面进行catch，最后进行相应处理</p><h2 id="常见写法"><a href="#常见写法" class="headerlink" title="常见写法"></a>常见写法</h2><p><strong>第一种写法：</strong></p><p>这是一个常规的写法，每一个方法都处理自己的特定异常<br><strong>Controller层</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//逻辑处理</span></span><br><span class="line">  &#125;<span class="keyword">catch</span>(AuthException e)&#123;</span><br><span class="line">      XXX</span><br><span class="line">  &#125;<span class="keyword">catch</span>(CrsfException e)&#123;</span><br><span class="line">      XXX</span><br><span class="line">  &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      XXX</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样的代码如果分布在不同的<code>Controller</code>里面，将会是一种隐患。例如，有一天，需要对所有的<code>AuthException</code>异常都添加一个字段，用于前端的页面展示，那么此时我们就需要在代码里面找出所有的<code>AuthException</code>，然后再添加一些特殊的字段，如果漏掉了几个，就会引起一些bug。</p><p><strong>第二种写法：</strong></p><p>第二种写法几乎和第一种一样，不过不同之处在于第二种写法是编写了一个公共的处理方法.</p><p><strong>Controller层</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"login"</span>,methods=Request.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//逻辑处理</span></span><br><span class="line">  &#125;<span class="keyword">catch</span>(AuthException e)&#123;</span><br><span class="line">      ExceptionHandle.handleAuthException();</span><br><span class="line">  &#125;<span class="keyword">catch</span>(CrsfException e)&#123;</span><br><span class="line">      XXX</span><br><span class="line">  &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      XXX</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>共用方法</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">ExceptionHandle</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">handleAuthException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        XXX<span class="comment">//逻辑处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方法虽然比第一种更加具有共用性，但是代码一点都不整洁和便于维护。例如，现在需要再次加一个异常，那么就只能是在<code>Controller</code>里面再次<code>Catch</code>，如果是增加还好，但是一旦需要里面既包含增加又包含删除，对于维护人员，这是极易出错的。</p><h2 id="Spring的全局处理异常"><a href="#Spring的全局处理异常" class="headerlink" title="Spring的全局处理异常"></a>Spring的全局处理异常</h2><p>其实在Spring里面有更加优雅的处理方式，那就是全局的异常处理，对于一些常用的异常，直接在<code>Controller</code>里面抛出，而对于某一些方法的特定异常，则只需要自己进行捕获，然后自己进行处理</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在Spring里面可以使用<code>@RestControllerAdvice</code>或<code>@ControllerAdvice</code>，然后配合<code>@ExceptionHandler</code>进行处理，这样处理可以使的项目在整个异常处理这块十分的通用和优雅</p><p><strong>异常处理类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthException</span><span class="params">(String message, Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>全局的异常处理类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandle</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(AuthException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handleAuthException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ResponseEntity&lt;String&gt; resp = <span class="keyword">new</span> ResponseEntity&lt;&gt;();</span><br><span class="line">        resp.setCode(<span class="number">201</span>);</span><br><span class="line">        resp.setMessage(<span class="string">"验证失败"</span>);</span><br><span class="line">        resp.setData(<span class="string">"全局异常所抛出的异常"</span>);</span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Controller</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ExceptionService exceptionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"auth"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">testAuth</span><span class="params">(@RequestBody String param)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        ResponseEntity&lt;String&gt; resp = <span class="keyword">new</span> ResponseEntity&lt;String&gt;();</span><br><span class="line">        exceptionService.auth(param);</span><br><span class="line">        resp.setCode(<span class="number">200</span>);</span><br><span class="line">        resp.setMessage(<span class="string">"OK"</span>);</span><br><span class="line">        resp.setData(<span class="string">"Controller消息"</span>);</span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Service</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">auth</span><span class="params">(String param)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"1"</span>.equalsIgnoreCase(param))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthException(<span class="string">"非法访问"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="测试如下："><a href="#测试如下：" class="headerlink" title="测试如下："></a>测试如下：</h3><p>请求<code>api/auth</code>，并且携带参数<code>1</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>: <span class="string">"全局异常所抛出的异常"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">201</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"验证失败"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>请求<code>api/auth</code>，并且携带参数<code>2</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>: <span class="string">"Controller消息"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"OK"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="增加特殊处理"><a href="#增加特殊处理" class="headerlink" title="增加特殊处理"></a>增加特殊处理</h3><p>这样一来，所有的<code>AuthException</code>都可以被统一的进行处理，而且根据业务的需要们可以在<code>Controller</code>增加一些特定的异常</p><blockquote><p><strong>此处以NullPointerException代替</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ExceptionService exceptionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"auth"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">testAuth</span><span class="params">(@RequestBody String param)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        ResponseEntity&lt;String&gt; resp = <span class="keyword">new</span> ResponseEntity&lt;String&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            exceptionService.auth(param);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            resp.setCode(<span class="number">400</span>);</span><br><span class="line">            resp.setMessage(<span class="string">"NUll"</span>);</span><br><span class="line">            resp.setData(<span class="string">"Null"</span>);</span><br><span class="line">            <span class="keyword">return</span> resp;</span><br><span class="line">        &#125;</span><br><span class="line">        resp.setCode(<span class="number">200</span>);</span><br><span class="line">        resp.setMessage(<span class="string">"OK"</span>);</span><br><span class="line">        resp.setData(<span class="string">"Controller消息"</span>);</span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">auth</span><span class="params">(String param)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"1"</span>.equalsIgnoreCase(param))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthException(<span class="string">"非法访问"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"3"</span>.equals(param))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="再次测试"><a href="#再次测试" class="headerlink" title="再次测试"></a>再次测试</h3><p>请求<code>api/auth</code>，并且携带参数<code>3</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>: <span class="string">"Null"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"NUll"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>此方法虽然可以统一的处理项目里面的异常，但是对项目内的开发人员要求还是比较高的，需要一起遵守统一的开发规范</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Springboot中使用Mysql多数据源</title>
      <link href="/2019/01/06/Springboot%E4%B8%AD%E4%BD%BF%E7%94%A8Mysql%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
      <url>/2019/01/06/Springboot%E4%B8%AD%E4%BD%BF%E7%94%A8Mysql%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      <content type="html"><![CDATA[<p>随着业务的发展，很可能需要在一个项目里面同时使用多个数据源。</p><p>大致看了网上的多数据源Demo，发现无非有两种：</p><blockquote><p>一种是自己封装多个<code>JdbcTemplate</code>，然后调用对应的数据库就使用对应的<code>JdbcTemplate</code></p></blockquote><blockquote><p>一种是通过注解的方式来实现，在需要切换数据源的方法上添加一个自己封装的注解便可以完成切换。</p></blockquote><p>考虑了一下以后的扩展性和通用性，便决定采用基于注解的多数据源方式</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看了下官网的介绍，大致了解了在Spring中使用多数据源的一个关键类是<code>AbstractRoutingDataSource</code>。</p><p>先看下这个类的结构<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E8%B7%AF%E7%94%B1%E7%B1%BB%E5%9B%BE.png" alt=""></p><p>在这个类里面，只需要关注一下几个变量或者方法即可。</p><blockquote><ol><li>private Map&lt;Object, Object&gt; targetDataSources; </li><li>private Object defaultTargetDataSource;</li><li>protected Object determineCurrentLookupKey()</li></ol></blockquote><h3 id="targetDataSources"><a href="#targetDataSources" class="headerlink" title="targetDataSources"></a>targetDataSources</h3><p>这个变量是一个存储数据源的Map，其实一般在使用的时候，更加像是<code>Map&lt;String, DataSource&gt;</code>这样的，其中key表示的是这个数据源的名称，而value则是表示这个DataSource的信息(例如url，username等)</p><h3 id="defaultTargetDataSource"><a href="#defaultTargetDataSource" class="headerlink" title="defaultTargetDataSource"></a>defaultTargetDataSource</h3><p>该变量表示的是一个默认的数据源，非空，必须设置</p><h3 id="determineCurrentLookupKey"><a href="#determineCurrentLookupKey" class="headerlink" title="determineCurrentLookupKey"></a>determineCurrentLookupKey</h3><p>该方法返回的一个<code>targetDataSources</code>里面的键，用于选择某一个数据源。其中多数据源的切换就是控制该方法的返回值来实现。</p><blockquote><p>该方法返回的是<code>targetDataSources</code>里面的键，从而<code>HikariPool</code>可以直接切换数据源</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先是通过读取配置文件，将其转为DataSource，然后再将dataSource存入<code>targetDataSources</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>配置文件<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">multi-resource</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    mysql1:</span></span><br><span class="line"><span class="attr">      driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">      jdbc-url:</span> <span class="attr">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    mysql2:</span></span><br><span class="line"><span class="attr">      driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">      jdbc-url:</span> <span class="attr">jdbc:mysql://localhost:3306/cloud?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">  aop:</span></span><br><span class="line"><span class="attr">    auto:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    proxy-target-class:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>获取配置文件信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlMultiProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(MysqlMultiProperties.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"mysql1"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.datasource.mysql1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">mysql1Source</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"正在初始化Mysql_DB1"</span>);</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"mysql2"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.datasource.mysql2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">mysql2Source</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"正在初始化Mysql_DB2"</span>);</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现<code>AbstractRoutingDataSource</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceRouter</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; contextHolder = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(String dataSource)</span> </span>&#123;</span><br><span class="line">        contextHolder.set(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contextHolder.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实例化Bean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"mysql1"</span>)</span><br><span class="line">    DataSource mysql1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"mysql2"</span>)</span><br><span class="line">    DataSource mysql2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceRouter <span class="title">generateRouter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DataSourceRouter router =<span class="keyword">new</span> DataSourceRouter();</span><br><span class="line">        Map&lt;Object,Object&gt; targetMap = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</span><br><span class="line">        targetMap.put(<span class="string">"mysql1"</span>,mysql1);</span><br><span class="line">        targetMap.put(<span class="string">"mysql2"</span>,mysql2);</span><br><span class="line">        router.setTargetDataSources(targetMap);</span><br><span class="line">        router.setDefaultTargetDataSource(mysql1);</span><br><span class="line">        router.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> router;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="AOP切面"><a href="#AOP切面" class="headerlink" title="AOP切面"></a>AOP切面</h3><p><strong>在使用切面的时候遇到了一些坑，这个有空再说</strong></p><p>新建一个注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UseDataSource &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新建一个切面类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order</span>(-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlSourceAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"@annotation(useDataSource)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeMysqlSource</span><span class="params">(UseDataSource useDataSource)</span></span>&#123;</span><br><span class="line">        DataSourceRouter.setDataSource(useDataSource.name());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此大部分功能都已经实现了，在Springboot的启动类上添加或修改如下注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude=&#123;DataSourceAutoConfiguration.class&#125;)</span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.somersames.dao"</span>)</span><br><span class="line"><span class="meta">@Import</span>(&#123;MysqlConfig.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>只需要在切换数据源的地方添加<code>@UseDataSource</code>注解即可。</p><p>项目地址：<a href="https://github.com/Somersames/Multi-Resource" target="_blank" rel="noopener">https://github.com/Somersames/Multi-Resource</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次在编写AOP部分的时候需要了一点小坑，有空会整理出来</p>]]></content>
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java的volatile和MESI协议</title>
      <link href="/2019/01/05/Java%E7%9A%84volatile%E5%92%8CMESI%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/01/05/Java%E7%9A%84volatile%E5%92%8CMESI%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<p>使用过Java多线程的都知道，<code>volatile</code>可以确保多线程永远都可以读取到最新的变量。但是却无法保证一个操作的原子性<br>关于这部分可以先从硬件部分说起：</p><h1 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h1><h2 id="单核CPU"><a href="#单核CPU" class="headerlink" title="单核CPU"></a>单核CPU</h2><p>在现代计算机中，CPU的速度是远远快于内存的，如果不加以任何处理，此时CPU就会一直在等待内存的IO，从而导致一些资源的浪费。所以就有了高速缓冲区(cache)，但是在Cache里面肯定是不会将内存的所有数据都拷贝一份，因为cacahe只有几十kb的大小。 </p><p>这就造成了一个现象，也就是说每一个核心都会有一个共享的内存区域和一个自己Cache区域。</p><h2 id="多核CPU"><a href="#多核CPU" class="headerlink" title="多核CPU"></a>多核CPU</h2><p>随着现代技术的发展，单核CPU已经被淘汰了，取而代之的是多核CPU，而且现代的CPU已经都是多级缓存了，大部分是三级缓存。在多核心的CPU中，每一个核心都会有自己的Cache，如果某一个核心修改了自己缓存区的数据，那么就会造成自己的缓存区和内存中数据不一致 所以这时候就会有一个<code>MESI</code>协议(缓存一致性)</p><h2 id="MESI协议"><a href="#MESI协议" class="headerlink" title="MESI协议"></a>MESI协议</h2><p><code>MESI</code>协议简单来讲，就是为了确保每一个核心的缓存数据都是一致的。当有一个核心对某一个变量做了修改之后，就会通知到其他的核心，然后使其失效。</p><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>在了解<code>volatile</code>之前，首先需要了解Java的内存模型<code>JMM</code>，在Java内存模型中，堆是所有线程共享的<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/JMM%E6%A8%A1%E5%9E%8B%E5%92%8Ccpu.png" alt=""></p><p>图中即是JMM模型对硬件的简单映射，在Java里面，对象都是在堆中，而在线程的私有栈空间，每一个线程只能对变量进行修改或者赋值操作。</p><h2 id="volatile-1"><a href="#volatile-1" class="headerlink" title="volatile"></a>volatile</h2><p>首先多线程的本质其实是多个线程轮流执行，在<code>时间片轮转调度算法</code>里面，每一个线程都会获取到一个执行时间，执行时间结束，就会轮到其他的线程执行。</p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>考虑一下场景，如果内存中有一个值x=1，<code>线程一</code>和<code>线程二</code>都会对x进行一个<code>x+=1</code>的操作。那么无论哪一个线程率先执行完毕，都会将最新的结果集写入到内存中，这样其他线程在读取的时候都会读取到最新的数据。这样就保证了任意一个线程在读取这个数据的时候都会一个最新的值。</p><blockquote><p>如果不加<code>volatile</code>限制，则可能每一个核心操作完成之后只是将值写入到自己Cache区，而不刷新内存。什么时候刷新完全是随机的</p></blockquote><h3 id="非原子性"><a href="#非原子性" class="headerlink" title="非原子性"></a>非原子性</h3><p>但是如果出现一下情况：</p><blockquote><ol><li>线程一读取x=1</li><li>线程一正在执行+1的操作</li><li>线程一的执行时间结束，此时线程二开始执行</li><li>线程二在执行的时候读取内存数据也是x=1，</li><li>于是线程二将x+1的结果写入内存(由于volatile的限制，CPU在执行完毕的时候必须强制写入内存)</li><li>线程一将x+1的结果写入内存</li></ol></blockquote><p>所以volatile虽然具有<code>可见性</code>，但是却无法保证一个操作的原子性，如下上测试代码：<br>新建一个增长类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AInstance</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">static</span>  <span class="keyword">int</span> a =<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后新建一个测试线程：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ; i&lt;<span class="number">100</span> ;i++)&#123;</span><br><span class="line">            AInstance.increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后启动类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ATest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;<span class="number">1000</span>; i++)&#123;</span><br><span class="line">            AThread aThread = <span class="keyword">new</span> AThread();</span><br><span class="line">            aThread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(AInstance.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果使用<code>Volatile</code>修饰的变量可以保证原子性的话，那么a一定会是<code>100000</code>,但是测试结果一直是随机数字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">31600或者其他的</span><br></pre></td></tr></table></figure></p><h3 id="MESI协议和volatile"><a href="#MESI协议和volatile" class="headerlink" title="MESI协议和volatile"></a>MESI协议和volatile</h3><p>虽然MESI协议可以保证缓存一致性，但是如果有一个线程在正要进行<code>+1</code>的时候被挂起了，而另一个线程则正好执行完了<code>x+=1</code>的操作，此时回到第一个线程继续执行，这样就会导致一个错误的数据。如下：<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E6%89%A7%E8%A1%8C%E5%9B%BE.png" alt=""></p><h4 id="volatile-2"><a href="#volatile-2" class="headerlink" title="volatile"></a>volatile</h4><p>所以虽然有<code>MESI</code>保证缓存的一致性，但是在赋值操作之前已经读取了，所以此时并不会再次读取内存</p><p>这就是<code>volatile</code>只能保证内存的可见性，但是无法保证原子性的问题</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>正是由于volatile的这个特性，所以在多线程中的单例模式都会在获取实例的方法上加上一个<code>synchronized</code>关键字，以确保只会生成一个对象。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在多线程的场景下，使用volatile需要注意的是原子性操作的问题，否则就会造成程序的数据错误</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot中在一个事物中更新多表的注意事项</title>
      <link href="/2019/01/02/SpringBoot%E4%B8%AD%E5%9C%A8%E4%B8%80%E4%B8%AA%E4%BA%8B%E7%89%A9%E4%B8%AD%E6%9B%B4%E6%96%B0%E5%A4%9A%E8%A1%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2019/01/02/SpringBoot%E4%B8%AD%E5%9C%A8%E4%B8%80%E4%B8%AA%E4%BA%8B%E7%89%A9%E4%B8%AD%E6%9B%B4%E6%96%B0%E5%A4%9A%E8%A1%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      <content type="html"><![CDATA[<h2 id="现象："><a href="#现象：" class="headerlink" title="现象："></a>现象：</h2><p>具体表现为数据被update之后，在同一个事物里面再次查询，查询的是一个更新之后的值。</p><h2 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h2><p>更新一个商品的信息，其步骤如下：</p><ol><li>更新商品表的一些数据</li><li>在进展表中新加入一条申请</li><li>在操作日志表中新增各种变更的操作(<code>记录变更之前的值，变更之后的值</code>)</li></ol><p>由于之前是每一个数据的操作都是独立的一个方法，所以其代码结构如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ceateProductEditRequest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editProduct</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createNewProductProgress</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertLogs</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是这样的操作顺序会出现一个问题，因为在同一个事物中。首先执行了更新商品的操作，然后在进展表中新增一个记录。一直到这里</p><p>在此之前一直都是没问题的，然而在第三步的时候，由于数据库中已经将商品表的数据进行了更新，所以此时查询出来的是一个更新之后的值。但是日志表中是需要记录申请的前后值得变化。所以此时就需要调整方法的顺序。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>同一个事物里面，在更新之后进行的查询语句，查询出的是更新之后的语句，如果要实现上述的业务场景，即需要将<code>insertLogs</code>方法提至<code>editProduct</code>之前。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ceateProductEditRequest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertLogs</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editProduct</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createNewProductProgress</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于在同一个事物里面，且该业务场景实际中并不多。所以这样简单处理了下。</p><p>但是这样的写法在并发高的情况下，需要考虑数据库的锁设计，防止出现了死锁，例如数据库开启了<code>GAP</code>锁或者<code>Next-Key Lock</code></p>]]></content>
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一次nginx的排查经历</title>
      <link href="/2018/12/21/%E4%B8%80%E6%AC%A1nginx%E7%9A%84%E6%8E%92%E6%9F%A5%E7%BB%8F%E5%8E%86/"/>
      <url>/2018/12/21/%E4%B8%80%E6%AC%A1nginx%E7%9A%84%E6%8E%92%E6%9F%A5%E7%BB%8F%E5%8E%86/</url>
      <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>配置nginx的https，但是修改配置文件之后一直无法访问。。。</p><h2 id="排查步骤"><a href="#排查步骤" class="headerlink" title="排查步骤"></a>排查步骤</h2><p>刚开始以为是防火墙的原因，由于是阿里云的主机，所以直接登录云主机查看安全配置。一切都是OK的。</p><p>然后又查看主机自己的防火墙，由于是<code>centos7</code>，所以在此花了点时间，最后还是将443端口添加到了防火墙规则中，然后重启防火墙。。。</p><p><code>https</code>访问网站，发现还是没反应。</p><p>这个时候就开始怀疑nginx的配置文件是不是哪里配置错误了，主要都是修改的 443 的服务</p><blockquote><p>其实这时候思路已经错误了</p></blockquote><p>后来通过<code>https</code>还是一直不能访问到</p><h2 id="继续排查"><a href="#继续排查" class="headerlink" title="继续排查"></a>继续排查</h2><p>当时想了下，索性直接修改 <code>80</code> 配置的<code>server</code>，然后发现修改之后还能正常访问，于是就推断可能是修改的<code>nginx</code>的配置文件并非是nginx所读取的。于时通过以下命令发现问题：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2lqpf5ei7560Z ~]# locate nginx.conf</span><br><span class="line">/usr/local/nginx/conf/nginx.conf</span><br><span class="line">/usr/local/nginx/conf/nginx.conf.default</span><br><span class="line">/usr/local/nginx/nginx-1.10.1/conf/nginx.conf</span><br></pre></td></tr></table></figure></p><p>可以看到我的服务器中出现了两个<code>nginx.conf</code>，最下面那一个是nginx安装文件中的配置文件，我之前一直改的就是这个文件</p><p>然后再查看<code>nginx</code>的服务<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2lqpf5ei7560Z ~]# ps -ef|grep nginx</span><br><span class="line">root      4154     1  0 Dec16 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">root      4155  4154  0 Dec16 ?        00:00:00 nginx: worker process</span><br><span class="line">root     10071 10026  0 00:15 pts/2    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@iZ2lqpf5ei7560Z ~]#</span><br></pre></td></tr></table></figure></p><p>看到这里就大概知道原因了。之前一直改的是编译文件中的配置文件，自然是不会生效的。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>这也为之后遇到问题的排查思路提供了一点警示，即遇到问题的时候不要慌张，首先一点点的梳理逻辑，然后再进行排查。</p>]]></content>
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于自己代码风格的一点思考</title>
      <link href="/2018/12/09/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%B7%B1%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
      <url>/2018/12/09/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%B7%B1%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>随着第一个项目正式上线，是时候总结点什么了。以供自己日后反思。<br>顺便也提醒下自己是时候看下<code>《代码整洁之道》</code>了</p><h2 id="关于枚举和静态常量"><a href="#关于枚举和静态常量" class="headerlink" title="关于枚举和静态常量"></a>关于枚举和静态常量</h2><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>在代码里面最好不要有<code>魔法值</code>，这个虽然在阿里巴巴开发手册中提到过，但是自己刚开始的时候一直觉得，有时候这个变量就使用一次，为啥还需要定义一个变量，那样到时候去寻找这个变量的时候不是更加麻烦么。</p><p>后来才发现这个想法有点愚蠢，因为你根本不知道后来会不会使用这个变量。例如以下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">"A"</span>.equals(A))&#123;</span><br><span class="line">    XXX</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>假设代码中就一处使用这个”A”，没问题。但是当代码中有多处有类似的判断时，直接用上述代码虽然也可以完成，若随后需求一变动，那么就需要修改多个代码块的判断。这时候就会显得很繁琐，而且还说不准会漏掉几个。所以这个时候一个静态变量是不错的选择。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String XX_TYYPE =<span class="string">"A"</span>;</span><br><span class="line"><span class="keyword">if</span>(XX_TYPE.equals(A))&#123;</span><br><span class="line">    XXX</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举其实和常量在意义上是一样的。区别就是枚举可以表达更多的信息。例如最常用的接口返回值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ResponseEnum&#123;</span><br><span class="line"></span><br><span class="line">   SUCCESS(<span class="string">"200"</span>,<span class="string">"success"</span>),</span><br><span class="line">   FAIL(<span class="string">"100"</span>,<span class="string">"fail"</span>)</span><br><span class="line">   ;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseEnum</span><span class="params">(String code,String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = messgae;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个时候就可以表达更多的信息了。同样的，利用枚举也可以来定义一些Exception。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>除了上述的枚举和常量之外，其实还可以在配置文件中来定义一些通用的变量，在配置文件中定义一些变量的有点是无需修改代码(<code>前提是使用了微服务，有自己的配置中心</code>)。<br>然后在代码中使用<code>@Value</code>注解来获取该变量。从而无需改动代码。</p><h2 id="关于Lambda表达式"><a href="#关于Lambda表达式" class="headerlink" title="关于Lambda表达式"></a>关于Lambda表达式</h2><p>Java8中使用的<code>Lambda</code>表达式确实可以简化不少代码的编写，但是需要注意的是。在使用的时候不要写过长的表达式。这样虽然可以方便开发者省去不少的时候，但是有时候却不利于后来维护者阅读代码。</p><h2 id="关于Optional泛型"><a href="#关于Optional泛型" class="headerlink" title="关于Optional泛型"></a>关于Optional泛型</h2><p>这个泛型其实目前我使用的还是不较少，所以对于这个泛型的使用目前还不清楚是否可以简化代码。</p><h2 id="代码的简化"><a href="#代码的简化" class="headerlink" title="代码的简化"></a>代码的简化</h2><p>代码的简化是一门艺术，不仅仅是可以简化代码的</p><h3 id="函数和变量命名"><a href="#函数和变量命名" class="headerlink" title="函数和变量命名"></a>函数和变量命名</h3><p>对于函数和变量的命名，最好是越明确越规范越好。不然自己日后读起来…自己都不清楚这个函数是干啥的</p><h3 id="代码行数太多，最好抽离出来"><a href="#代码行数太多，最好抽离出来" class="headerlink" title="代码行数太多，最好抽离出来"></a>代码行数太多，最好抽离出来</h3><p>一个方法里面如果行数太多，最好将其抽离出来的，作为一些独立的方法。这样不仅之后阅读起来比较方便，而且还方便以后替换逻辑，如果方法里面逻辑太多，那么在以后如果出现一个需求，功能和之前的某一个方法类似，仅仅是一点不同。</p><p>如果是优化后的代码，则仅仅是替换掉那部分不同的方法即可。若一个代码的方法逻辑太多，则必须重写一个类似的方法。这无形之间又加大了开发的工作量，而且也不便于日后的维护。</p>]]></content>
      
      <categories>
          
          <category> 思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mongo多数据源的使用</title>
      <link href="/2018/12/05/mongo%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/12/05/mongo%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在开发的过程中，不可避免的会使用多数据源，但是相对于Mysql的多数据源，Mongo的多数据源配置还是比较容易的。</p><p>首先在<code>pom.xml</code>中引入<code>mongo</code>的驱动jar包以及<code>springboot</code>和<code>mongo</code>的一个jar包</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Mongo的多数据源无非是首先读取配置文件，生成<code>MongoProperties</code>，通过<code>MongoProperties</code>来生成一个<code>MongoTemplate</code>,最后通过<code>Repository</code>来操作Mongo。</p><p>而多数据源就是生成多了<code>MongoTemplate</code>，然后通过多个<code>MongoTemplate</code>所对应的<code>Repository</code>来操作Mongo数据库</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongodb-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- Mongo相关--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mongodb/mongo-java-driver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongo-java-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mongodb/bson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Mysql之binlog的使用(一)</title>
      <link href="/2018/11/11/Mysql%E4%B9%8Bbinlog%E7%9A%84%E4%BD%BF%E7%94%A8-%E4%B8%80/"/>
      <url>/2018/11/11/Mysql%E4%B9%8Bbinlog%E7%9A%84%E4%BD%BF%E7%94%A8-%E4%B8%80/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>假设有一个如下的业务场景如下：<br>需要记录一个商品或者股票的实时价格，每一个小时记录一次，而商品或者股票的数量十分多，这时业务发展到一定的程度之后就需要考虑数据库的设计。首先商品每个小时的价格肯定是需要入库的。其次每小时的购买人群以及各种埋点数据随之一起也要入库。以便于日后的数据分析。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>随着数据量的增大，一般的解决方案是设置索引，然后再考虑是进行垂直还是水平分库分表。</p><p>但是一旦使用水平分库分表就会无形之间增加开发的复杂程度，而且分库分表之后考虑的各种因素也会随之而来增加数倍。例如各种表的<code>唯一ID</code>以及如何进行维度的划分。</p><p>对于数据量不大的一个另解决方法是：解析<code>mysql</code>的binlog日志，然后将其存入另一个库，优先推荐<code>mongo</code>，该库只作为一个读取库进行查询，不进行任何的写入。这样处理之后，在中等程度的规模数据是完全可以满足需求的，将其读写进行分离。而且丝毫不影响之前的业务和设计。</p><h2 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h2><p>其实对于增删改查之外，<code>mysql</code>的binlog日志也是一个非常有用的工具，它可以记录下数据库的每一次操作，例如查询，新增，删除，更新等。然后将其作为日志记录在binlog之中。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>首先确保你的数据库已经开启了<code>binlog</code>日志，<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'log_%';</span><br><span class="line">+<span class="comment">----------------------------------------+------------------------------------------------------------------+</span></span><br><span class="line">| Variable_name                          | Value                                                            |</span><br><span class="line">+<span class="comment">----------------------------------------+------------------------------------------------------------------+</span></span><br><span class="line">| log_bin                                | ON                                                               |</span><br><span class="line">| log_bin_basename                       | /opt/mysql/mysql-8.0.11-linux-glibc2.12-x86_64/data/master       |</span><br><span class="line">| log_bin_index                          | /opt/mysql/mysql-8.0.11-linux-glibc2.12-x86_64/data/master.index |</span><br><span class="line">| log_bin_trust_function_creators        | OFF                                                              |</span><br><span class="line">| log_bin_use_v1_row_events              | OFF                                                              |</span><br><span class="line">| log_error                              | ./error.log                                                      |</span><br><span class="line">| log_error_services                     | log_filter_internal; log_sink_internal                           |</span><br><span class="line">| log_error_verbosity                    | 2                                                                |</span><br><span class="line">| log_output                             | FILE                                                             |</span><br><span class="line">| log_queries_not_using_indexes          | OFF                                                              |</span><br><span class="line">| log_slave_updates                      | ON                                                               |</span><br><span class="line">| log_slow_admin_statements              | OFF                                                              |</span><br><span class="line">| log_slow_slave_statements              | OFF                                                              |</span><br><span class="line">| log_statements_unsafe_for_binlog       | ON                                                               |</span><br><span class="line">| log_syslog                             | ON                                                               |</span><br><span class="line">| log_syslog_facility                    | daemon                                                           |</span><br><span class="line">| log_syslog_include_pid                 | ON                                                               |</span><br><span class="line">| log_syslog_tag                         |                                                                  |</span><br><span class="line">| log_throttle_queries_not_using_indexes | 0                                                                |</span><br><span class="line">| log_timestamps                         | UTC                                                              |</span><br><span class="line">+<span class="comment">----------------------------------------+------------------------------------------------------------------+</span></span><br><span class="line">20 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到<code>| log_bin                                | ON</code>，这就表示数据库已经开启了<code>binlog</code>日志，如果你查询到还没有开启的话，可以去搜索下如何开启。</p><p>另外需要注意的是，如果你需要在<code>binlog</code>中看到日志的话，你同时也需要在Mysql中设置<code>binlog_rows_query_log_events</code>为<code>Row</code>，如果不确定的话，可以将<code>set binlog_rows_query_log_events=1</code>执行一次。</p><p>为了测试，已经建立好了一个表，其结构与如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc T_fund;</span><br><span class="line">+<span class="comment">-------+---------------+------+-----+---------+-----------------------------+</span></span><br><span class="line">| Field | Type          | Null | Key | Default | Extra                       |</span><br><span class="line">+<span class="comment">-------+---------------+------+-----+---------+-----------------------------+</span></span><br><span class="line">| id    | int(10)       | NO   | PRI | NULL    |                             |</span><br><span class="line">| name  | varchar(255)  | YES  |     | NULL    |                             |</span><br><span class="line">| price | decimal(10,2) | YES  |     | NULL    |                             |</span><br><span class="line">| date  | timestamp     | NO   |     | NULL    | on <span class="keyword">update</span> <span class="keyword">CURRENT_TIMESTAMP</span> |</span><br><span class="line">+<span class="comment">-------+---------------+------+-----+---------+-----------------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></p><p>那么现在尝试向该表插入一个语句，<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;   insert into T_fund(id,name,price,date) values(3,'测试基金3',1234.1,'2018-11-11 22:12:00');</span><br><span class="line">Query OK, 1 row affected (0.09 sec)</span><br></pre></td></tr></table></figure></p><p>此时查看binlog，<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master logs;</span><br><span class="line">+<span class="comment">---------------+-----------+</span></span><br><span class="line">| Log_name      | File_size |</span><br><span class="line">+<span class="comment">---------------+-----------+</span></span><br><span class="line">| master.000001 |       178 |</span><br><span class="line">| master.000002 |     62644 |</span><br><span class="line">| master.000003 |    112942 |</span><br><span class="line">+<span class="comment">---------------+-----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到目前是有三个<code>binlog</code>文件，由于binlog是依次从1开始递增，所以刚刚的插入语句是在第三个日志中，查看<code>master.000003</code>即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  show binlog events in 'master.000003' from 114213\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">   Log_name: master.000003</span><br><span class="line">        Pos: 114213</span><br><span class="line"> Event_type: Rows_query</span><br><span class="line">  Server_id: 1</span><br><span class="line">End_log_pos: 114330</span><br><span class="line">       Info: # insert into T_fund(id,name,price,date) values(3,'测试基金3',1234.1,'2018-11-11 22:12:00')</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">   Log_name: master.000003</span><br><span class="line">        Pos: 114330</span><br><span class="line"> Event_type: Table_map</span><br><span class="line">  Server_id: 1</span><br><span class="line">End_log_pos: 114397</span><br><span class="line">       Info: table_id: 179 (T_binlog.T_fund)</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">   Log_name: master.000003</span><br><span class="line">        Pos: 114397</span><br><span class="line"> Event_type: Write_rows</span><br><span class="line">  Server_id: 1</span><br><span class="line">End_log_pos: 114461</span><br><span class="line">       Info: table_id: 179 flags: STMT_END_F</span><br><span class="line">*************************** 4. row ***************************</span><br><span class="line">   Log_name: master.000003</span><br><span class="line">        Pos: 114461</span><br><span class="line"> Event_type: Xid</span><br><span class="line">  Server_id: 1</span><br><span class="line">End_log_pos: 114492</span><br><span class="line">       Info: <span class="keyword">COMMIT</span> <span class="comment">/* xid=4004 */</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>由于我知道该条日志的<code>position</code>，所以加了一个参数<code>from 114213</code>，如果不知道的话，可以直接输入<code>show binlog events in &#39;master.000003</code>然后看结尾即可。 </p><p>有了<code>mysql</code>的binlog之后，下一步就需要考虑如何将<code>binlog</code>解析到其他的数据库之中，目前开源的轮子，比较好的有:</p><blockquote><p><a href="https://github.com/zendesk/maxwell" target="_blank" rel="noopener">Maxwell(github)</a><br><br>  <a href="https://github.com/alibaba/canal" target="_blank" rel="noopener">canal(alibaba)</a></p></blockquote><p>  在这里推荐Maxwell，因为Maxwell目前已经对<code>MySql8</code>有一个比较好的支持了，而且我们已经将部分业务应用到了Maxwell了，目前还比较稳定。</p><p>  下一篇主要会将<code>Maxwell</code>与<code>binlog</code>以及<code>rabbitmq</code>进行一个整合。</p>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Rabbitmq深度学习二</title>
      <link href="/2018/11/10/Rabbitmq%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%BA%8C/"/>
      <url>/2018/11/10/Rabbitmq%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h2 id="消息的接收和拒绝"><a href="#消息的接收和拒绝" class="headerlink" title="消息的接收和拒绝"></a>消息的接收和拒绝</h2><p>当消费段接收到一个消息之后，会进行消费的处理。假如在业务中发现该消息是一个错误的消息，那么很显然业务方会直接拒绝此条消息。</p><h3 id="拒绝消息"><a href="#拒绝消息" class="headerlink" title="拒绝消息"></a>拒绝消息</h3><p>拒绝消息一般在消费端调用<code>reject</code>或者<code>neck</code>，这两个Api的作用分别是：一个可以批量消息，一个则只是每一次处理一条</p><h3 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h3><p>一般直接调用<code>basic.ack</code>即可</p><h2 id="发送方的消息确认"><a href="#发送方的消息确认" class="headerlink" title="发送方的消息确认"></a>发送方的消息确认</h2><h3 id="消息的确认"><a href="#消息的确认" class="headerlink" title="消息的确认"></a>消息的确认</h3><p>既然rabbitmq作为一款成熟的消息中间件，那么自然也有完善的消息确认机制。消息确认机制分为生产者端和消费者端，生产者端的消息确认主要是用于确认消息是否成功的到达交换机以及其绑定的队列。</p><p>使用生产者端的消息确认需要实现<code>RabbitTemplate.ConfirmCallback</code>和<code>abbitTemplate.ConfirmCallback</code>，并且重写<code>confirm</code>方法，例如一下代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqConfirmCallback</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> b, String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(b) &#123;</span><br><span class="line">            System.out.println(<span class="string">"消息确认成功"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"消息确认失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqReturnCallback</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> b, String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"确认回调被出发"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当重写完这两个方法之后还不行，另外还需要的是在<code>RabbitTemplate</code>设置其<code>setConfirmCallback</code>和<code>setReturnCallback</code>,然后即可使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    MqConfirmCallback mqConfirmCallback;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MqReturnCallback mqReturnCallback;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(mqConfirmCallback);</span><br><span class="line">        rabbitTemplate.setReturnCallback(mqReturnCallback);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>此时启动生产者但是却不启动消费者，然后发送一条消息，在控制台可以看到打印出来了<code>消息确认成功</code>,此时表明消息已经成功的到达了交换机，那么此时如果我将绑定在交换机上的所有队列删除呢?</p><h4 id="删除交换机以及队列来测试"><a href="#删除交换机以及队列来测试" class="headerlink" title="删除交换机以及队列来测试"></a>删除交换机以及队列来测试</h4><p>此时消息因为到不了交换机，控制台会打印<code>确认回调被出发</code>和<code>消息确认成功</code>，至于此处明显是由于消息路由不到交换机，而导致消息被Return。那么为啥那么还会出发一次<code>消息确认成功</code>呢？。查看Rabbitmq的文档发现：</p><blockquote><p>For unroutable messages, the broker will issue a confirm once the exchange verifies a message won’t route to any queue (returns an empty list of queues). If the message is also published as mandatory, the basic.return is sent to the client before basic.ack. The same is true for negative acknowledgements (basic.nack)</p></blockquote><p>意思就是当消息不可路由的时候，则broker会在<code>basic.ack</code>之前发送一个<code>basic.return</code>。那么也就不奇怪了为什么这里会收到两条消息</p><h4 id="消费者拒绝测试"><a href="#消费者拒绝测试" class="headerlink" title="消费者拒绝测试"></a>消费者拒绝测试</h4><p>既然mq的发送方会有一个确认，那么如果消费者拒绝了此条消息，发送方还会收到提示吗？<br>可以看到在控制台只会打印<code>消息确认成功</code>，也就是说发送方只会确认此条消息到达了交换机，而且交换机可以路由到指定对的队列。</p><h3 id="不可重复在一个message进行多次操作"><a href="#不可重复在一个message进行多次操作" class="headerlink" title="不可重复在一个message进行多次操作"></a>不可重复在一个message进行多次操作</h3><p>假设在一个消息上进行了拒绝之后，然后再进行确认，此时<code>mq</code>会抛出一个异常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.rabbitmq.client.ShutdownSignalException: channel error; reason: &#123;#method&lt;channel.close&gt;(reply-code=406, reply-text=PRECONDITION_FAILED - unknown delivery tag 1, class-id=60, method-id=80)</span><br></pre></td></tr></table></figure></p><h3 id="不要将错误的消息重新归队"><a href="#不要将错误的消息重新归队" class="headerlink" title="不要将错误的消息重新归队"></a>不要将错误的消息重新归队</h3><p>若一个消息已经明确知道会导致消费方异常，则不要将此条消息拒绝然后重新写到队列，否则会导致一个循环，从而阻塞后面的消息</p>]]></content>
      
      <categories>
          
          <category> Rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Rabbitmq深度学习一</title>
      <link href="/2018/11/07/Rabbitmq%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
      <url>/2018/11/07/Rabbitmq%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%80/</url>
      <content type="html"><![CDATA[<h2 id="rabbitmq-深度学习一"><a href="#rabbitmq-深度学习一" class="headerlink" title="rabbitmq 深度学习一"></a>rabbitmq 深度学习一</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>rabbitmq是目前使用最多的一个消息中间件，配合微服务的使用可以使业务模块化，便于之后的维护。同时使用rabbitmq可以将许多业务异步化，提高系统的性能。</p><h3 id="队列的创建原则"><a href="#队列的创建原则" class="headerlink" title="队列的创建原则"></a>队列的创建原则</h3><p>但是在使用rabbitmq 的时候需要注意点就是到底是<code>生产者</code>来建立队列和交换机还是由<code>消费者</code>来建立交换机和队列。一般的情况是由消费者来建立队列，但是假如消费者挂掉了，导致生产者发出的消息被交换机路由到了一个不存在的队列，那么此时 rabbitmq会忽略该条消息。所以对于重要的消息。即不允许该消息丢失，那么此时最好是由生产者和消费者一起船创建一个队列。</p><p>在rabbit里面，假设生产者和消费者同时创建一个队列，如果队列的各项参数都相同的话，rabbitmq是不会有问题的，假设生产者和消费者同时创建一个队列，但是后创建的和前面创建的参数不同，那么此时rabbitmq就会报错。</p><h4 id="特殊的队列：死信队列"><a href="#特殊的队列：死信队列" class="headerlink" title="特殊的队列：死信队列"></a>特殊的队列：死信队列</h4><p>死信队列适用于当某一个队列的消息被拒绝的时候，或队列的消息大于最大TTL时以及队列大于最大值。此时该消息会被路由到死信交换器。<br>其一般的使用方式是建立一个死信交换机和一个死信队列，然后监听死信队列即可。</p><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><h5 id="生产者端建立队列"><a href="#生产者端建立队列" class="headerlink" title="生产者端建立队列"></a>生产者端建立队列</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(ignoreUnknownFields = <span class="keyword">false</span>, prefix = <span class="string">"somersames.rabbitmq"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitmqConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String laGouFailQueue = <span class="string">"laGouFailQueue"</span>;</span><br><span class="line">    <span class="keyword">private</span> String laGouQueue = <span class="string">"laGouQueue"</span>;</span><br><span class="line">    <span class="keyword">private</span> String laGouFailExchange = <span class="string">"laGouFailExchange"</span>;</span><br><span class="line">    <span class="keyword">private</span> String laGouFailExchangeRoutingKey = <span class="string">"laGouFailExchangeRoutingKey"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_LETTER_EXCHANGE = <span class="string">"x-dead-letter-exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_LETTER_ROUTING_KEY = <span class="string">"x-dead-letter-routing-key"</span>;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">laGouFailQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(laGouFailQueue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">laGouFailExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(laGouFailExchange);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingLagouFailExchange</span><span class="params">(Queue laGouFailQueue, DirectExchange laGouFailExchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(laGouFailQueue).to(laGouFailExchange).with(laGouFailExchangeRoutingKey);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">laGouQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(DEAD_LETTER_EXCHANGE, laGouFailExchange);<span class="comment">//设置死信交换机</span></span><br><span class="line">        map.put(DEAD_LETTER_ROUTING_KEY, laGouFailExchangeRoutingKey);<span class="comment">//设置死信routingKey</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(laGouQueue, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="消费者端建立队列"><a href="#消费者端建立队列" class="headerlink" title="消费者端建立队列"></a>消费者端建立队列</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String laGouQueue = <span class="string">"laGouQueue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String laGouExchange = <span class="string">"laGouExchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String laGouFailQueue = <span class="string">"laGouFailQueue"</span>;</span><br><span class="line">    <span class="keyword">private</span> String laGouFailExchange = <span class="string">"laGouFailExchange"</span>;</span><br><span class="line">    <span class="keyword">private</span> String laGouFailExchangeRoutingKey = <span class="string">"laGouExchangeRoutingKey"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_LETTER_EXCHANGE = <span class="string">"x-dead-letter-exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_LETTER_ROUTING_KEY = <span class="string">"x-dead-letter-routing-key"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">laGouQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(DEAD_LETTER_EXCHANGE, laGouFailExchange);<span class="comment">//设置死信交换机</span></span><br><span class="line">        map.put(DEAD_LETTER_ROUTING_KEY, laGouFailExchangeRoutingKey);<span class="comment">//设置死信routingKey</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(laGouQueue, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">laGouFailQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(laGouFailQueue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">laGouFailExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(laGouFailExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleMessageListenerContainer <span class="title">laGouListenerContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">            LagouRabbitMqListener lagouRabbitMqListener,</span></span></span><br><span class="line"><span class="function"><span class="params">            Queue laGouQueue)</span> </span>&#123;</span><br><span class="line">        SimpleMessageListenerContainer container = <span class="keyword">new</span> SimpleMessageListenerContainer();</span><br><span class="line">        container.setMessageListener(lagouRabbitMqListener);</span><br><span class="line">        container.setQueues(laGouQueue);</span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line">        container.setConcurrentConsumers(<span class="number">10</span>);</span><br><span class="line">        container.setMaxConcurrentConsumers(<span class="number">20</span>);</span><br><span class="line">        container.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LagouRabbitMqListener</span> <span class="keyword">implements</span> <span class="title">ChannelAwareMessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = message.getBody();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line">        channel.basicAck(message.getMessageProperties().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rabbitmq的路由方式"><a href="#rabbitmq的路由方式" class="headerlink" title="rabbitmq的路由方式"></a>rabbitmq的路由方式</h3><p>一般来讲rabbitmq的路由方式分为三种，一种是<code>fanout</code>，即该交换机会将此条消息推送到机绑定在该交换所有队列之中。</p><p><code>topic</code>:该路由器可以支持通配符来进行消息的匹配，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingPublicFundFailExchange</span><span class="params">(Queue queue, DirectExchange directExchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(directExchange).with(<span class="string">"*.key"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><code>#</code>可以匹配多个关键字<br><code>*</code>只可以匹配一个关键字</p><p><code>direct</code>:该路由器会精确匹配队列的key，从而路由器会将指定的消息发送到相应的队列<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingPublicFundFailExchange</span><span class="params">(Queue queue, DirectExchange directExchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(directExchange).with(<span class="string">"error.key"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>topic是<code>fanout</code>和<code>diret</code>居中的一种模式，当<code>topic</code>为<code>#</code>的时候就类似于fanout，当<code>topic</code>的设置不带有<code>*</code> 和 <code>#</code> 的时候，就是一个<code>directe</code> 了。</p><h3 id="vhost多租户模式"><a href="#vhost多租户模式" class="headerlink" title="vhost多租户模式"></a>vhost多租户模式</h3><p>在一个企业中，肯定不会是一个业务系统会使用rabbitmq，那么假设每一个业务系统都搭建一个自己的rabbitmq服务，此时就会造成极大的浪费。最好的解决办法是搭建一个集团一起使用的rabbbitmq集群，然后通过rabbitmq的vhost来进行一个隔离。</p><p><code>vhost</code>模式类似于docker环境，一个vhost就是一个docker镜像，每一个vhost里面的交换机和队列都是互相隔离的。在rabbitmq中，默认的vhost就是一个<code>\</code>，</p>]]></content>
      
      <categories>
          
          <category> Rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue中使用router遇到无法跳转的问题</title>
      <link href="/2018/10/31/Vue%E4%B8%AD%E4%BD%BF%E7%94%A8router%E9%81%87%E5%88%B0%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/31/Vue%E4%B8%AD%E4%BD%BF%E7%94%A8router%E9%81%87%E5%88%B0%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>今天在配置Vue的路由的时候，在router的<code>index.js</code>中配置了如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'@/pages/components/home/Home'</span></span><br><span class="line"><span class="keyword">import</span> Tree <span class="keyword">from</span> <span class="string">'@/pages/components/tree/Tree'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'Home'</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/tree'</span>,</span><br><span class="line">      name: <span class="string">'Tree'</span>,</span><br><span class="line">      component: Tree</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>但是却在启动项目的时候，输入URL:<code>localhost:8080/tree</code>无法实现跳转，后来发现是在<code>App.vue</code>中没有设置<code>&lt;router-view&gt;</code>,最后加上去即可。</p><p>例如在<code>App.vue</code>中配置了一个<code>&lt;router-view&gt;</code>，输入URL:<code>localhost:8080/tree</code>就会跳转到了<code>Tree.vue</code>。<br>那假设在<code>Tree.vue</code>中再配置配置一个<code>&lt;router-view&gt;</code>，这时候就会匹配的是<code>localhost:8080/tree/XXX</code>,当然也可以直接用<code>&lt;router-link&gt;</code>跳转到指定的组件中</p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css中定位的学习</title>
      <link href="/2018/10/13/css%E4%B8%AD%E5%AE%9A%E4%BD%8D%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/10/13/css%E4%B8%AD%E5%AE%9A%E4%BD%8D%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>首先页面代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div1'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div2'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div3'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div4'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div22'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">#div1&#123;</span></span><br><span class="line"><span class="undefined">    width: 700px;</span></span><br><span class="line"><span class="undefined">    height: 700px;</span></span><br><span class="line"><span class="undefined">    background: red;</span></span><br><span class="line"><span class="undefined">    margin-top: 50px;</span></span><br><span class="line"><span class="undefined">    margin-left: 50px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="relative和absolute"><a href="#relative和absolute" class="headerlink" title="relative和absolute"></a>relative和absolute</h1><p>relative单独使用，代码如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div2</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(17, 0, 255);</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其显示结果如图：<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/relative-1.png" alt=""></p><p>说明一切都是没问题的，div2是按照div1来进行相对定位的。那么单独使用<code>absolute</code>呢</p><h1 id="absolute单独使用"><a href="#absolute单独使用" class="headerlink" title="absolute单独使用"></a>absolute单独使用</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div2</span>&#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">       <span class="attribute">background</span>: <span class="built_in">rgb</span>(17, 0, 255);</span><br><span class="line">       <span class="attribute">position</span>: absolute;</span><br><span class="line">       <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">       <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">       <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">bottom</span>: <span class="number">20px</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/absolutu.png" alt=""></p><p>可以看到使用<code>absolute</code>的<code>div2</code>并未按照<code>div1</code></p><p>那如果<code>div3</code>也是absolute定位的话，那么此时会相对于<code>div2</code>定位还是相对于<code>div1</code>呢?<br>测试如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">700px</span>;</span><br><span class="line">        <span class="attribute">background</span>: red;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#div2</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(17, 0, 255);</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#div3</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">background</span>: green;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>此时页面的显示如下：<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/absolute-2.png" alt=""><br>也就是说，<code>div3</code>是按照<code>div2</code>来定位的，那么为什么就是<code>div2</code>是按照html定位的呢？<br>解释就是，使用<code>absolute</code>定位的元素会一直向上寻找，直到找出包含<code>position</code>的一个元素，然后按照其定位，那么<code>relative</code>呢?<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">700px</span>;</span><br><span class="line">        <span class="attribute">background</span>: red;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#div2</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(17, 0, 255);</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#div3</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">background</span>: green;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/relative-2.png" alt=""></p><p>可以看到，其定位都是直接以其上级元素为标准的。</p><h1 id="absolute的特性"><a href="#absolute的特性" class="headerlink" title="absolute的特性"></a>absolute的特性</h1><p>absolute 具有的特性之一就是其包裹性，也就是<code>absolute</code>的<code>width</code>的宽度是100%的时候，其宽度其实是内容的宽度，而不是真正的<code>100%</code>宽度。即被<code>inline-block</code>化了。</p><h2 id="妙用1"><a href="#妙用1" class="headerlink" title="妙用1"></a>妙用1</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div-span-1'</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">'span-1'</span>&gt;</span>adad<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"> <span class="selector-id">#div-span-1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* width: 700px; */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* height: 200px; */</span></span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        color: pink;</span></span><br><span class="line"><span class="undefined">        border: 10px solid black</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    /* #span-1&#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">    &#125; */</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意此时上层div不可以设置width，这样就可以实现外层div的宽度自动是内容的宽度<br>修改为如下，也可以使用：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div-span-1</span>&#123;</span><br><span class="line">       <span class="comment">/* width: 700px; */</span></span><br><span class="line">       <span class="comment">/* height: 200px; */</span></span><br><span class="line">       <span class="attribute">position</span>: absolute;</span><br><span class="line">       <span class="attribute">color</span>: pink;</span><br><span class="line">       <span class="attribute">border</span>: <span class="number">10px</span> solid black;</span><br><span class="line">       <span class="attribute">float</span>: left;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="absolute会破坏其父元素的宽度："><a href="#absolute会破坏其父元素的宽度：" class="headerlink" title="absolute会破坏其父元素的宽度："></a>absolute会破坏其父元素的宽度：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div-span-1'</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">'span-1'</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#div-span-1</span>&#123;</span></span><br><span class="line"><span class="css">       <span class="comment">/* width: 700px; */</span></span></span><br><span class="line"><span class="css">       <span class="comment">/* height: 200px; */</span></span></span><br><span class="line"><span class="css">       <span class="comment">/* position: absolute; */</span></span></span><br><span class="line"><span class="undefined">       color: pink;</span></span><br><span class="line"><span class="undefined">       border: 10px solid black;</span></span><br><span class="line"><span class="undefined">       float: left;</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="css">   <span class="selector-id">#span-1</span>&#123;</span></span><br><span class="line"><span class="undefined">       width: 300px;</span></span><br><span class="line"><span class="undefined">       height: 300px;</span></span><br><span class="line"><span class="undefined">       position: absolute;</span></span><br><span class="line"><span class="undefined">       border: 10px solid gray</span></span><br><span class="line"><span class="undefined">   &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/absolute-3.png" alt=""></p><p>此时可以看到父元素的高度已经被破坏了</p>]]></content>
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue引入styles的一个小坑</title>
      <link href="/2018/10/13/Vue%E5%BC%95%E5%85%A5styles%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%9D%91/"/>
      <url>/2018/10/13/Vue%E5%BC%95%E5%85%A5styles%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>在使用<code>styus</code>的时候，经常会定义一些css的常用变量，但是在引入styl文件一直使用的是<code>@import &#39;~styles/mixins&#39;</code>，然后就是一直在报错，<br>后来经过了解发现，这种写法需要在<code>build</code>中的<code>webpack.conf.js</code>中设置<code>style</code>的别名，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">      <span class="string">'styles'</span>: resolve(<span class="string">'src/assets/styles'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>然后将<code>styles</code>指向放<code>styl</code>的文件夹即可。</p>]]></content>
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css宽高比自适应的解决方案</title>
      <link href="/2018/10/13/css%E5%AE%BD%E9%AB%98%E6%AF%94%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2018/10/13/css%E5%AE%BD%E9%AB%98%E6%AF%94%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Leetcode上两道判断n次方的题目</title>
      <link href="/2018/09/26/Leetcode%E4%B8%8A%E4%B8%A4%E9%81%93%E5%88%A4%E6%96%ADn%E6%AC%A1%E6%96%B9%E7%9A%84%E9%A2%98%E7%9B%AE/"/>
      <url>/2018/09/26/Leetcode%E4%B8%8A%E4%B8%A4%E9%81%93%E5%88%A4%E6%96%ADn%E6%AC%A1%E6%96%B9%E7%9A%84%E9%A2%98%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>这两道题目都是判断一个数字是不是2(第一题)，3(第二题)的n次方，在做第一题的时候思路基本上和标准解法想法相同，但是在做第二题的时候，看到了许多比较有创意的解法，所以记录下</p><h2 id="判断一个数是不是2的n次方"><a href="#判断一个数是不是2的n次方" class="headerlink" title="判断一个数是不是2的n次方"></a>判断一个数是不是2的n次方</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>这个解法也就是我第一次就想到的一个解法，就是做 <code>&amp;</code> 运算，因为一个数字若是2的n次方，那么很明显就是这个数字的2进制肯定只会有一个<code>1</code>，例如：<br>32=100000 ,64 =1000000。所以只需要判断 n 与 n-1 做一个<code>&amp;</code> 运算就可以知道了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( n &lt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (n &amp; ( n-<span class="number">1</span>)) ==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>在Java里面。Int的最大值是<code>2^31 - 1</code>到 <code>-2^31</code>次，所以很明显，只需要让 n 与 <code>2^30</code> 次做一个 <code>&amp;</code> 运算即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( n&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1073741824</span> % n) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="判断一个数是不是3的n次方"><a href="#判断一个数是不是3的n次方" class="headerlink" title="判断一个数是不是3的n次方"></a>判断一个数是不是3的n次方</h2><h3 id="标准解法"><a href="#标准解法" class="headerlink" title="标准解法"></a>标准解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(n ==<span class="number">0</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">      <span class="keyword">while</span>(n % <span class="number">3</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">          n = n/<span class="number">3</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> n ==<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="解法二-1"><a href="#解法二-1" class="headerlink" title="解法二"></a>解法二</h3><p>在Java里面int的最大值是<code>2^30</code>，那么用3的最大值就可以是<code>3^19</code>,所以解法二为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( n&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1162261467</span> % n) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h3><p>由数学公式: n= 3^1,可以得到<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/TIM%E6%88%AA%E5%9B%BE20180927002429.png" alt=""></p><p>所以会有以下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (Math.log10(n) / Math.log10(<span class="number">3</span>)) % <span class="number">1</span> == <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一次SpringBoot初始化引起的思考</title>
      <link href="/2018/09/25/%E4%B8%80%E6%AC%A1SpringBoot%E5%88%9D%E5%A7%8B%E5%8C%96%E5%BC%95%E8%B5%B7%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2018/09/25/%E4%B8%80%E6%AC%A1SpringBoot%E5%88%9D%E5%A7%8B%E5%8C%96%E5%BC%95%E8%B5%B7%E7%9A%84%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>在Spring中，经常会使用<code>@Resource</code>注解来自动装配一些Bean，但是在初始化的时候还是有一点小坑的，下面是一段代码，有三个类，分别是A，B，C。</p><p>类A：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    B b;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(b.getC() == <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>类B：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    C c ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> C cParam =getC();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> C <span class="title">getC</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.getAnewC();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>类C：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> C <span class="title">getAnewC</span><span class="params">()</span></span>&#123;</span><br><span class="line">        C c =<span class="keyword">new</span> C();</span><br><span class="line">        c.setI(<span class="number">1</span>);</span><br><span class="line">        c.setName(<span class="string">"a"</span>);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setI</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时这三个类有一个地方会抛出一个空指针异常，如果你可以一眼看出来的话，不妨继续走下去看看是否正确。<br>编写一个测试类，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@SpringApplicationConfiguration</span>(classes = DemoApplication.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    A a ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a.someMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样看下去，可能就看不出哪里有问题，但是运行之后会抛出一个<code>NullException</code>，错误日志如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'b'</span> defined in file [C:\Users\SZH\IdeaProject\firstcloud\target\classes\szh\demo\test\B.class]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [szh.demo.test.B]: Constructor threw exception; nested exception is java.lang.NullPointerException</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [szh.demo.test.B]: Constructor threw exception; nested exception is java.lang.NullPointerException</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Caused by: java.lang.NullPointerException</span><br><span class="line">at szh.demo.test.B.getC(B.java:<span class="number">21</span>)</span><br><span class="line">at szh.demo.test.B.&lt;init&gt;(B.java:<span class="number">18</span>)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:<span class="number">142</span>)</span><br><span class="line">... <span class="number">55</span> more</span><br></pre></td></tr></table></figure></p><p>此时的异常栈如下，可以看到在类<code>B</code>里面，第18行，也就是<code>public C cParam =getC();</code>抛出了一空指针异常，这个异常的原因就是在方法<code>getC()</code>里面，c是一个null，那么在这里可能就会有一个疑问了，Spring不是会自动装配有<code>Resource</code>注解的吗？那么此时的<code>c</code>为什么没有被初始化。</p><h2 id="Spring的初始化"><a href="#Spring的初始化" class="headerlink" title="Spring的初始化"></a>Spring的初始化</h2><p>大家都知道，无论Spring无论怎样初始化，都是需要生成一个对象的，这个对象不管是通过<code>Class.loadClass</code>或者<code>Class.forName</code>等，那么也是无论逃不过Java的初始化，在这里为了验证<code>B</code>中的异常是在初始化B的时候产生的，此时修改B位如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    C c ;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"public C cParam =getC()上面一行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> C cParam =getC();</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"public C cParam =getC()下面一行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> C <span class="title">getC</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.getAnewC();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在此调用测试类，你会发现<code>&quot;public C cParam =getC()上面一行&quot;</code>打印出来之后马上就会出错，这也印证了前面的猜想，这个异常是在初始化B的时候产生的。</p><h3 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h3><p>那么在这里就基本上可以才出来Spring的一个加载流程了，首先Spring会扫描所有的带有注解得类，然后当初始化完毕之后放入Beanfactory，最后再进行一个变量的赋值，为了验证此猜想，修改<code>B</code>和<code>A</code>代码为如下：<br>类B<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    C c ;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"public C cParam =getC()上面一行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> C cParam =<span class="keyword">null</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"public C cParam =getC()下面一行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> C <span class="title">getC</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.getAnewC();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>类A：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    B b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(b.getC() == <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时解决。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以以后在初始化的时候，需要注意变量的初始化是否会涉及到一些对象</p>]]></content>
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring的本质-Servlet初探</title>
      <link href="/2018/09/18/Spring%E7%9A%84%E6%9C%AC%E8%B4%A8-Servlet%E5%88%9D%E6%8E%A2/"/>
      <url>/2018/09/18/Spring%E7%9A%84%E6%9C%AC%E8%B4%A8-Servlet%E5%88%9D%E6%8E%A2/</url>
      <content type="html"><![CDATA[<p>现在Java的web开发体系中，Spring以其轻量级，低耦合而占据了老大的地位，但是Spring的本质是什么，为什么在Spring里面不需要像以前写Servlet项目一样，需要配置<code>web.xml</code>。这些都需要我们去刨根问底的。</p><h1 id="Servlet是什么"><a href="#Servlet是什么" class="headerlink" title="Servlet是什么"></a>Servlet是什么</h1><p>按照Servlet规范所解释的那样，Servlet是一个Web组件，就是类似于生物里面的<code>病毒</code>和<code>宿主</code>一样，<code>病毒</code>还是那个病毒，但是离开了<code>宿主</code>之后就不能单独生存了。而<code>宿主</code>就是一个Servlet容器。(tomcat就是一个Servlet容器)</p><blockquote><p>Servlet 是基于 Java 技术的 web 组件，容器托管的，用于生成动态内容。像其他基于 Java 的组件技术一样，<br>  Servlet 也是基于平台无关的 Java 类格式，被编译为平台无关的字节码，可以被基于 Java 技术的 web server<br>  动态加载并运行。容器，有时候也叫做 servlet 引擎，是 web server 为支持 servlet 功能扩展的部分。客户端<br>  通过 Servlet 容器实现的请求/应答模型与 Servlet 交互</p></blockquote><p>在Tomcat的源码包里面，Servlet其实是一个接口，如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>init方法代表的是一个Servlet实例化完毕之后执行的方法，该目的是为了在使用Servlet之前初始化一些基础数据，例如数据库读取或者某些必须的初始化</p><h2 id="Spring与Servlet的联系"><a href="#Spring与Servlet的联系" class="headerlink" title="Spring与Servlet的联系"></a>Spring与Servlet的联系</h2><p>在Spring的配置里面，有一个最重要的步骤就是配置Spring的<code>DispatcherServlet</code>，然后再配置一个<code>ContextListener</code>，那么Spring和Servlet有什么关系呢?<br>首先看一段代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">String servletName = getServletName();</span><br><span class="line">Assert.hasLength(servletName, <span class="string">"getServletName() must not return empty or null"</span>);</span><br><span class="line"></span><br><span class="line">ApplicationContext applicationContext = createApplicationContext();</span><br><span class="line">Assert.notNull(applicationContext, <span class="string">"createApplicationContext() must not return null."</span>);</span><br><span class="line"></span><br><span class="line">refreshApplicationContext(applicationContext);</span><br><span class="line">registerCloseListener(servletContext, applicationContext);</span><br><span class="line"></span><br><span class="line">HttpHandler httpHandler = WebHttpHandlerBuilder.applicationContext(applicationContext).build();</span><br><span class="line">ServletHttpHandlerAdapter servlet = <span class="keyword">new</span> ServletHttpHandlerAdapter(httpHandler);</span><br><span class="line"></span><br><span class="line">ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, servlet);</span><br><span class="line">Assert.notNull(registration, <span class="string">"Failed to register servlet '"</span> + servletName + <span class="string">"'."</span>);</span><br><span class="line"></span><br><span class="line">registration.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">registration.addMapping(getServletMapping());</span><br><span class="line">registration.setAsyncSupported(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>。。。未完待续</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二叉树遍历的一些经典题目总结</title>
      <link href="/2018/09/16/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2018/09/16/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="需要保留状态的"><a href="#需要保留状态的" class="headerlink" title="需要保留状态的"></a>需要保留状态的</h2><blockquote><p>求出一个二叉树中两个节点的最小值</p></blockquote><p>该题就需要注意可能root节点最底层节点之间的值</p><blockquote><p>将一个树每行打印成一个String，然后存入一个List</p></blockquote><p>该题需要采用BFS，然后配合队列的一些API方法</p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于两道动态规划的思考</title>
      <link href="/2018/09/15/%E5%85%B3%E4%BA%8E%E4%B8%A4%E9%81%93%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2018/09/15/%E5%85%B3%E4%BA%8E%E4%B8%A4%E9%81%93%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>说到动态规划，离不开一个爬楼梯的问题和一个铺砖快的问题。<br>爬楼梯的问题：</p><blockquote><p>一个N层的楼梯，一次可以走一步或者两步，求走到楼梯顶部的所有步数</p></blockquote><p>铺砖快的问题：</p><blockquote><p>一个2*n的地方，需要铺上瓷砖，但是瓷砖的规格只有 2x1 的，求多少种铺法。</p></blockquote><p>计算到顶层的最小问题：</p><blockquote><p>On a staircase, the i-th step has some non-negative cost cost[i] assigned (0 indexed).<br>  Once you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1.</p></blockquote><p>也就是说，可以从0或者1开始选择起点，而且每一步都可以选择走一步还是两步。</p><h2 id="走楼梯"><a href="#走楼梯" class="headerlink" title="走楼梯"></a>走楼梯</h2><p>首先这两道题目都可以使用递归来实现，关于爬楼梯的问题，一般是采用递归实现，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> step 表示从第几步开始走</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 表示有多少层楼梯</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">upLouti</span><span class="params">(<span class="keyword">int</span> step ,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(step == end || step == end -<span class="number">1</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> upLouti(step+<span class="number">1</span>,end) + upLouti(step+<span class="number">2</span>,end);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>那么此题的递归解法就是从0一直求到end，直到结束。</p><h2 id="铺瓷砖"><a href="#铺瓷砖" class="headerlink" title="铺瓷砖"></a>铺瓷砖</h2><p>铺瓷砖也是类似的一个解法，也就是如果第一次是横着铺，那么下面一个肯定也是只能横着铺。如果第一个瓷砖是竖着铺的，那么可以直接进行长度减1，然后再计算。</p><p>第一次铺：<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%93%BA.png" alt=""></p><p>可以看到，如果第一次铺的砖块是竖着铺的话，那么剩余的计算就是<code>n-1</code>。</p><p>如果第一次是横着铺的话，那么其下面的一块砖肯定也是只能横着铺的，所以直接长度减2，计算就是<code>n-2</code><br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%93%BA.png" alt=""></p><p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">puCiZhuan</span><span class="params">(<span class="keyword">int</span> step ,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(step &gt;= end)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(step ==  end -<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(step == end -<span class="number">3</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> puCiZhuan(step+<span class="number">1</span>,end)  + puCiZhuan(step + <span class="number">3</span> ,end);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="最小路径到顶点"><a href="#最小路径到顶点" class="headerlink" title="最小路径到顶点"></a>最小路径到顶点</h2><p>当在解决这个问题的时候，不能和走楼梯有一样的思路了，因为该题不仅仅需要考虑下一步的位置，还需要考虑下下一步的位置。<br>例如<code>0,2,2,1</code>，如果只考虑单步的话，那么它的最优解就是<code>1+2 =3</code> ，但是其实着一道题目的最优解是<code>2+0=2</code> ,所以在这里需要考虑的是如何保存上一次的结果然后进行比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(<span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f1 = <span class="number">0</span>, f2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cost.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> f0 = cost[i] + Math.min(f1, f2);</span><br><span class="line">            f2 = f1;</span><br><span class="line">            f1 = f0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(f1, f2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%8F%98%E5%8C%96%E5%9B%BE.png" alt=""></p><p>所以可以看到在该算法中，其中f2一直保存着上一次的计算结果</p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法，动态规划 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java通过getResourceAsStream()读取不到文件的原因</title>
      <link href="/2018/09/10/Java%E9%80%9A%E8%BF%87getResourceAsStream()%E8%AF%BB%E5%8F%96%E4%B8%8D%E5%88%B0%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
      <url>/2018/09/10/Java%E9%80%9A%E8%BF%87getResourceAsStream()%E8%AF%BB%E5%8F%96%E4%B8%8D%E5%88%B0%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      <content type="html"><![CDATA[<p>首先出现这个原因的时候，需要弄清楚工程目录和编译目录。</p><h2 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h2><p>以IDEA为例，在IDEA里面，我们写代码的地方就是一个工程目录，常见的例如<code>src</code>下面的各种java文件，这种目录就可以称之为一个工程目录，例如如下所示：<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95.png" alt=""></p><p>工程目录主要存放的是一些配置文件或者一些java文件之类的，而经jvm编译之后的目录便是编译目录了</p><h2 id="编译目录"><a href="#编译目录" class="headerlink" title="编译目录"></a>编译目录</h2><p>编译目录主要用于存放java编译后的class文件，也就是我们运行的文件。众所周知，java是一种跨平台语言，所以jvm实际运行的是java变异之后的class文件。<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E7%BC%96%E8%AF%91%E7%9B%AE%E5%BD%95.png" alt=""></p><p>当知道了这个之后便会理解为什么会通过<code>getResourceAsStream()</code>读不到文件了。</p><h2 id="getResourceAsStream"><a href="#getResourceAsStream" class="headerlink" title="getResourceAsStream()"></a>getResourceAsStream()</h2><p>翻开Java的官方文档，可以看到<code>getResourceAsStream()</code>是ClassLoader的一个方法，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> InputStream<span class="title">getSystemResourceAsStream</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">Open <span class="keyword">for</span> reading, a resource of the specified name from the search path used to load classes.</span></span><br></pre></td></tr></table></figure></p><p>那么一般获取Java配置文件的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream inputStream = DemoTest.class.getClassLoader().getResourceAsStream();</span><br></pre></td></tr></table></figure></p><p>这个时候程序运行起来了，那么她就不会去工程目录下寻找配置文件了，例如在如下工程里面运行如下代码：<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%951.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InputStream inputStream = DemoTest.class.getClassLoader().getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        <span class="keyword">if</span> (inputStream == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"获取异常"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"获取到了文件"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">程序打印如下：</span><br><span class="line">获取异常</span><br></pre></td></tr></table></figure></p><p>这个时候就会出现<code>getResourceAsStream</code>获取不到文件了，那么假如将<code>mybatis-config.xml</code>复制到target的目录下面去呢?<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%952.png" alt=""></p><p>再次运行该代码，控制台打印：获取到了文件。</p><p>所以遇到了这个情况的话一般就是工程目录和编译目录缺少文件了。</p><h2 id="如何找到ClassLoader的获取文件目录呢"><a href="#如何找到ClassLoader的获取文件目录呢" class="headerlink" title="如何找到ClassLoader的获取文件目录呢"></a>如何找到ClassLoader的获取文件目录呢</h2><p>只需在<code>Resource</code>类下面debug<code>getResourceAsStream</code>，然后打开loader即可，找出<code>domain</code>属性就可以看到了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">getResourceAsStream</span><span class="params">(ClassLoader loader, String resource)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream in = classLoaderWrapper.getResourceAsStream(resource, loader);</span><br><span class="line">    <span class="keyword">if</span> (in == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Could not find resource "</span> + resource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/mybatis.png" alt=""></p><p>可以看到那个就是一个获取的编译目录。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Mybatis遇到的there is no getter 异常</title>
      <link href="/2018/09/10/%E4%BD%BF%E7%94%A8Mybatis%E9%81%87%E5%88%B0%E7%9A%84there-is-no-getter-%E5%BC%82%E5%B8%B8/"/>
      <url>/2018/09/10/%E4%BD%BF%E7%94%A8Mybatis%E9%81%87%E5%88%B0%E7%9A%84there-is-no-getter-%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<p>在使用mybatis的时候有时候会遇到一个问题就是明明参数是正确的，但是还是会提示<code>There is no getter XXX</code>这个异常，但是一般的解决办法是在mapper里面添加<code>@Param</code>注解来完成是别的，那么为什么会遇到这个问题呢？</p><p>以下为举例代码:</p><blockquote><p>Mapper层代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pro1_Mapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Pro1_Studnet <span class="title">insertStu</span><span class="params">(Pro1_Studnet pro1_studnet)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实体类代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pro1_Studnet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String stuId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String stuClass;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String stuTeacher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStuId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stuId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuId</span><span class="params">(String stuId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stuId = stuId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStuName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stuName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuName</span><span class="params">(String stuName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stuName = stuName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStuClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stuClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuClass</span><span class="params">(String stuClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stuClass = stuClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStuTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stuTeacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuTeacher</span><span class="params">(String stuTeacher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stuTeacher = stuTeacher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Main方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Logger logger = <span class="keyword">null</span>;</span><br><span class="line">        logger = Logger.getLogger(Pro1_Main.class.getName());</span><br><span class="line">        logger.setLevel(Level.DEBUG);</span><br><span class="line">        SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlSession = study.mybatis.MybatisUtil.getSqlSessionFActory().openSession();</span><br><span class="line">            Pro1_Mapper pro1_Mapper = sqlSession.getMapper(Pro1_Mapper.class);</span><br><span class="line">            Pro1_Studnet pro1_studnet =<span class="keyword">new</span> Pro1_Studnet();</span><br><span class="line">            pro1_studnet.setStuName(<span class="string">"张三"</span>);</span><br><span class="line">            Pro1_Studnet pro1_studnet1 =pro1_Mapper.insertStu(pro1_studnet);</span><br><span class="line">            System.out.println(pro1_studnet1.getStuClass());</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>XML文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"study.szh.demo.project1.Pro1_Mapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"study.szh.demo.project1.Pro1_Studnet"</span> <span class="attr">id</span>=<span class="string">"pro1_stu"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuId"</span> <span class="attr">column</span>=<span class="string">"stu_id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuName"</span> <span class="attr">column</span>=<span class="string">"stu_name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuClass"</span> <span class="attr">column</span>=<span class="string">"stu_class"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuTeacher"</span> <span class="attr">column</span>=<span class="string">"stu_teacher"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"insertStu"</span> <span class="attr">parameterType</span>=<span class="string">"study.szh.demo.project1.Pro1_Studnet"</span> <span class="attr">resultMap</span>=<span class="string">"pro1_stu"</span>&gt;</span></span><br><span class="line">        SELECT * from pro_1stu where stu_name =  #&#123;pro1_studnet.stuName&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果执行上述的代码，你会发现mybatis会抛出一个异常：<br><code>There is no getter for property named &#39;pro1_studnet&#39; in &#39;class study.szh.demo.project1.Pro1_Studnet&#39;</code><br>很明显就是说<code>pro1_studnet</code>这个别名没有被mybatis正确的识别，那么将这个<code>pro1_studnet</code>去掉呢?</p><p>尝试将xml文件中的<code>pro1_studnet</code>去掉然后只保留<code>stuName</code>，执行代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br></pre></td></tr></table></figure></p><p>这表明程序运行的十分正常，但是在实际的写法中，还有如果参数为<code>String</code>也会导致抛出getter异常，所以此次正好来分析下</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="mybatis是如何解析mapper参数的"><a href="#mybatis是如何解析mapper参数的" class="headerlink" title="mybatis是如何解析mapper参数的"></a>mybatis是如何解析mapper参数的</h3><p>跟踪源码你会发现在<code>MapperProxy</code>的<code>invoke</code>处会进行入参:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDefaultMethod(method)) &#123;</span><br><span class="line">        <span class="keyword">return</span> invokeDefaultMethod(proxy, method, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> MapperMethod mapperMethod = cachedMapperMethod(method);</span><br><span class="line">    <span class="keyword">return</span> mapperMethod.execute(sqlSession, args);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>注意此处的args，这个参数就是mapper的入参。<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/args%E5%8F%82%E6%95%B0.png" alt=""></p><p>那么mybatis在这里接收到这个参数之后，它会将参数再一次进行传递，此时会进入到<code>MapperMethod</code>的<code>execute</code>方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(SqlSession sqlSession, Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略无关代码</span></span><br><span class="line">      <span class="keyword">case</span> SELECT:</span><br><span class="line">        <span class="keyword">if</span> (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;</span><br><span class="line">          executeWithResultHandler(sqlSession, args);</span><br><span class="line">          result = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMany()) &#123;</span><br><span class="line">          result = executeForMany(sqlSession, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMap()) &#123;</span><br><span class="line">          result = executeForMap(sqlSession, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsCursor()) &#123;</span><br><span class="line">          result = executeForCursor(sqlSession, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">          result = sqlSession.selectOne(command.getName(), param);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> FLUSH:</span><br><span class="line">        result = sqlSession.flushStatements();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Unknown execution method for: "</span> + command.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span> &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Mapper method '"</span> + command.getName() </span><br><span class="line">          + <span class="string">" attempted to return null from a method with a primitive return type ("</span> + method.getReturnType() + <span class="string">")."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>因为在<code>xml</code>文件里面使用的是<code>select</code>标签，所以会进入<code>case</code>的select，然后此时会进入到<code>Object param = method.convertArgsToSqlCommandParam(args);</code> 在这里<code>args</code>还是Stu的实体类，并未发生变化</p><p>随后进入<code>convertArgsToSqlCommandParam</code>方法，然后经过一个方法的跳转，最后会进入到<code>ParamNameResolver</code>的<code>getNamedParams</code>方法，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getNamedParams</span><span class="params">(Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> paramCount = names.size();</span><br><span class="line">    <span class="keyword">if</span> (args == <span class="keyword">null</span> || paramCount == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasParamAnnotation &amp;&amp; paramCount == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> args[names.firstKey()];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> Map&lt;String, Object&gt; param = <span class="keyword">new</span> ParamMap&lt;Object&gt;();</span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : names.entrySet()) &#123;</span><br><span class="line">        param.put(entry.getValue(), args[entry.getKey()]);</span><br><span class="line">        <span class="comment">// add generic param names (param1, param2, ...)</span></span><br><span class="line">        <span class="keyword">final</span> String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// ensure not to overwrite parameter named with @Param</span></span><br><span class="line">        <span class="keyword">if</span> (!names.containsValue(genericParamName)) &#123;</span><br><span class="line">          param.put(genericParamName, args[entry.getKey()]);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> param;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>此时注意<code>hasParamAnnotation</code>这个判断，这个判断表示该参数是否含有标签，有的话在这里会在Map里面添加一个参数，其键就是<code>GENERIC_NAME_PREFIX</code>(param) + i 的值。像在本次的测试代码的话，会直接在<code>return args[names.firstKey()];</code>返回，不过这不是重点，继续往下走，会返回到<code>MapperMethod</code>的<code>execute</code>方法的这一行<code>result = sqlSession.selectOne(command.getName(), param);</code></p><p>此时的param就是一个Stu对象了。<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E5%AF%B9%E8%B1%A1.png" alt=""></p><p>继续走下去…由于mybatis的调用链太多，此处只会写出需要注意的点，可以在自己debug的时候稍微注意下。</p><h5 id="BaseExecutor的createCacheKey的方法"><a href="#BaseExecutor的createCacheKey的方法" class="headerlink" title="BaseExecutor的createCacheKey的方法"></a><code>BaseExecutor</code>的<code>createCacheKey</code>的方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> CacheKey <span class="title">createCacheKey</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Executor was closed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    CacheKey cacheKey = <span class="keyword">new</span> CacheKey();</span><br><span class="line">    cacheKey.update(ms.getId());</span><br><span class="line">    cacheKey.update(rowBounds.getOffset());</span><br><span class="line">    cacheKey.update(rowBounds.getLimit());</span><br><span class="line">    cacheKey.update(boundSql.getSql());</span><br><span class="line">    List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">    TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();</span><br><span class="line">    <span class="comment">// mimic DefaultParameterHandler logic</span></span><br><span class="line">    <span class="keyword">for</span> (ParameterMapping parameterMapping : parameterMappings) &#123;</span><br><span class="line">      <span class="keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;</span><br><span class="line">        Object value;</span><br><span class="line">        String propertyName = parameterMapping.getProperty();</span><br><span class="line">        <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;</span><br><span class="line">          value = boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parameterObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">          value = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class="line">          value = parameterObject;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          MetaObject metaObject = configuration.newMetaObject(parameterObject);</span><br><span class="line">          value = metaObject.getValue(propertyName);</span><br><span class="line">        &#125;</span><br><span class="line">        cacheKey.update(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (configuration.getEnvironment() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// issue #176</span></span><br><span class="line">      cacheKey.update(configuration.getEnvironment().getId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cacheKey;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当进行到这一步的时候，由于mybatis的类太多了，所以这里选择性的跳过，当然重要的代码还是会介绍的。</p><h5 id="DefaultReflectorFactory的findForClass方法"><a href="#DefaultReflectorFactory的findForClass方法" class="headerlink" title="DefaultReflectorFactory的findForClass方法"></a>DefaultReflectorFactory的findForClass方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Reflector <span class="title">findForClass</span><span class="params">(Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (classCacheEnabled) &#123;</span><br><span class="line">            <span class="comment">// synchronized (type) removed see issue #461</span></span><br><span class="line">      Reflector cached = reflectorMap.get(type);</span><br><span class="line">      <span class="keyword">if</span> (cached == <span class="keyword">null</span>) &#123;</span><br><span class="line">        cached = <span class="keyword">new</span> Reflector(type);</span><br><span class="line">        reflectorMap.put(type, cached);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> cached;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Reflector(type);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>注意<code>MetaObject</code>的<code>getValue</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">   PropertyTokenizer prop = <span class="keyword">new</span> PropertyTokenizer(name);</span><br><span class="line">   <span class="keyword">if</span> (prop.hasNext()) &#123;</span><br><span class="line">     MetaObject metaValue = metaObjectForProperty(prop.getIndexedName());</span><br><span class="line">     <span class="keyword">if</span> (metaValue == SystemMetaObject.NULL_META_OBJECT) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> metaValue.getValue(prop.getChildren());</span><br><span class="line">     &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> objectWrapper.get(prop);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>这里的name的值是<code>pro1_stu.stuName</code>,而prop的属性是这样的:<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/prop.png" alt=""><br>这里的<code>hasNext</code>函数会判断这个<code>prop</code>的children是不是为空，如果不是空的话就会进入 get 方法，然后进入到如下的方法通过返回获取get方法。<br>所以当遍历到<code>stuName</code>的时候会直接return，</p><p>然后就需要注意<code>Reflector</code>的<code>getGetInvoker</code>方法，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Invoker <span class="title">getGetInvoker</span><span class="params">(String propertyName)</span> </span>&#123;</span><br><span class="line">    Invoker method = getMethods.get(propertyName);</span><br><span class="line">    <span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ReflectionException(<span class="string">"There is no getter for property named '"</span> + propertyName + <span class="string">"' in '"</span> + type + <span class="string">"'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> method;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>这个<code>propertyName</code>就是<code>pro1_studnet</code>，而<code>getMethods.get(propertyName);</code>就是要通过反射获取<code>pro1_studnet</code>方法，但是很明显，这里是获取不到的，所以此时就会抛出这个异常。</p><h3 id="那么为什么加了-param注解之后就不会抛出异常呢"><a href="#那么为什么加了-param注解之后就不会抛出异常呢" class="headerlink" title="那么为什么加了@param注解之后就不会抛出异常呢"></a>那么为什么加了@param注解之后就不会抛出异常呢</h3><p>此时就需要注意<code>MapWrapper</code>类的<code>get</code>方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(PropertyTokenizer prop)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (prop.getIndex() != <span class="keyword">null</span>) &#123;</span><br><span class="line">     Object collection = resolveCollection(prop, map);</span><br><span class="line">     <span class="keyword">return</span> getCollectionValue(prop, collection);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> map.get(prop.getName());</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>在之前就说过，如果加了注解的话，map的结构是{“param1”,”pro1_studnet”,”pro1_studnet”,XXX对象}，此时由于prop的index是null，所以会直接返回map的键值为<code>pro1_studnet</code>的对象。<br>而在<code>DefaultReflectorFactory</code>的<code>findForClass</code>里面，由于所加载的实体类已经包含了Pro1_Student，随后在<code>metaValue.getValue(prop.getChildren());</code>的将<code>stu_name</code>传入过去，就可以了获取到了属性的值了。</p>]]></content>
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Json的底层实现一览</title>
      <link href="/2018/09/06/Json%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E4%B8%80%E8%A7%88/"/>
      <url>/2018/09/06/Json%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E4%B8%80%E8%A7%88/</url>
      <content type="html"><![CDATA[<p>在开始了解Json的原理之前，首先看一段代码，在这里以阿里的<code>FastJson</code>为例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonRun</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JSONObject jsonObject =<span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">"id"</span>,<span class="string">"a"</span>);</span><br><span class="line">        jsonObject.put(<span class="string">"name"</span>,<span class="string">"b"</span>);</span><br><span class="line">        System.out.println(jsonObject.toJSONString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当看到上述代码的时候，可能一般的程序员都会想到的是输出为如下<code>Json</code>串</p><blockquote><p>{“id”:”a”,”name”:”b”}<br>但是运行这段程序，你会发现控制台打印出来的是如下代码：<br>{“name”:”b”,”id”:”a”}</p></blockquote><p>那么为什么会出现这种情况呢，翻开<code>FastJson</code>的源码便知道了，首先定位到 JsonObject 这个类的构造函数，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JSONObject</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">boolean</span> ordered)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ordered) &#123;</span><br><span class="line">            map = <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;(initialCapacity);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里的 <code>ordered</code> 为一个构造参数，表示的是是否按照顺序添加，此处先不管，然后可以发现在阿里的FastJson中，其实默认的Json实现是一个Map，那么对于LinkedHashMap来讲，它是一个map和双向链表的整合体，所以在LinkedList中，每一个Node都会有一个前指针和一个后指针</p><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><p>LinkedHashMap 是一个HashMap的变种，大家都知道，一个HashMap是由一个桶和一个桶后面的节点组成的，而桶其实是一个数组，每一个桶的索引所对应的值都是由<code>Hash()</code>函数计算得出的。那么这样就会导致桶的元素是一个乱序的存储的，例如在本段代码中的<code>id</code>和<code>name</code>，它们所在的桶索引可能是:<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/TIM%E6%88%AA%E5%9B%BE20180909203451.png" alt=""></p><p>这样就导致了一个问题，就是Json的键的顺序是无法保证的，那么既然HashMap是无法保证的，为什么LinkedHashMap却可以保证顺序。</p><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>翻开LinkedHashMap的源码可以发现，在其节点类里面，LinkedHashMap在 HashMap的Entry基础上又添加了一个<code>before</code>和<code>after</code>指针，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">      Entry&lt;K,V&gt; before, after;</span><br><span class="line">      Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">          <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>那么这两个指针就是双向链表的指针。有了这两个指针之后，每一个新插入的节点都会知道他的前驱结点和后置节点，那么对于LinkedHashMap的插入顺序就会有保证了。所以其对应的数据结构如图：<br><img src="https://szhtc-1252780558.cos.ap-shanghai.myqcloud.com/%E9%93%BE%E8%A1%A8%E4%B9%8B%E5%90%8E.png" alt=""></p><p>在这个结构里面，桶索引是<code>id</code>的第一个节点是一个头节点，在新插入<code>name</code>的时候，LinkedHashMap会将head节点的<code>after</code>指针指向name，所以虽然这是一个HashMap，但是它的顺序还是可以保证的。</p><h2 id="LinkedHashMap的迭代"><a href="#LinkedHashMap的迭代" class="headerlink" title="LinkedHashMap的迭代"></a>LinkedHashMap的迭代</h2><p>区别于HashMap以索引的方式进行迭代，<code>LinkedHashMap</code>是以链表的指针进行迭代的，如以下代码所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashIterator</span> </span>&#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; next;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; current;</span><br><span class="line">        <span class="keyword">int</span> expectedModCount;</span><br><span class="line"></span><br><span class="line">        LinkedHashIterator() &#123;</span><br><span class="line">            next = head;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">            current = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> LinkedHashMap.<span class="function">Entry&lt;K,V&gt; <span class="title">nextNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            LinkedHashMap.Entry&lt;K,V&gt; e = next;  <span class="comment">//next就是head节点</span></span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            current = e;</span><br><span class="line">            next = e.after; <span class="comment">//此处每一次的迭代都是链表的after</span></span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>可以看到在每一次迭代的时候LinkedHashMap都是以链表的next节点作为下一个迭代，那么HashMap呢？</p><h2 id="HashMap的迭代"><a href="#HashMap的迭代" class="headerlink" title="HashMap的迭代"></a>HashMap的迭代</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; next;        <span class="comment">// next entry to return</span></span><br><span class="line">        Node&lt;K,V&gt; current;     <span class="comment">// current entry</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount;  <span class="comment">// for fast-fail</span></span><br><span class="line">        <span class="keyword">int</span> index;             <span class="comment">// current slot</span></span><br><span class="line"></span><br><span class="line">HashIterator() &#123;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">            Node&lt;K,V&gt;[] t = table;</span><br><span class="line">            current = next = <span class="keyword">null</span>;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></span><br><span class="line">                <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">nextNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            Node&lt;K,V&gt; e = next;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">if</span> ((next = (current = e).next) == <span class="keyword">null</span> &amp;&amp; (t = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>注意这一段代码</p><blockquote><p> if (t != null &amp;&amp; size &gt; 0) { // advance to first entry<br>                do {} while (index &lt; t.length &amp;&amp; (next = t[index++]) == null);<br>    }</p></blockquote><p>这一段代码的作用是找出<code>table[]</code>中第一个不为null的桶，所以其实HashMap的迭代就是依据桶中的顺序来的，但是LinkedHashMap则是按找链表的顺序来的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实每一个java的设计都是很精妙的…</p>]]></content>
      
      <categories>
          
          <category> Json </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>将Jackson替换成Fastjosn</title>
      <link href="/2018/09/04/%E5%B0%86Jackson%E6%9B%BF%E6%8D%A2%E6%88%90Fastjosn/"/>
      <url>/2018/09/04/%E5%B0%86Jackson%E6%9B%BF%E6%8D%A2%E6%88%90Fastjosn/</url>
      <content type="html"><![CDATA[<p>记得有一次的面试是。如何在Spring中将<code>JackSon</code> 替换为 <code>FastJson</code>，emmmm…当时的回答是只需要替换 pom.xml，然后在使用的时候引入FastJosn就行了，但是在当时显然没有理解到面试官的意图，既然面试官强调的是如何替换，那么修改<code>pom.xml</code>很显然不是面试官所想要的答案，那还有什么答案呢？</p><p>有一个方法可能是面试官想要的，那就是重写Spring的<code>HttpMesageConverter</code>方法，在这个方法里面引入<code>FastJson</code>的配置，然后替换掉Spring默认的<code>Jackson</code>。</p><p>替换方式有几种，一种是返回一个<code>HttpMesageConverter</code>，另一种是继承<code>WebMvcConfigurerAdapter</code> 来实现 <code>configureMessageConverters</code></p><h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">        fastJsonConfig.setSerializerFeatures(</span><br><span class="line">                <span class="comment">// 输出空置字段</span></span><br><span class="line">                SerializerFeature.WriteMapNullValue,</span><br><span class="line">                <span class="comment">// list字段如果为null，输出为[]，而不是null</span></span><br><span class="line">                SerializerFeature.WriteNullListAsEmpty,</span><br><span class="line">                <span class="comment">// 数值字段如果为null，输出为0，而不是null</span></span><br><span class="line">                SerializerFeature.WriteNullNumberAsZero,</span><br><span class="line">                <span class="comment">// Boolean字段如果为null，输出为false，而不是null</span></span><br><span class="line">                SerializerFeature.WriteNullBooleanAsFalse,</span><br><span class="line">                <span class="comment">// 字符类型字段如果为null，输出为""，而不是null</span></span><br><span class="line">                SerializerFeature.WriteNullStringAsEmpty);</span><br><span class="line"></span><br><span class="line">        fastJsonConfig.setCharset(Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">        fastJsonConfig.setDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">        FastJsonHttpMessageConverter Converter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line">        Converter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">        HttpMessageConverter&lt;?&gt; converter = Converter;</span><br><span class="line">        converters.add(<span class="number">0</span>,converter);</span><br><span class="line">        <span class="keyword">super</span>.configureMessageConverters(converters);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Controller类"><a href="#Controller类" class="headerlink" title="Controller类"></a>Controller类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testjson"</span>)</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> TestJson <span class="title">forword</span><span class="params">(@RequestBody TestJson testJson)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       System.out.println(testJson.getId());</span><br><span class="line">       System.out.println(testJson.getName());</span><br><span class="line">       System.out.println(testJson.isFlag());</span><br><span class="line">       <span class="keyword">return</span> testJson;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>打印结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line"><span class="string">"name"</span>:<span class="keyword">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//控制台输出</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"flag"</span>: <span class="keyword">false</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以可以看到默认的Jackson已经被替换为Fastjson了</p><p>为了区别与Jackson的差异，在这里注释掉Jackson的config，然后再次请求，结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"flag"</span>: <span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到String为null的话，并没有被替换为””</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux上安装rabbitmq遇到的一些问题</title>
      <link href="/2018/08/29/Linux%E4%B8%8A%E5%AE%89%E8%A3%85rabbitmq%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2018/08/29/Linux%E4%B8%8A%E5%AE%89%E8%A3%85rabbitmq%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="在安装elixir的时候erlang，安装了错误的包"><a href="#在安装elixir的时候erlang，安装了错误的包" class="headerlink" title="在安装elixir的时候erlang，安装了错误的包"></a>在安装elixir的时候erlang，安装了错误的包</h1><p>错误记录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;init terminating in do_boot&quot;,&#123;&apos;cannot get bootfile&apos;,&apos;no_dot_erlang.boot&apos;&#125;&#125;</span><br><span class="line">init terminating in do_boot (&#123;cannot get bootfile,no_dot_erlang.boot&#125;)</span><br></pre></td></tr></table></figure></p><p>此时的错误是在安装erlang的时候安装了错误的erlang，正确的需要安装的是<code>esl-erlang</code>，详情如下：</p><blockquote><p>The “esl-erlang” package is a file containg the complete installation: it includes the Erlang/OTP platform and all of its    applications. The “erlang” package is a frontend to a number of smaller packages. Currently we support both “erlang” and “esl-erlang”. Note that the split packages have multiple advantages:<br>seamless replacement of the available packages,<br>other packages have dependencies on “erlang”, not “esl-erlang”,<br>if your disk-space is low, you can get rid of some unused parts; “erlang-base” needs only ~13MB of space.</p></blockquote><p>也就是说相较于<code>erlang</code>，<code>esl-erlang</code>的安装包是包含了所有的组件的。</p><h1 id="rabbitmq和erlang的cookies不一致，导致启动不了"><a href="#rabbitmq和erlang的cookies不一致，导致启动不了" class="headerlink" title="rabbitmq和erlang的cookies不一致，导致启动不了"></a>rabbitmq和erlang的cookies不一致，导致启动不了</h1><p>启动的日志如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">attempted to contact: [rabbit<span class="meta">@izm</span>5e0h94dt7do1kplgd15z]</span><br><span class="line"></span><br><span class="line">rabbit<span class="meta">@izm</span>5e0h94dt7do1kplgd15z:</span><br><span class="line">  * <span class="function">connected to <span class="title">epmd</span> <span class="params">(port <span class="number">4369</span>)</span> on izm5e0h94dt7do1kplgd15z</span></span><br><span class="line"><span class="function">  * epmd reports node 'rabbit' running on port 25672</span></span><br><span class="line"><span class="function">  * TCP connection succeeded but Erlang distribution failed</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  * Authentication <span class="title">failed</span> <span class="params">(rejected by the remote node)</span>, please check the Erlang cookie</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  current node details:</span></span><br><span class="line"><span class="function">  - node name: 'rabbitmq-cli-56@izm5e0h94dt7do1kplgd15z'</span></span><br><span class="line"><span class="function">  - home dir: /root</span></span><br><span class="line"><span class="function">  - cookie hash: ajtINcxQAbART7QakzjkSg</span>==</span><br></pre></td></tr></table></figure></p><p>在搜索中发现了两个链接：<a href="https://stackoverflow.com/questions/47893899/authentication-failed-rejected-by-the-remote-node-please-check-the-erlang-coo?rq=1" target="_blank" rel="noopener">StackOverFlow</a><br>、<a href="http://www.rabbitmq.com/cli.html" target="_blank" rel="noopener">Rabbitmq官方文档</a></p><p>其中在官网中看到了介绍：</p><blockquote><p>Linux, MacOS, *BSD<br>On UNIX systems, the cookie will be typically located in /var/lib/rabbitmq/.erlang.cookie (used by the server) and $HOME/.erlang.cookie (used by CLI tools). Note that since the value of $HOME varies from user to user, it’s necessary to place a copy of the cookie file for each user that will be using the CLI tools. This applies to both non-privileged users and root.</p></blockquote><p>也就是说在Linux上，默认的cookies是在 <code>/var/lib/rabbitmq/.erlang.cookie</code>， 但是该rabbitmq的home目录是<code>root</code>，所以需要将默认路径的cookies替换到home目录下。替换之后即可。</p><h1 id="关于Rabbitmq的web界面启动不了"><a href="#关于Rabbitmq的web界面启动不了" class="headerlink" title="关于Rabbitmq的web界面启动不了"></a>关于Rabbitmq的web界面启动不了</h1><p>提示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Plugin configuration unchanged.</span><br><span class="line"></span><br><span class="line">Applying plugin configuration to rabbit@izm5e0h94dt7do1kplgd15z... failed.</span><br></pre></td></tr></table></figure></p><p>发现只要重启下rabbitmq就好了。。。</p><h1 id="另外就是erlang的版本最好在20，在21貌似会出问题，当然针对rabbit3-6-15版本"><a href="#另外就是erlang的版本最好在20，在21貌似会出问题，当然针对rabbit3-6-15版本" class="headerlink" title="另外就是erlang的版本最好在20，在21貌似会出问题，当然针对rabbit3.6.15版本"></a>另外就是erlang的版本最好在20，在21貌似会出问题，当然针对rabbit3.6.15版本</h1>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redis读取yml配置的问题</title>
      <link href="/2018/08/27/redis%E8%AF%BB%E5%8F%96yml%E9%85%8D%E7%BD%AE%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/08/27/redis%E8%AF%BB%E5%8F%96yml%E9%85%8D%E7%BD%AE%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>字符串数组组成最小的数字</title>
      <link href="/2018/08/25/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E7%BB%84%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>/2018/08/25/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E7%BB%84%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<h1 id="字符串数组拼接出一个最小的数字"><a href="#字符串数组拼接出一个最小的数字" class="headerlink" title="字符串数组拼接出一个最小的数字"></a>字符串数组拼接出一个最小的数字</h1><p>记得在之前的一个面试中遇到了这个算法题， 但是当时没怎么想好如何判断两个字符串之间的大小，比如 <code>23</code> 和 <code>223</code> 之间，其组合起来绝对是 <code>23</code> 大于 <code>223</code>，所以 <code>223</code>是需要放在前面的。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>其实可以将两个字符串相加，例如 22323 &lt; 23223 ，所以 <code>223</code> 是需要放在 <code>23</code> 前面的，下面就是代码.</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getNum</span><span class="params">(String[] str)</span></span>&#123;</span><br><span class="line">       sortString(str,<span class="number">0</span>,str.length-<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortString</span><span class="params">(String[] strArray ,<span class="keyword">int</span> start ,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(end &gt; strArray.length -<span class="number">1</span> || end &lt;<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(start &lt;<span class="number">0</span> || start &gt; strArray.length -<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(start == end )&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> mid =(start + end) / <span class="number">2</span>;</span><br><span class="line">       <span class="keyword">while</span> (start &lt; end &amp;&amp; start &lt;mid &amp;&amp; end &gt;mid)&#123;</span><br><span class="line">           String s1 =strArray[start] +strArray[mid];</span><br><span class="line">           String s2 =strArray[mid] +strArray[start];</span><br><span class="line">           String s3 =strArray[mid] +strArray[end];</span><br><span class="line">           String s4 =strArray[end] +strArray[mid];</span><br><span class="line">           <span class="keyword">if</span>(Integer.parseInt(s1) &lt; Integer.parseInt(s2))&#123;</span><br><span class="line">               start++;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(Integer.parseInt(s3) &lt; Integer.parseInt(s4))&#123;</span><br><span class="line">               end--;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       String temp =strArray[start];</span><br><span class="line">       strArray[start] = strArray[end];</span><br><span class="line">       strArray[end] =temp;</span><br><span class="line">       sortString(strArray,start,mid );</span><br><span class="line">       sortString(strArray,mid-<span class="number">1</span>,end );</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       String[] s =<span class="keyword">new</span> String[]&#123;<span class="string">"32"</span>,<span class="string">"321"</span>,<span class="string">"3"</span>&#125;;</span><br><span class="line">       <span class="keyword">new</span> GetSmallSum().getNum(s);</span><br><span class="line">       StringBuffer stringBuffer =<span class="keyword">new</span> StringBuffer();</span><br><span class="line">       <span class="keyword">for</span>(String s1 :s)&#123;</span><br><span class="line">           stringBuffer.append(s1);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(Integer.parseInt(stringBuffer.toString()));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于Leetcode上判断位数的解法</title>
      <link href="/2018/08/17/%E5%85%B3%E4%BA%8ELeetcode%E4%B8%8A%E5%88%A4%E6%96%AD%E4%BD%8D%E6%95%B0%E7%9A%84%E8%A7%A3%E6%B3%95/"/>
      <url>/2018/08/17/%E5%85%B3%E4%BA%8ELeetcode%E4%B8%8A%E5%88%A4%E6%96%AD%E4%BD%8D%E6%95%B0%E7%9A%84%E8%A7%A3%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>在Leetcode上有一道算法题目判断最后一位是不是一位的，题目的意思是当在一个数组中如果存在<code>10</code>或者<code>00</code>，那么这个就是一个连续的。这个数组的最后一位永远都是<code>0</code>。</p><blockquote><p>We have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).<br>Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.</p></blockquote><h1 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h1><p>刚开始错误的理解题目的意思了，导致一直在纠结数组的最后两位和三位，后来看了答案之后觉得自己的思路没有想到电子上，所以在此记录一下。</p><h2 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h2><p>这一题有一个明显的规律，也就是当 bits[i] 为 1 的时候，那么他就可以不管后面的一位，可以直接后移两位来判断。当 bits[i] 为 0 的时候，那么他就只能是向后移动一位了。所以算法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">int</span> len =<span class="number">0</span>  &amp;&amp; len&lt; bits.length)&#123;</span><br><span class="line">    len += bits[len] +<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(len == bits.length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h2><p>从后遍历，找出第一个为 0 的，如果第一个为0的是数组的倒数第二位的话，那么就是 true<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len =bits.length-<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(len &gt;<span class="number">0</span> &amp;&amp; bits[len] &gt;<span class="number">0</span> )&#123;</span><br><span class="line">    len --;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(len == bits.length -<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上便是这两种解法了，只不过当时还未想到。</p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>对数据库事物的理解</title>
      <link href="/2018/08/10/%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E7%89%A9%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2018/08/10/%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E7%89%A9%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="什么是事物"><a href="#什么是事物" class="headerlink" title="什么是事物"></a>什么是事物</h1><p>事物通俗的来讲就是就是一组操作事件，可以类比于Java里面的原子操作。在一个事物中，要么全部成功，要么就是全部失败。</p><h1 id="mysql中的事物"><a href="#mysql中的事物" class="headerlink" title="mysql中的事物"></a>mysql中的事物</h1><p>在Mysql的<code>innodb</code>中，事物的默认级别是 <code>可重复读</code>，在该级别下，事物可能出现幻读。出现幻读的情况是该引擎为行级锁，导致mysql在进行一个事物的时候只会锁定与该事物有关的几行。</p><h2 id="示例如下："><a href="#示例如下：" class="headerlink" title="示例如下："></a>示例如下：</h2><p>新建一个表，其中的数据如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from curd;</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  3 | 4    |</span><br><span class="line">|  4 | 3    |</span><br><span class="line">|  5 | 2    |</span><br><span class="line">|  6 | 1    |</span><br><span class="line">+----+------+</span><br></pre></td></tr></table></figure></p><p>开启一个事物：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> curd;</span><br><span class="line"><span class="keyword">UPDATE</span> curd <span class="keyword">SET</span> curd.name=<span class="string">'1000'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> curd;</span><br><span class="line"><span class="comment">-- SELECT * FROM curd;</span></span><br><span class="line"><span class="comment">-- COMMIT;</span></span><br></pre></td></tr></table></figure></p><p>此时两次查询的结果为：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; START TRANSACTION;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM curd;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| id | name |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  3 | 4    |</span><br><span class="line">|  4 | 3    |</span><br><span class="line">|  5 | 2    |</span><br><span class="line">|  6 | 1    |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">UPDATE</span> curd <span class="keyword">SET</span> curd.name=<span class="string">'1000'</span>;</span><br><span class="line">Query OK, 4 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 4  Changed: 4  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM curd;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| id | name |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  3 | 1000 |</span><br><span class="line">|  4 | 1000 |</span><br><span class="line">|  5 | 1000 |</span><br><span class="line">|  6 | 1000 |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>此时可以看到，在事物一未提交之前，事物一做了一个全表的更新，将该表的数值全部更新为1000了。<br>然后开启 <strong>事物二</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; START TRANSACTION;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM curd;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| id | name |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  3 | 4    |</span><br><span class="line">|  4 | 3    |</span><br><span class="line">|  5 | 2    |</span><br><span class="line">|  6 | 1    |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> curd(curd.id,curd.name) <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="string">'7'</span>);</span><br><span class="line">ERROR 1205 (HY000): <span class="keyword">Lock</span> <span class="keyword">wait</span> <span class="keyword">timeout</span> exceeded; try restarting transaction</span><br><span class="line"><span class="comment">-- 注意使用win10的管理员cmd会卡在这一行，但是使用sqlyog就不会，mysql会卡在这一行</span></span><br></pre></td></tr></table></figure></p><p>当事物二执行完这一句之后，回到事物一，然后查询表数据。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用Sqlyog新增之后看到的数据</span></span><br><span class="line">mysql&gt; SELECT * FROM curd;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| id | name |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  3 | 1000 |</span><br><span class="line">|  4 | 1000 |</span><br><span class="line">|  5 | 1000 |</span><br><span class="line">|  6 | 1000 |</span><br><span class="line">|  7 | 7    |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>此时就是<code>幻读</code>，事物一明明就更新了6条数据，为什么会出现7条数据。。<br>然后事物一提交：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; commit;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure></p><p>此时数据库中的数据已经全部更新成1000，但是在事物二中：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM curd;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| id | name |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  3 | 4    |</span><br><span class="line">|  4 | 3    |</span><br><span class="line">|  5 | 2    |</span><br><span class="line">|  6 | 1    |</span><br><span class="line">|  7 | 7    |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>说明两个事物之间不能读取其他事物未提交的更改，并且在mysql的该级别下，事物开始和结束的时候所读取的数据是一样的。</p><p>此时提交事物二：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; commit;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM curd;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| id | name |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  3 | 1000 |</span><br><span class="line">|  4 | 1000 |</span><br><span class="line">|  5 | 1000 |</span><br><span class="line">|  6 | 1000 |</span><br><span class="line">|  7 | 7    |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>可以看到此时数据库中的数据已经如成为了上面所示了。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>具体是因为mysql的innodb使用的是<code>行级锁</code>，而且在mysql的每一个表里面都会有两个隐藏的列，分别是创建的时候版本号和删除的时候的版本号。<br>所以每一个事物执行的时候的版本号都会被该事物号所更新，因此会导致有的事物在执行期间会导致看到不同的数据。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>现在mysql5.7貌似已经解决了幻读。。用命令行进行测试的。</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Rabbitmq和Springboot一起使用的问题</title>
      <link href="/2018/08/04/Rabbitmq%E5%92%8CSpringboot%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/08/04/Rabbitmq%E5%92%8CSpringboot%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>刚刚准备在Springboot中使用rabbitmq来实现日志的收集，在使用中出现了一些问题，所以在此记录下。</p><h2 id="消费者接收不到消息"><a href="#消费者接收不到消息" class="headerlink" title="消费者接收不到消息"></a>消费者接收不到消息</h2><p>这个问题出现的问题，一个是没有建立一个交换机，导致生产者在推送消息的时候使用的API是<code>this.amqpTemplate.convertAndSend(contet);</code>,直接将内容推出去，</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Leetcode求二叉树的节点最小绝对值</title>
      <link href="/2018/07/25/Leetcode%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%80%BC/"/>
      <url>/2018/07/25/Leetcode%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%80%BC/</url>
      <content type="html"><![CDATA[<h1 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a>二叉树的中序遍历</h1><p>题目如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span></span><br><span class="line">    \</span><br><span class="line">     <span class="number">3</span></span><br><span class="line">    /</span><br><span class="line">   <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The minimum absolute difference is <span class="number">1</span>, which is the difference between <span class="number">2</span> and <span class="number">1</span> (or between <span class="number">2</span> and <span class="number">3</span>).</span><br></pre></td></tr></table></figure></p><p>意思就是需要求出一个二叉树中绝对值最小的值。</p><p>刚开始的第一个想法就是递归，然后比较当前节点和其左右两个节点的值，但是发现有一个缺陷就是如果一个根节点是3，其左节点是10，10的右节点是4，那么最小的值便是1，然后通过递归只能是 10-3，10-4 。所以当时就放弃了</p><h2 id="中序递归"><a href="#中序递归" class="headerlink" title="中序递归"></a>中序递归</h2><p>后来又想到了中序递归便是这种遍历顺序，也就是通过中序遍历的方式便可以正确的得出结果了。但是一直想不出这种情况如何进行中序操作，但是在讨论区发现了一个解法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> minDiff = Integer.MAX_VALUE;</span><br><span class="line">TreeNode prev;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinimum</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">     inorder(root);</span><br><span class="line">     <span class="keyword">return</span> minDiff;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">     inorder(root.left);</span><br><span class="line">     <span class="keyword">if</span> (prev != <span class="keyword">null</span>) minDiff = Math.min(minDiff, root.val - prev.val);</span><br><span class="line">     prev = root;</span><br><span class="line">     inorder(root.right);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>后来发现这个 prev 才是这个中序遍历的关键，当一个节点的左节点遍历完之后，保存该节点为 Prev 然后与下一个节点进行比较。</p><p><img src="流程图.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leetcode上一道求出数组前三大的数字</title>
      <link href="/2018/07/25/leetcode%E4%B8%8A%E4%B8%80%E9%81%93%E6%B1%82%E5%87%BA%E6%95%B0%E7%BB%84%E5%89%8D%E4%B8%89%E5%A4%A7%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>/2018/07/25/leetcode%E4%B8%8A%E4%B8%80%E9%81%93%E6%B1%82%E5%87%BA%E6%95%B0%E7%BB%84%E5%89%8D%E4%B8%89%E5%A4%A7%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<p>题目如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Given scores of N athletes, find their relative ranks and the people with the top three highest scores, who will be awarded medals: &quot;Gold Medal&quot;, &quot;Silver Medal&quot; and &quot;Bronze Medal&quot;.</span><br><span class="line"></span><br><span class="line">Input: [5, 4, 3, 2, 1]</span><br><span class="line">Output: [&quot;Gold Medal&quot;, &quot;Silver Medal&quot;, &quot;Bronze Medal&quot;, &quot;4&quot;, &quot;5&quot;]</span><br><span class="line">Explanation: The first three athletes got the top three highest scores, so they got &quot;Gold Medal&quot;, &quot;Silver Medal&quot; and &quot;Bronze Medal&quot;. </span><br><span class="line">For the left two athletes, you just need to output their relative ranks according to their scores.</span><br></pre></td></tr></table></figure></p><p>也就是一个乱序的数组，然后将数组中的前三大的数组换成指定的字符串。其中有一个解法是比较有新意的，其思路如下：</p><p>另外再开辟一个数组，然后数组的长度是原数组中数字最大的那个值，那么在进行遍历的时候，新建的数组中最后三位肯定是最大的，然后依次将其原索引找出来即可。</p><p>具体的代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] findRelativeRanks(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">       String[] s =<span class="keyword">new</span> String[nums.length];</span><br><span class="line">       <span class="keyword">int</span> max =<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">           <span class="keyword">if</span>(i&gt; max)&#123;</span><br><span class="line">               max= i;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span>[] index =<span class="keyword">new</span> <span class="keyword">int</span>[max+<span class="number">1</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt; nums.length ;i++)&#123;</span><br><span class="line">           index[nums[i]] =i+<span class="number">1</span>;  <span class="comment">//在这里加一是因为如果不加一那么第一个索引的数组之在index里面会是0，不好区分。</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> place=<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i =index.length-<span class="number">1</span> ;i&gt;=<span class="number">0</span> ;i--)&#123;</span><br><span class="line">           <span class="keyword">if</span>(index[i] !=<span class="number">0</span> )&#123;</span><br><span class="line">               <span class="keyword">if</span>(place ==<span class="number">1</span> )&#123;</span><br><span class="line">                   s[index[i] -<span class="number">1</span>]=<span class="string">"Gold Medal"</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span> <span class="keyword">if</span>(place ==<span class="number">2</span>)&#123;</span><br><span class="line">                   s[index[i] -<span class="number">1</span>]=<span class="string">"Silver Medal"</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span> <span class="keyword">if</span>(place ==<span class="number">3</span>)&#123;</span><br><span class="line">                   s[index[i] -<span class="number">1</span>]=<span class="string">"Bronze Medal"</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   s[index[i] -<span class="number">1</span>]=String.valueOf(place);</span><br><span class="line">               &#125;</span><br><span class="line">               place++;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> s;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>maven和json以及spring的一些问题</title>
      <link href="/2018/07/18/maven%E5%92%8Cjson%E4%BB%A5%E5%8F%8Aspring%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2018/07/18/maven%E5%92%8Cjson%E4%BB%A5%E5%8F%8Aspring%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="maven和IDEA的一个问题"><a href="#maven和IDEA的一个问题" class="headerlink" title="maven和IDEA的一个问题"></a>maven和IDEA的一个问题</h2><p>在 IDEA 中可以正常使用maven的一些命令来进行 clean 和 complime ，但是在使用IDEA的build功能时一直提示某些包找不到，解决办法：<br>执行 <code>mvn clean</code> 命令清除缓存，然后删除 <code>.idea</code> 这个文件夹中的文件</p><p>如果还是解决不了则可以直接换一个 maven ，最好的解决办法则是每一个项目，一个 maven。</p><h2 id="阿里的Json包和对象之间的转换"><a href="#阿里的Json包和对象之间的转换" class="headerlink" title="阿里的Json包和对象之间的转换"></a>阿里的Json包和对象之间的转换</h2><p>今天有一个新的需求是将一个 Json 字符串转换成一个Json对象，此时可以调用<br><code>JSON.parseObject( new TypeReference(XXX),json串)</code>来讲一个 Json 字符串转为一个对象</p><h2 id="spring中读取配置文件相关的问题"><a href="#spring中读取配置文件相关的问题" class="headerlink" title="spring中读取配置文件相关的问题"></a>spring中读取配置文件相关的问题</h2><p>在 spring 中可以通过 <code>@Value</code> 这个注解来获取到配置文件中的一些配置，但是记住….不要再使用 <code>new</code> 关键字来再初始化</p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>maven下载快照的问题</title>
      <link href="/2018/07/17/maven%E4%B8%8B%E8%BD%BD%E5%BF%AB%E7%85%A7%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/07/17/maven%E4%B8%8B%E8%BD%BD%E5%BF%AB%E7%85%A7%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>今天在使用maven下载一个快照文件的时候，只在 settings.xml 文件中配置了镜像源，并没有配置 release 版本和 snapshoot 版本,所以就导致了在下载快照文件的时候一直出现问题：<br><code>Missing artifact</code> 大意就是说找不到这个jar的pom文件啥的，然后看了下本地的仓库，也并没有看到下载的文件夹。</p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>在 <code>pom.xml</code> 中设置快照的下载地址，配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>仓库的ID<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--         &lt;name&gt;Spring Milestones&lt;/name&gt;  --&gt;</span> 如果没有可以忽略</span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  快照仓库的URL</span><br><span class="line">      <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>  打开镜像</span><br><span class="line">      <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最后解决了，如果为了方便，其实可以在 settings.xml 中直接配置，以减少后期多个pom.xml配置的麻烦</p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Leetcode上两道比较好的BFS和DFS题目</title>
      <link href="/2018/06/14/Leetcode%E4%B8%8A%E4%B8%A4%E9%81%93%E6%AF%94%E8%BE%83%E5%A5%BD%E7%9A%84BFS%E5%92%8CDFS%E9%A2%98%E7%9B%AE/"/>
      <url>/2018/06/14/Leetcode%E4%B8%8A%E4%B8%A4%E9%81%93%E6%AF%94%E8%BE%83%E5%A5%BD%E7%9A%84BFS%E5%92%8CDFS%E9%A2%98%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>首先是Leetcode上两道比较好的一个题目，分别如下：</p><ul><li><code>https://leetcode.com/problems/letter-case-permutation/description/</code> Letter Case Permutation</li><li><code>https://leetcode.com/problems/max-area-of-island/description/</code> Max Area of Island</li></ul><p>关于字符串的那一题便是将一个字符串里面的任意一个字符进行大小写的变换，此题有两种解法，一种是 BFS 按照字符窜中的字符遍历，将其变成大小写，然后存入栈中，最后便每一次向后迭代，然后再存入即可。另一种则是 DFS ，通过一种不断递归的方式来进行大小写的变换的，和爬楼梯的那个算法极其类似</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串的BFS"><a href="#字符串的BFS" class="headerlink" title="字符串的BFS"></a>字符串的BFS</h2><p>伪代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Stack &lt;- stack;</span><br><span class="line"><span class="keyword">for</span> i -&gt; S.length()&#123;</span><br><span class="line">    <span class="keyword">if</span>(i is <span class="keyword">char</span>)&#123;</span><br><span class="line">        stack.pop() -&gt; y;</span><br><span class="line">        y[i] &lt;- Upper</span><br><span class="line">        stack.push(y[i]);</span><br><span class="line">        y[i] &lt;- Lower</span><br><span class="line">        stack.push(y[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这个代码的写法中，采取的是广度有限遍历，即在一个平面上展开，而不是深入到这个字符的</p><h2 id="字符串的DFS"><a href="#字符串的DFS" class="headerlink" title="字符串的DFS"></a>字符串的DFS</h2><p>伪代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List &lt;- list ;</span><br><span class="line"><span class="keyword">char</span>[] c &lt;- S.toCharArray();</span><br><span class="line"><span class="function">fun <span class="title">change</span><span class="params">(list,index)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>( index = S.length())&#123;</span><br><span class="line">    list.add(S);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c[index] is not <span class="keyword">char</span>)&#123;</span><br><span class="line">    change(list,index+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span>[] temp &lt;- S.toCharArray();</span><br><span class="line">temp[index] &lt;- UpperCase;</span><br><span class="line">change(list,index+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">temp[index] &lt;- Lower;</span><br><span class="line">change(list,index+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="关于这两个算法的差异"><a href="#关于这两个算法的差异" class="headerlink" title="关于这两个算法的差异"></a>关于这两个算法的差异</h2><p>一个是从广度借助额外的存储空间来进行大小写的变换，而另一个则是通过递归将这个字符串从尾到头的进行大小写的变化。</p><h1 id="最大岛屿面积的DFS"><a href="#最大岛屿面积的DFS" class="headerlink" title="最大岛屿面积的DFS"></a>最大岛屿面积的DFS</h1><p>题意就是从给定的二维数组中找出数字为 1 的，并且要求它们之间不能有间隙，所以这一题是比较适合 DFS 的解法，其类似于上楼梯的那一道题目，上楼梯就是一个递归，把每一次的步数罗列出来。</p><h2 id="面积题目的DFS"><a href="#面积题目的DFS" class="headerlink" title="面积题目的DFS"></a>面积题目的DFS</h2><p>伪代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span>[][] &lt;- x</span><br><span class="line"><span class="function">fun <span class="title">getMaxArea</span><span class="params">(<span class="keyword">int</span>[][] a, x,<span class="keyword">int</span> xIndex, <span class="keyword">int</span> yIndex )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( xIndex &lt; <span class="number">0</span> ,yINdex&lt;<span class="number">0</span> , xINdex&lt;a.length, yINdex&lt;a[<span class="number">0</span>].length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x &lt;- <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">1</span> + getMaxArea(a,x,xIndex+<span class="number">1</span>,yIndex)+getMaxArea(a,x,xIndex,yIndex+<span class="number">1</span>) + getMaxArea(a,x,xIndex-<span class="number">1</span>,yIndex) getMaxArea(a,x,xIndex,yIndex-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringCloud配置中心的使用</title>
      <link href="/2018/06/11/SpringCloud%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/06/11/SpringCloud%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>在实际的开发过程中，很可能会涉及到很多的开发环境，常见的例如 dev , product 等，在使用SpringCloud的时候可以通过配置中心微服务，结合 Git 管理工具实现配置的集中式管理。</p><h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><p>config配置中心的yml文件：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">sc-config</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="string">$&#123;GitAddress:https://gitee.com/somersames/spring-cloud-demo-config&#125;</span></span><br><span class="line"><span class="attr">          search-paths:</span> <span class="string">$&#123;GitPath:dev&#125;</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;EurekaHost:localhost&#125;:$&#123;EurekaPort:8081&#125;/eureka/</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br></pre></td></tr></table></figure></p><p>这里的 <code>${A:B}</code> 配置表示的是如果 A 获取不到就取 B 的值。<br><code>search-paths</code> 则是代表从哪个文件夹中获取配置文件，可以使用 <code>,</code> 来进行分割。<br>然后在启动类中添加如下几个注解，一个配置中心的微服务便开启了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfogApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfogApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="获取配置中心的配置"><a href="#获取配置中心的配置" class="headerlink" title="获取配置中心的配置"></a>获取配置中心的配置</h2><p>当其他几个微服务需要通过配置中心获取配置文件的时候，需要添加一些配置文件才可以。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">sc-auth</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        service-id:</span> <span class="string">sc-config</span> <span class="comment">#注册中心的ServiceId</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span> <span class="comment">#表示的是分支</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">config</span> <span class="comment">#表示的是一个标签</span></span><br></pre></td></tr></table></figure></p><p>那么这个微服务在拉取配置文件的时候就会拉取 <code>sc-auth-config.yml</code> 的配置</p>]]></content>
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HashMap得一点总结</title>
      <link href="/2018/06/06/HashMap%E5%BE%97%E4%B8%80%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2018/06/06/HashMap%E5%BE%97%E4%B8%80%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="HashMapp为什么在Hash的时候减1"><a href="#HashMapp为什么在Hash的时候减1" class="headerlink" title="HashMapp为什么在Hash的时候减1"></a>HashMapp为什么在Hash的时候减1</h2><p>在Java的Hashmap中有如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">                ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">return</span> first;</span><br><span class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>上面有一行是 <code>first = tab[(n - 1) &amp; hash]) != null</code> </p><h2 id="HashMap为什么在传入另一个Map时加一"><a href="#HashMap为什么在传入另一个Map时加一" class="headerlink" title="HashMap为什么在传入另一个Map时加一"></a>HashMap为什么在传入另一个Map时加一</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s = m.size();</span><br><span class="line">        <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">                <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">                <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                         (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">                <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                    threshold = tableSizeFor(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">                resize();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">                K key = e.getKey();</span><br><span class="line">                V value = e.getValue();</span><br><span class="line">                putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在这里加一的目的时向上取整，假设 s=10 ，那么乘以0.75之后便是7.5，加一之后再取整，便是最恰当的存储个数了。下面的判断则是说当前的map已有的key的数量是否达到了扩容的必要。如果需要扩容的话，则是直接出发扩容函数。</p><h2 id="HashMap通过一个键来获取值"><a href="#HashMap通过一个键来获取值" class="headerlink" title="HashMap通过一个键来获取值"></a>HashMap通过一个键来获取值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt; e;</span><br><span class="line">       <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">       <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">           (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">               ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">               <span class="keyword">return</span> first;</span><br><span class="line">           <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                   <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">               <span class="keyword">do</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                       ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                       <span class="keyword">return</span> e;</span><br><span class="line">               &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其主要是通过 <code>get(object key)</code> 然后再Hash这个key，最后通过hash的key来获取其值。当获取到 hash 的 key 之后再通过<code>tab[(n - 1) &amp; hash</code>来获取保存的位置，当发现该位置为 null 的时候便直接返回 null，<br>若不是 null 则判断第一个位置的键的 hash 值是不是要获取的 key 的 hash 相同，是的话便返回第一个节点，不是的话就欧安段链表的下一个是不是 null，如果不是的话就判断第一个节点的下一个节点是不是红黑树，是的话直接调用红黑树的查询方法，然后返回即可。<br>这里的做法是让 table 第一个节点的 next 指向红黑树的头节点或者指向链表的下一个节点。</p><h2 id="HashMap放入键和值"><a href="#HashMap放入键和值" class="headerlink" title="HashMap放入键和值"></a>HashMap放入键和值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先还是一样，判断 tab 的长度是否是0，是的话就初始化 table，然后通过hash出来的值与 table 的长度进行与运算，找出最合适存放该key的位置，如果为 null ,则存入。<br>然后判断hash是否相同，另外key是否相同，是的话跳出if，然后判断当前节点是否为null，是的话就执行 <code>afterNodeAccess</code> 将该节点移动到末尾。<br>如果发现 p 是一个树节点的话，那么直接调用树的存入方法即可，不是的话就调用单链表的方法进行插入即可。最后还会判断是否达到了链表转树的阈值，达到了就可以转了。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>netty的一些概念</title>
      <link href="/2018/05/31/netty%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/"/>
      <url>/2018/05/31/netty%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<p>这里面的部分概念参考了《Apress JavaI.O . NIO and NIO2》</p><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><p>NIO的一些操作基础就是Buffer</p><h2 id="Channels"><a href="#Channels" class="headerlink" title="Channels"></a>Channels</h2><p>它的具体作用是帮助 DMA 快速的从硬盘上获取和写入数据</p><h2 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h2><p>选择器，目的是在异步模式中可以通过一个线程来实现哪些IO操作已经完成了。</p>]]></content>
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>angular中使用Service</title>
      <link href="/2018/05/30/angular%E4%B8%AD%E4%BD%BF%E7%94%A8Service/"/>
      <url>/2018/05/30/angular%E4%B8%AD%E4%BD%BF%E7%94%A8Service/</url>
      <content type="html"><![CDATA[<p>今天使用 Angular 的时候，看到书中封装了自己得一个 LoggerService ，然后自己也想尝试下，顺便也写下这个记录。</p><h2 id="新建一个Service得ts文件"><a href="#新建一个Service得ts文件" class="headerlink" title="新建一个Service得ts文件"></a>新建一个Service得ts文件</h2><p>在 app 目录下建立一个 ts 文件，如下：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> LoggerService&#123;</span><br><span class="line">    info(msg : <span class="built_in">any</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    warn(msg: <span class="built_in">any</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    error(msg: <span class="built_in">any</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个类就是封装了一层日志打印得函数，当然在这里也可以封装一些其他得函数。</p><h2 id="将改服务添加至module"><a href="#将改服务添加至module" class="headerlink" title="将改服务添加至module"></a>将改服务添加至module</h2><p>修改 app.module.ts 文件，将这个日志服务加入到 app.module.ts 这个文件中。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; LoggerService &#125; <span class="keyword">from</span> <span class="string">'./loggerService'</span>;</span><br><span class="line"></span><br><span class="line">providers: [PersonService,LoggerService],</span><br></pre></td></tr></table></figure></p><h2 id="在组件中使用"><a href="#在组件中使用" class="headerlink" title="在组件中使用"></a>在组件中使用</h2><p>如果需要在组件中使用这个服务的话，可以直接在组件得 Component 中 import 即可。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; LoggerService &#125; <span class="keyword">from</span>  <span class="string">'../loggerService'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//然后在构造函数中加入</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> personService :PersonService,<span class="keyword">private</span> logger: LoggerService</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后方法中使用：</span></span><br><span class="line"> printItem()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.item)</span><br><span class="line">    <span class="keyword">this</span>.logger.info(<span class="string">"Logger服务得日志"</span>);</span><br><span class="line">    <span class="keyword">this</span>.emitor.emit(<span class="string">"测试回发数据"</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2>]]></content>
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在Angular中使用Bootstrap</title>
      <link href="/2018/05/29/%E5%9C%A8Angular%E4%B8%AD%E4%BD%BF%E7%94%A8Bootstrap/"/>
      <url>/2018/05/29/%E5%9C%A8Angular%E4%B8%AD%E4%BD%BF%E7%94%A8Bootstrap/</url>
      <content type="html"><![CDATA[<p>在去年的时候短暂的接触了大概一个星期的 Angular 之后就再也没碰过了，今天突然想重新捡起 Angular 的相关知识，并且想将 Angular 结合 Bootstrap 一起使用。所以正好记录下一起结合使用的步骤。</p><p>初始化一个 Angular 的项目。初始化之后打开命令行，输入：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery --save-dev</span><br><span class="line">npm install bootstrap --save-dev</span><br></pre></td></tr></table></figure></p><p>输入以上两条命令之后，在 <code>package.json</code> 中可以看到已经多出了 jquery 和 bootstrap 这两个库了。如下：<br><img src="./第一步初始化.png" alt=""></p><p>当初始化完成之后会在 node_modules 中出现 bootstrap 和 jquery 这两个文件夹。</p><p>然后再将需要引入的 css 文件和 js 文件加入到 <code>.angular-cli.json</code>中，如下：<br><img src="./第二步初始化.png" alt=""></p><p>最后再执行如下命令，将 JS 文件转化为 TypeScript 文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install @types/jquery --save -dev</span><br><span class="line"></span><br><span class="line">npm install @types/bootstrap  --save -dev</span><br></pre></td></tr></table></figure></p><h2 id="出错解决"><a href="#出错解决" class="headerlink" title="出错解决"></a>出错解决</h2><p>如果安装完成之后提示的错误如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR in ./node_modules/css-loader?&#123;&quot;sourceMap&quot;:false,&quot;importLoaders&quot;:1&#125;!./node_modules/postcss-loader/lib?&#123;&quot;ident&quot;:&quot;postcss&quot;,&quot;sourceMap&quot;:false&#125;!./node_modules/bootstrap/dist/css/bootstrap.min.css Module build failed: BrowserslistError: Unknown browser major at error</span><br></pre></td></tr></table></figure></p><p>此时需要将 node_modules 里面的 bootstrap 文件夹中的 package.json 中的 <code>&quot;last 1 major version&quot;,&quot;&gt;= 1%&quot;</code> 删除。然后 输入 <code>npm start</code>就可以了。</p>]]></content>
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Error是真的不可以被捕获的吗?</title>
      <link href="/2018/05/25/Error%E6%98%AF%E7%9C%9F%E7%9A%84%E4%B8%8D%E5%8F%AF%E4%BB%A5%E8%A2%AB%E6%8D%95%E8%8E%B7%E7%9A%84%E5%90%97/"/>
      <url>/2018/05/25/Error%E6%98%AF%E7%9C%9F%E7%9A%84%E4%B8%8D%E5%8F%AF%E4%BB%A5%E8%A2%AB%E6%8D%95%E8%8E%B7%E7%9A%84%E5%90%97/</url>
      <content type="html"><![CDATA[<p>在刚接触Java的时候经常听到的一句话便是在 Java 中，Exception 是可以捕获的，Error 是不可以捕获的。但是在随着学习的深入，会发现有些观点需要重新认识下了。<br>Throwable 这个类是自 JDK1.0 开始就存在于 Java 的语言之中。</p><h2 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h2><p>首先引用一段 Oracle 官方文档上对 Throwable 的介绍<a href="https://docs.oracle.com/javase/8/docs/api/?java/lang/Error.html" target="_blank" rel="noopener">Java8 Thrwoable的介绍</a>：</p><blockquote><p>The Throwable class is the superclass of all errors and exceptions in the Java language. Only objects that are instances of this class (or one of its subclasses) are thrown by the Java Virtual Machine or can be thrown by the Java throw statement. Similarly, only this class or one of its subclasses can be the argument type in a catch clause. For the purposes of compile-time checking of exceptions, Throwable and any subclass of Throwable that is not also a subclass of either RuntimeException or Error are regarded as checked exceptions.<br>Instances of two subclasses, Error and Exception, are conventionally used to indicate that exceptional situations have occurred. Typically, these instances are freshly created in the context of the exceptional situation so as to include relevant information (such as stack trace data).<br>太长，省略大部分了……</p></blockquote><p>简单翻译下就是，Throwable 是 Error 和 Exception 的父类，并且只能是 Error 和 Exception 的实例才可以通过 throw 语句或者 Java虚拟机 抛出异常。Exception 或者 Error 是在出错的情况下新创建的，从而将出错的信息和数据包含进去。<br>另外在这个文档中还提到了一点就是当低层方法向高层方法抛出异常的时候，如果抛出的异常是受检查的异常，则</p><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p>在看 Error 之前首先看一段代码，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Error e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看见 Error 是可以被捕获的，虽然 Java 的catch语句可以捕获 Error，但是在Error的官方文档上却做了说明：不推荐对Error进行捕获，也就是说 Error 虽然可以被 Java 语言捕获，但是Java官方却是不推荐对Error进行捕获的。具体文档如下：</p><blockquote><p> An Error is a subclass of Throwable that indicates serious problems that a reasonable application should not try to catch. Most such errors are abnormal conditions. The ThreadDeath error, though a “normal” condition, is also a subclass of Error because most applications should not try to catch it.<br>A method is not required to declare in its throws clause any subclasses of Error that might be thrown during the execution of the method but not caught, since these errors are abnormal conditions that should never occur. That is, Error and its subclasses are regarded as unchecked exceptions for the purposes of compile-time checking of exceptions.</p></blockquote><p>也就是说 Error 的出现表示程序出现了严重的非正常问题，并且在Java总处于一些原因，Error 被认为是未检查的异常。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常分为受检查的异常和运行时异常，受检查的异常标志着程序在编译期间必须处理，常见的比如在读取一个文件的时候，Java语言必须要求抛出或者Catch FileNotFoundException。而运行时异常 Java 则是对其不做要求。</p><h2 id="为什么Java不推荐捕获Error"><a href="#为什么Java不推荐捕获Error" class="headerlink" title="为什么Java不推荐捕获Error"></a>为什么Java不推荐捕获Error</h2><p>Java官方文档的解释说是 Error 的出现代表的是一些严重的非正常的错误。那么在 Java 的官方文档中介绍的 Error 有如下几种：</p><blockquote><p>AnnotationFormatError, AssertionError, AWTError, CoderMalfunctionError, FactoryConfigurationError, FactoryConfigurationError, IOError, LinkageError, SchemaFactoryConfigurationError, ServiceConfigurationError, ThreadDeath, TransformerFactoryConfigurationError, VirtualMachineError。</p></blockquote><p>这些Error的出现代表的是程序已经不用进行处理了，比如 OutOfMemoryError，如果出现了这个错误的话，那么程序已经无法运行下去了，此时捕获就没有意义了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以并不是说Error是不可以捕获的，而是可以捕获的，但是 Java 官方并不推荐捕获Error。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TreeSet和TreeMap的一点总结</title>
      <link href="/2018/05/24/TreeSet%E5%92%8CTreeMap%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2018/05/24/TreeSet%E5%92%8CTreeMap%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>首先简单介绍下TreeSet和TreeMap的两种排序：</p><ul><li>自然排序</li><li>通过comparator排序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compareWithCpmparator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeSet&lt;String&gt; treeSet =<span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"a"</span>);</span><br><span class="line">        list.add(<span class="string">"d"</span>);</span><br><span class="line">        list.add(<span class="string">"b"</span>);</span><br><span class="line">        treeSet.addAll(list);</span><br><span class="line">        Iterator&lt;String&gt; iterator =treeSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        Comparator&lt;String&gt;  comparator1 = (Comparator&lt;String&gt;) treeSet.comparator();</span><br><span class="line">        <span class="keyword">if</span> (comparator1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"comparator1是空"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"comparator1不是空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        compareWithCpmparator();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>运行之后的结果如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">d</span><br><span class="line">comparator1是空</span><br></pre></td></tr></table></figure></p><p>这段代码里面获取的<code>comparator</code>是空的，Debug一遍，发现这个方法其实调用的是<code>NavigableMap</code>里面的<code>comparator</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Comparator&lt;? <span class="keyword">super</span> E&gt; comparator() &#123;</span><br><span class="line">    <span class="keyword">return</span> m.comparator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查看官网上对其的介绍：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;? super K&gt; comparator()</span><br><span class="line">Returns the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys.</span><br><span class="line">Returns:</span><br><span class="line">the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys</span><br></pre></td></tr></table></figure></p><p>在调用这个方法的时候若是自然排序，那么会返回一个null。若是通过comparator进行排序的话当前集合采用的<code>comparator</code>。<br>查看官网对reeSet的无参构造器的解释：</p><blockquote><p>  /**</p><pre><code>* Constructs a new, empty tree set, sorted according to the* natural ordering of its elements.  All elements inserted into* the set must implement the {@link Comparable} interface.* Furthermore, all such elements must be &lt;i&gt;mutually* comparable&lt;/i&gt;: {@code e1.compareTo(e2)} must not throw a* {@code ClassCastException} for any elements {@code e1} and* {@code e2} in the set.  If the user attempts to add an element* to the set that violates this constraint (for example, the user* attempts to add a string element to a set whose elements are* integers), the {@code add} call will throw a* {@code ClassCastException}.</code></pre></blockquote><p>在使用TreeSet的时候，插入的元素需要实现Comparable这个接口，而刚刚的元素是String，查看String的代码发现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>确实实现了，再测试一个没有实现的元素：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PojoTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PojoTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PojoTest</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">com</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeSet&lt;PojoTest&gt; treeSet =<span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> PojoTest(<span class="number">1</span>,<span class="string">"a"</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> PojoTest(<span class="number">2</span>,<span class="string">"b"</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> PojoTest(<span class="number">3</span>,<span class="string">"c"</span>));</span><br><span class="line">        Iterator&lt;PojoTest&gt; iterator =treeSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>运行结果如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.ClassCastException: SetAndMap.TreeSetAndTreeMap.PojoTest cannot be cast to java.lang.Comparable</span><br><span class="line">at java.util.TreeMap.compare(TreeMap.java:<span class="number">1294</span>)</span><br><span class="line">at java.util.TreeMap.put(TreeMap.java:<span class="number">538</span>)</span><br><span class="line">at java.util.TreeSet.add(TreeSet.java:<span class="number">255</span>)</span><br><span class="line">at SetAndMap.TreeSetAndTreeMap.TestTreeSet.com(TestTreeSet.java:<span class="number">77</span>)</span><br><span class="line">at SetAndMap.TreeSetAndTreeMap.TestTreeSet.main(TestTreeSet.java:<span class="number">88</span>)</span><br></pre></td></tr></table></figure></p><p>很明显，所以放在TreeSet里面的元素要么是实现Comparable了的自然排序，要么是通过comparator来进行排序的。</p><p><strong>最后附上一个标准的使用Comparator的方法</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Comparator&lt;String&gt;  comparator =<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1.toCharArray()[<span class="number">0</span>] &gt;o2.toCharArray()[<span class="number">0</span>])&#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.toCharArray()[<span class="number">0</span>] == o2.toCharArray()[<span class="number">0</span>])&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        TreeSet&lt;String&gt; treeSet =<span class="keyword">new</span> TreeSet&lt;&gt;(comparator);</span><br><span class="line">        List&lt;String&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"a"</span>);</span><br><span class="line">        list.add(<span class="string">"d"</span>);</span><br><span class="line">        list.add(<span class="string">"b"</span>);</span><br><span class="line">        treeSet.addAll(list);</span><br><span class="line">        Iterator&lt;String&gt; iterator =treeSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        Comparator&lt;String&gt;  comparator1 = (Comparator&lt;String&gt;) treeSet.comparator();</span><br><span class="line">        TreeSet&lt;String&gt; treeSet1 =<span class="keyword">new</span> TreeSet&lt;&gt;(comparator1);</span><br><span class="line">        treeSet1.add(<span class="string">"c"</span>);</span><br><span class="line">        treeSet1.add(<span class="string">"g"</span>);</span><br><span class="line">        treeSet1.add(<span class="string">"a"</span>);</span><br><span class="line">        Iterator&lt;String&gt; iterator1 =treeSet1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator1.next());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h2 id="自然排序："><a href="#自然排序：" class="headerlink" title="自然排序："></a>自然排序：</h2><p>是实现Comparable接口并且重写了compareTo方法的</p><h2 id="另一个comparator"><a href="#另一个comparator" class="headerlink" title="另一个comparator"></a>另一个comparator</h2><p>则是通过comparator并且重写compare方法</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud的Zuul相关总结</title>
      <link href="/2018/05/23/Spring-Cloud%E7%9A%84Zuul%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/"/>
      <url>/2018/05/23/Spring-Cloud%E7%9A%84Zuul%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>Zuul是SpringCloud生态体系中的网关一环，首先简单配置如下：<br>开启注册中心并且配置yml文件，如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">somersames-erueka</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8081/eureka/</span></span><br></pre></td></tr></table></figure></p><p>开启用户的微服务：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">somersames-user</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8081/eureka</span></span><br></pre></td></tr></table></figure></p><p>编写一个测试的Controller：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"testuser"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testzuul"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testZUul</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"测试Zuul"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置注册中心：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">somersames-zuul</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">        defaultZone:</span> <span class="attr">http://localhost:8081/eureka</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    user-route:</span></span><br><span class="line">      <span class="string">url</span> <span class="string">:</span> <span class="attr">http://localhost:8082</span>  <span class="string">//用户微服务的地址</span></span><br><span class="line">      <span class="string">path</span> <span class="string">:</span> <span class="string">/user/**</span>          <span class="string">//映射的路径</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br></pre></td></tr></table></figure></p><p>设置Zuul启动类的注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulConfigApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulConfigApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试：<br>使用微服务的SericiceId访问：<br><img src="So.png" alt=""></p><p>使用Zuul的path访问：<br><img src="su.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线程的interrupt和stop区别，以及线程的中断机制</title>
      <link href="/2018/05/22/x%E7%BA%BF%E7%A8%8B%E7%9A%84interrupt%E5%92%8Cstop%E5%8C%BA%E5%88%AB%EF%BC%8C%E4%BB%A5%E5%8F%8A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/05/22/x%E7%BA%BF%E7%A8%8B%E7%9A%84interrupt%E5%92%8Cstop%E5%8C%BA%E5%88%AB%EF%BC%8C%E4%BB%A5%E5%8F%8A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h2 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt"></a>interrupt</h2><p>在Java里面线程的中断是一个协作式的，也就是说线程会在自己合适的时候自己中断自己，一般来讲线程如果需要中断的话有如下两种方法：</p><ul><li>捕获InterruptException</li><li>通过Thread的<code>interrupted()</code>或者<code>isInterrupted()</code>方法，但是需要注意的是<code>interrupted</code>会清除这个线程的状态</li></ul><p>当一个线程调用另一个线程的<code>interrupt</code>的时候，另一个线程并不会马上结束，而是会设置一个中断的状态，如果一个线程处于阻塞的状态，那么此时该线程会马上抛出一个InterruptException，由上层的代码进行处理。<br>若线程没有处于阻塞的话，此时线程还是会执行的。但是线程需要自己在合适的地方通过上述的两个方法来判断自己是否应该中断。如果自己</p><h2 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h2><p>stop方法和interrupt有许多相似之处，具体就是在阻塞的时候都会抛出Interruptexception这个异常。<br>但是在运行期间的话<code>stop</code>方法会直接强迫另一个线程终止，并且抛出一个ThreadDeath的<strong>Error</strong>，这个</p><h2 id="中断机制："><a href="#中断机制：" class="headerlink" title="中断机制："></a>中断机制：</h2><p>总结了下，有如下几种。<br>当线程在阻塞的时候收到中断请求，但是线程会抛出一个Exception并且线程的中断状态会被清除掉。（常见的阻塞如sleep，wait，join）等</p><blockquote><p>此时需要注意，如果无法继续向上抛出这个异常的话，那么就应该继续调用<code>interrupt</code>这个方法，因为每一个中断都应该被上层知道的。</p></blockquote><p>在判断线程的中断状态的时候需要注意<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="comment">// IO操作或者其他的中断操作</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(InterruptException e)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这段代码中，IO操作一旦发生阻塞并且收到一个中断异常但是这个异常又没有进行处理，这个时候while会一直判断不到这个线程已经是需要被中断的了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于线程中断就是捕获的异常一定需要抛出，不能抛出就需要设置中断中断状态</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在nginx中编写rewrite</title>
      <link href="/2018/05/20/%E5%9C%A8nginx%E4%B8%AD%E7%BC%96%E5%86%99rewrite/"/>
      <url>/2018/05/20/%E5%9C%A8nginx%E4%B8%AD%E7%BC%96%E5%86%99rewrite/</url>
      <content type="html"><![CDATA[<p>在使用Nginx做一个反向代理的时候难免会碰到一些特殊的URL，例如获取图片的URL是<code>http://dsda/XXX.jpg</code>，后来由于需要加一个时间戳来获取另外一张图片的话，此时的URL就为<code>http://dsda/XXX.jpg?time=YYYY</code>。<br>当遇到这个情况的时候是有两种选择的，分别如下：</p><h3 id="配置location"><a href="#配置location" class="headerlink" title="配置location"></a>配置location</h3><p>也就是在nginx中的<code>server</code>里面再加入一个匹配 ，但是这样加入的话若以后不再更改还好，一旦需求再次变更，就会导致配置许多的location。所以这种做法的话如果只是一些固定的URL还是可行的，但是若匹配一些动态的URL则不推荐。<br>官网的说明如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">listen</span>      <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span> <span class="string">example.org</span> <span class="string">www.example.org;</span></span><br><span class="line">    <span class="string">root</span>        <span class="string">/data/www;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">index</span>   <span class="string">index.html</span> <span class="string">index.php;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">location</span> <span class="string">~*</span> <span class="string">\.(gif|jpg|png)$</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">expires</span> <span class="number">30</span><span class="string">d;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="配置rewrite规则"><a href="#配置rewrite规则" class="headerlink" title="配置rewrite规则"></a>配置rewrite规则</h3><p>针对上面的请求，可以编写如下规则：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="comment"># root   /usr/share/nginx/html;</span></span><br><span class="line">      <span class="comment"># index  index.html index.htm;</span></span><br><span class="line">      <span class="string">if</span> <span class="string">(</span> <span class="string">$request_uri</span> <span class="string">~*</span>  <span class="string">"time=(.+)$"</span> <span class="string">)</span>  <span class="string">&#123;</span></span><br><span class="line">      <span class="string">rewrite</span> <span class="string">.*?(?=\?)</span> <span class="string">break;</span></span><br><span class="line">      <span class="string">proxy_pass</span>  <span class="attr">http://localhost:3000;</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">   <span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><p>在这里面的一个if判断语句会判断URL是否是以time结尾，如果是的话则将<code>?</code>之后的URL截取然后转发至3000端口，最后便可以不用写一个location来实现转发了</p>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高性能mysql阅读记录</title>
      <link href="/2018/05/15/%E9%AB%98%E6%80%A7%E8%83%BDmysql%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/05/15/%E9%AB%98%E6%80%A7%E8%83%BDmysql%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>nginx出现403的总结</title>
      <link href="/2018/05/14/nginx%E5%87%BA%E7%8E%B0403%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2018/05/14/nginx%E5%87%BA%E7%8E%B0403%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>今天在使用nginx的时候访问首页总是提示403forbidden，经过各种查询之后，总结为如下几种原因：</p><ol><li>访问的资源权限不足，最好将nginx访问的资源权限修改为<code>755</code>或者<code>777</code></li><li>SeLinux的设置为true，需要将其修改为false</li></ol><p>如果出现首页的访问资源不是指定的目录的话，可以在<code>/etc/nginx/nginx.conf</code>中添加一条语句<code>root XXX</code>，XXX代表的是资源目录。<br>其他的暂时没发现什么问题</p>]]></content>
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于IO多路复用以及其他的整理</title>
      <link href="/2018/04/28/%E5%85%B3%E4%BA%8EIO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BB%96%E7%9A%84%E6%95%B4%E7%90%86/"/>
      <url>/2018/04/28/%E5%85%B3%E4%BA%8EIO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BB%96%E7%9A%84%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>记得去年去年10月份的时候一个电话面试，当时面试官由多线程那一部分知识转到了IO部分，先提出同步IO和异步IO，最后面试官提出要一个IO的多路复用需要怎么去实现。但是由于对<code>多路复用</code> 的一些模式还是不太清楚，而现在正好在研究 <code>netty</code> 的时候想起来了，所以做一个总结算了。</p><h2 id="同步IO"><a href="#同步IO" class="headerlink" title="同步IO"></a>同步IO</h2><p>所谓的同步IO ，在刚学Java的Socket通信时就是一个阻塞IO，具体来讲就是在服务端的一个 while 中会调用 <code>Inputstream inputStream =scoket.getInputStream()</code> 在这里如果客户端没有发送数据的话，服务端就会一直卡在这里。或者说在接收数据的过程中会一直卡在这里，对于服务端来讲的话这里就是一个同步的，因为在这里没有接收到数据的话代码一直不能往下走。</p><h2 id="异步阻塞IO-Reactor-IO多路复用"><a href="#异步阻塞IO-Reactor-IO多路复用" class="headerlink" title="异步阻塞IO Reactor IO多路复用"></a>异步阻塞IO Reactor IO多路复用</h2><p>异步代表的是被调用方需要主动的反馈通知，就比如在本例中，读取Socket的流，如果在读取流的时候必须等待调用方自己去判断是否读取完毕，则这个就是一个同步IO。但是如果在调取的时候，每一次调用方都可以得到一个反馈，无论客户端是否准备就绪。则称之为异步的：如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">InputStream in =read(); <span class="comment">// 假设此时每次调用都会返回一个结果</span></span><br><span class="line">Reader reader =<span class="keyword">new</span> InputStreamReader(in);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时就可以称之为一个异步IO，主要就是因为这个读取操作不再会被阻塞，每一次的调用，被调用方都会反馈一个信息.</p><p>在 Java 的  <code>Netty</code> 中每次循环都会去检查所有的key，看下是不是有的key可以都去了或者可以写入了之类的，这个就是一个典型的IO多路复用</p><h2 id="同步非阻塞"><a href="#同步非阻塞" class="headerlink" title="同步非阻塞"></a>同步非阻塞</h2><p>继续以Socket举例：在同步IO的时候，没有收到数据是不会进行下一步操作的，但是同步非阻塞IO就是在这里直接判断数据准备好了没有，不管是否有数据，直接进行下一步操作。</p><h2 id="异步非阻塞"><a href="#异步非阻塞" class="headerlink" title="异步非阻塞"></a>异步非阻塞</h2><p>异步IO指的是调用方不必在这里一直询问是否准备好数据没，而是直接执行代码，最后等待被调用方的一个通知即可。在这里还没有找到很好的举例</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>在这里其实在Java的多线程中 CallBack 和 Future 类似，当CallBack执行完毕之后再执行 Future 便可以得到一个结果，但是这个是一个同步阻塞的，异步</p>]]></content>
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring中使用MappingJackson2HttpMessageConverter遇到的一个坑</title>
      <link href="/2018/04/27/spring%E4%B8%AD%E4%BD%BF%E7%94%A8MappingJackson2HttpMessageConverter%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/"/>
      <url>/2018/04/27/spring%E4%B8%AD%E4%BD%BF%E7%94%A8MappingJackson2HttpMessageConverter%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>今天遇到的一个问题就是在Spring中如果继承 <code>WebMvcConfigurerAdapter</code> 然后实现 <code>configureMessageConverters</code> 方法来实现一个 Json 的转换的时候，此时会出现一个情况就是：<br>    如果在Controller里面的那个参数是String的话就会一直提示一个错误 <code>org.springframework.http.converter.HttpMessageNotReadableException&quot;,&quot;message&quot;:&quot;JSON parse error: Can not deserialize instance of java.lang.String out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.lang.String out of START_OBJECT token\n at [Source: java.io.PushbackInputStream@35b22c23; line: 1, column: 1]&quot;,&quot;path&quot;:&quot;/tetsjson&quot;}</code><br>刚开始一直找不出原因，于是在 Spring 源码中 DEBUG :<br>在如下两处打断点发现是可以获取请求体的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpInputMessage <span class="title">beforeBodyRead</span><span class="params">(HttpInputMessage request, MethodParameter parameter,</span></span></span><br><span class="line"><span class="function"><span class="params">Type targetType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (RequestBodyAdvice advice : getMatchingAdvice(parameter, RequestBodyAdvice.class)) &#123;</span><br><span class="line"><span class="keyword">if</span> (advice.supports(parameter, targetType, converterType)) &#123;</span><br><span class="line">request = advice.beforeBodyRead(request, parameter, targetType, converterType);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> request;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">afterBodyRead</span><span class="params">(Object body, HttpInputMessage inputMessage, MethodParameter parameter,</span></span></span><br><span class="line"><span class="function"><span class="params">Type targetType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (RequestBodyAdvice advice : getMatchingAdvice(parameter, RequestBodyAdvice.class)) &#123;</span><br><span class="line"><span class="keyword">if</span> (advice.supports(parameter, targetType, converterType)) &#123;</span><br><span class="line">body = advice.afterBodyRead(body, inputMessage, parameter, targetType, converterType);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> body;   <span class="comment">// 可以正常解析出请求的body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是一旦加上请求头<code>Content-Type : application/json</code>.在方法进入 <code>beforeBodyRead</code> 里面的 <code>for循环</code> 之后便跳转到了 <code>org.springframework.web.servlet.mvc.method.annotationgetMatchingAdvice()</code> 方法，然后继续走下去发现有一处提示如下：<br><img src="String转Http.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter methodParameter, Type targetType,</span></span></span><br><span class="line"><span class="function"><span class="params">Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// ConverType :"class org.springframework.http.converter.json.MappingJackson2HttpMessgaeConverter"</span></span><br><span class="line"><span class="keyword">return</span> (AbstractJackson2HttpMessageConverter.class.isAssignableFrom(converterType) &amp;&amp;</span><br><span class="line">methodParameter.getParameterAnnotation(JsonView.class) != <span class="keyword">null</span>);</span><br><span class="line">              <span class="comment">// methodParamter: "method 'XXX' 'Controller方法' paramter 0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="第二次转换.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;A extends Annotation&gt; <span class="function">A <span class="title">getParameterAnnotation</span><span class="params">(Class&lt;A&gt; annotationType)</span> </span>&#123;</span><br><span class="line">Annotation[] anns = getParameterAnnotations();</span><br><span class="line"><span class="keyword">for</span> (Annotation ann : anns) &#123;</span><br><span class="line">           <span class="comment">//annotationType: “interface conk fast erxml. jackson. annotation. JsonView” ann: “org.springframework.web.bind. annotation. RequestBody(requiredtrue)</span></span><br><span class="line"><span class="keyword">if</span> (annotationType.isInstance(ann)) &#123;</span><br><span class="line"><span class="keyword">return</span> (A) ann;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说在上面已经讲Json转成了 <code>json.MappingJackson2HttpMessageConverter</code></p><p>然后在 <code>org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter</code>的read()方法中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">read</span><span class="params">(Type type, Class&lt;?&gt; contextClass, HttpInputMessage inputMessage)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</span><br><span class="line"></span><br><span class="line">JavaType javaType = getJavaType(type, contextClass);</span><br><span class="line"><span class="keyword">return</span> readJavaType(javaType, inputMessage);  <span class="comment">//type :"class java.lang.String" contextClass :"class com.XXX.controller.UserContoller"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="Controller对应Java类型.png" alt=""></p><p>后来就DEBUG不下去了。。。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>出现该BUG是因为使用了 <code>MappingJackson2HttpMessageConverter</code> 之后会将Json解析成对象，是String肯定会报错。</p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>要么在 <code>@RequestBody</code>里面使用对象接收，要么修改 <code>MappingJackson2HttpMessageConverter</code>方法将Json转成对象</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP请求的ContentType以及其使用范围</title>
      <link href="/2018/04/26/HTTP%E8%AF%B7%E6%B1%82%E7%9A%84ContentType%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8%E8%8C%83%E5%9B%B4/"/>
      <url>/2018/04/26/HTTP%E8%AF%B7%E6%B1%82%E7%9A%84ContentType%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8%E8%8C%83%E5%9B%B4/</url>
      <content type="html"><![CDATA[<p>在发送请求的是时候最需要注意的是 <code>Content-Type</code> ，因为不同的 Type 对应的则是不同类型的数据，今天正好没什么事情，所以来总结下：</p><h2 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h2><p>这种类型在最近几年用的比较多，主要是由于现在前后端分离，数据的请求方式可以由以前的表单提交逐渐偏向于Json的这种格式。所以这种 <code>application/json</code>格式的数据也就越来越多了。</p><p>这种数据现在一般使用的较多。<br>例如，在使用Jquery的时候如果没有指定dataType的话，在后端可以设置 Content-Type 为 application/json 也是可行的。<br>用 Java 则是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/json"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h2><p>这种就是最常见的一种表单提交方式，也就是常用的form提交了。如果通过表单提交并且想在表单中添加文件，则需要在 <code>form</code> 标签中加入 <code>enctype</code>属性，并且指定 <code>enctype</code> 为 <code>multipart/form-data</code>。</p><p>而表单默认的是 <code>application/x-www-form-urlencoded</code> 所以说其实当没有主动写这个属性的时候，浏览器已经帮你加上去了。</p><h2 id="text-plain"><a href="#text-plain" class="headerlink" title="text/plain"></a>text/plain</h2><p>最常用的一个字符串传输类型</p>]]></content>
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于微服务的一些思考</title>
      <link href="/2018/04/25/%E5%85%B3%E4%BA%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
      <url>/2018/04/25/%E5%85%B3%E4%BA%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>springcloud与mock服务</title>
      <link href="/2018/04/24/springcloud%E4%B8%8Emock%E6%9C%8D%E5%8A%A1/"/>
      <url>/2018/04/24/springcloud%E4%B8%8Emock%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>spring cloud使用ELK日志记录(四)</title>
      <link href="/2018/04/23/spring-cloud%E4%BD%BF%E7%94%A8ELK%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95-%E5%9B%9B/"/>
      <url>/2018/04/23/spring-cloud%E4%BD%BF%E7%94%A8ELK%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95-%E5%9B%9B/</url>
      <content type="html"><![CDATA[<p>在ELK的使用过程中，遇到了一点困难， 所以正好写这一篇文章来记录下：</p><h2 id="问题一：logstash连接elasticsearch报错"><a href="#问题一：logstash连接elasticsearch报错" class="headerlink" title="问题一：logstash连接elasticsearch报错"></a>问题一：logstash连接elasticsearch报错</h2><p>这个问题在这边是由于<code>logstash</code>连接报错，查看了下错误日志发现是由于解析模板出错，后来改了下之后便可以连接了</p><h2 id="问题二：kibama可以连接上elasticsearch但是一直读取不了数据"><a href="#问题二：kibama可以连接上elasticsearch但是一直读取不了数据" class="headerlink" title="问题二：kibama可以连接上elasticsearch但是一直读取不了数据"></a>问题二：kibama可以连接上elasticsearch但是一直读取不了数据</h2><p><code>&quot;Couldn&#39;t find any Elasticsearch dataYou&#39;ll need to index some data into Elasticsearch before you can create an index pattern &quot;</code><br>这个问题出现的原因比较复杂，需要仔细排除，不过当出现这个问题的时候可以先看下Elasticsearch 是否含有数据，若是没有数据则添加数据即可。<code>http://localhost:9200/_cat/indices</code>。当这一步没问题了以后，若发现kibana还是无法显示数据则可以在kibana的DevTool里面直接模拟数据。如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST test/doc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"filed"</span>: <span class="string">"myData"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时刷新<code>http://localhost:9200/_cat/indices</code>,若还是未出现数据，则表示可能是logstash，elasticsearch和kibana连接的过程出错了，此时就需要检查log日志。<br>下面进入连接部分</p><h2 id="连接"><a href="#连接" class="headerlink" title="连接:"></a>连接:</h2><p>首先在微服务中引入logstash所需要的jar，然后编写logstash.xml。具体如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/net.logstash.logback/logstash-logback-encoder --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>编写logstash.xml。在这里直接将<code>springcloud与Docker微服务实战</code>的logstash.xml拿来使用了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span> /&gt;</span></span><br><span class="line">    ​</span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"springAppName"</span> <span class="attr">source</span>=<span class="string">"spring.application.name"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Example for logging into the build folder of your project --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE"</span> <span class="attr">value</span>=<span class="string">"$&#123;BUILD_FOLDER:-build&#125;/$&#123;springAppName&#125;"</span> /&gt;</span></span><br><span class="line">    ​</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">"%clr(%d&#123;yyyy-MM-dd HH:mm:ss&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr([$&#123;springAppName:-&#125;,%X&#123;X-B3-TraceId:-&#125;,%X&#123;X-B3-SpanId:-&#125;,%X&#123;X-B3-ParentSpanId:-&#125;,%X&#123;X-Span-Export:-&#125;])&#123;yellow&#125; %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Appender to log to console --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Minimum logging level to be presented in the console logs --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Appender to log to file --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"flatfile"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    ​</span><br><span class="line">    <span class="comment">&lt;!-- Appender to log to file in a JSON format --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"logstash"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE&#125;.json<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;.json.%d&#123;yyyy-MM-dd&#125;.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">providers</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">timestamp</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">timeZone</span>&gt;</span>UTC<span class="tag">&lt;/<span class="name">timeZone</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">timestamp</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                        &#123;</span><br><span class="line">                        "severity": "%level",</span><br><span class="line">                        "service": "$&#123;springAppName:-&#125;",</span><br><span class="line">                        "trace": "%X&#123;X-B3-TraceId:-&#125;",</span><br><span class="line">                        "span": "%X&#123;X-B3-SpanId:-&#125;",</span><br><span class="line">                        "parent": "%X&#123;X-B3-ParentSpanId:-&#125;",</span><br><span class="line">                        "exportable": "%X&#123;X-Span-Export:-&#125;",</span><br><span class="line">                        "pid": "$&#123;PID:-&#125;",</span><br><span class="line">                        "thread": "%thread",</span><br><span class="line">                        "class": "%logger&#123;40&#125;",</span><br><span class="line">                        "rest": "%message"</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">providers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    ​</span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"logstash"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;appender-ref ref="flatfile"/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>编写完成这个微服务之后，需要去设置ELK相关的config</p><h2 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h2><p>在使用<code>elasticsearch</code>的时候并不需要过多的设置。甚至可以不用进行设置，所以这里可以直接忽略掉</p><h2 id="logstash"><a href="#logstash" class="headerlink" title="logstash"></a>logstash</h2><p>在使用Logstash的时候需要设置一个config文件，该文件指定了读取日志的路径，以及日志的过滤方式，和日志的输出方式<br>所以在这里需要自己配置下：如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        codec =&gt; json</span><br><span class="line">        path =&gt; &quot;C:\ELK\log\build\microservice-provider-user.json&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">      match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;TIMESTAMP_ISO8601:timestamp&#125;\s+%&#123;LOGLEVEL:</span><br><span class="line">  severity&#125;\s+\[%&#123;DATA:service&#125;,%&#123;DATA:trace&#125;,%&#123;DATA:\span&#125;,%&#123;DATA:exportable&#125;\]\s+%&#123;DATA:pid&#125;---\s+\[%&#123;DATA:thread&#125;\]\s+%&#123;DATA:class&#125;\s+:\</span><br><span class="line">  s+%&#123;GREEDYDATA:rest&#125;&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; &quot;localhost:9200&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>input-&gt;path指定的是读取日志的路径，而output-&gt;elasticsearch则是代表将日志输出到<code>elasticsearch</code></p><h2 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h2><p>kibana的配置其实不需要很多，在这里也仅仅配置了连接elasticsearch的相关设置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">elasticsearch.url:</span> <span class="string">"http://localhost:9200"</span></span><br><span class="line"><span class="string">elasticsearch.username:</span> <span class="string">"elastic"</span></span><br><span class="line"><span class="string">elasticsearch.password:</span> <span class="string">"changeme"</span></span><br></pre></td></tr></table></figure><p>最后依次启动<code>elasticsearch</code>，<code>logstash</code>，<code>kibana</code>。最后将包含logstash相关的微服务打包成jar，然后开启注册中心，最后运行该项目，随便访问一个连接，应该是可以在<code>elasticsearch</code>看到刚刚的数据</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>elasticsearch获取不到数据</li></ol><p>此时应该检查logstash的日志观察是否模板出错，另外需要注意的是在匹配的时候不可以使用<code>*.json</code>，一定是需要文件名称加上json，如上配置，否则会导致无法是被</p><ol start="2"><li>配置好了还是无法获取数据</li></ol><p>可以在kibana的控制台手动添加数据，然后访问<code>http://localhost:9200/_cat/indices?v</code>，如果还是未出现数据，则表示 kibana 和 elasticsearch 的连接除了问题，需要排查。目前提供了两种思路，第一种是在kibana的配置中手动配置 elasticsearch 的地址和用户名以及密码。第二种则是在 kibana 的控制台手动添加数据:</p><p><img src="kibana控制台.PNG" alt=""></p><p>如果kibana连接正常则会在<code>http://localhost:9200/_cat/indices?v</code>这里出现刚刚添加的数据。没出现的话就需要仔细检查了</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springcloud的其他组件使用记录之Config(四)</title>
      <link href="/2018/04/22/springcloud%E7%9A%84%E5%85%B6%E4%BB%96%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/04/22/springcloud%E7%9A%84%E5%85%B6%E4%BB%96%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>在使用Spring Config的时候遇到一些坑，在这里记录下，顺便梳理下这个使用。</p><h2 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h2><p>使用Spring Config来配合git做一个配置文件管理，需要一个Config的服务端和一个Config的客户端，服务端主要是和git仓库进行一个连接，而config的客户端是连接服务端来刷新配置服务的。<br>在Spring Cloud Config里面客户端需要使用<code>Spring4.0</code>出现的一个注解<code>@Value</code>配合一起使用</p><h2 id="Spring-Config服务端"><a href="#Spring-Config服务端" class="headerlink" title="Spring Config服务端"></a>Spring Config服务端</h2><p>需要引入一下几个文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>新建一个application.yml<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservice-server</span>  <span class="comment"># name可以随便填写，代表这个服务的ServiceId</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/somersames/sprincloud-config.git</span>  <span class="comment"># git的地址</span></span><br><span class="line"><span class="attr">          username:</span> <span class="string">yourname</span></span><br><span class="line"><span class="attr">          password:</span> <span class="string">yourpassword</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8099</span> <span class="comment"># 服务开启的端口</span></span><br></pre></td></tr></table></figure></p><p>新建一个启动类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>@EnableConfigServer</code>代表的是将这个微服务作为Config的服务器</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>随后在git服务器中新建几个文件，并且按照peoperties的格式输入内容，例如<code>profile=ad</code>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">microservice-foo.properties</span><br><span class="line">microservice-foo-dev.properties</span><br><span class="line">microservice-foo-test.properties</span><br></pre></td></tr></table></figure></p><p>分别代表的是默认配置和开发环境以及测试环境的配置文件。</p><h2 id="开启服务端"><a href="#开启服务端" class="headerlink" title="开启服务端"></a>开启服务端</h2><p>运行服务端，然后访问URL，其中URL的格式为localhost:port/默认的项目名称/分支.格式<br><img src="json格式.PNG" alt=""><br>这个URL的格式有很多种格式，具体的可以百度之后再自己尝试<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"microservice-foo"</span>,<span class="attr">"profiles"</span>:[<span class="string">"dev.json"</span>],<span class="attr">"label"</span>:<span class="string">"master"</span>,<span class="attr">"version"</span>:<span class="string">"7ac2a341dfe7959b809b7d5ec70b980970208b91"</span>,<span class="attr">"state"</span>:<span class="literal">null</span>,<span class="attr">"propertySources"</span>:[&#123;<span class="attr">"name"</span>:<span class="string">"https://gitee.com/somersames/sprincloud-config.git/microservice-foo.properties"</span>,<span class="attr">"source"</span>:&#123;<span class="attr">"profile"</span>:<span class="string">"default-1.0-changeewafasf"</span>&#125;&#125;]&#125;</span><br></pre></td></tr></table></figure></p><h2 id="添加客户端"><a href="#添加客户端" class="headerlink" title="添加客户端"></a>添加客户端</h2><p>客户端不负责直接和git进行通信，而是直接和Config的服务端进行通信获取最新的数据</p><p>新建一个工程并且添加一个配置文件<code>bootstrap.yml</code>，没错，是bootstrap.yml，然后再新建一个配置文件<code>application.yml</code>.<br>在bootstrap.yml中添加内容：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservice-foo</span> <span class="comment"># 这里的名称填写项目的名称，也就是在之前获取的json里面的那个name</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:8099/</span>  <span class="comment"># 填写Config服务端地址</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span>  <span class="comment">#项目环境</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span>  <span class="comment">#项目分支</span></span><br></pre></td></tr></table></figure></p><p>在Application.yml里面添加内容：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8088</span> <span class="comment"># 服务开启的端口，任意即可</span></span><br></pre></td></tr></table></figure></p><p>新建一个Controller<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"config"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;profile&#125;"</span>)  <span class="comment">// 这里的profile不是随便取得，这里取得是上述josn字符串里面的propertySources 下的 source 里面的那个键，在这个例子里面就是profile,</span></span><br><span class="line">    <span class="keyword">private</span> String profile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/profile"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.profile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其他无需改动，然后访问<code>localhost:8099/config/profile</code>，可以看到如下结果：<br><img src="config.PNG" alt=""></p><h2 id="刷新"><a href="#刷新" class="headerlink" title="刷新"></a>刷新</h2><p>有时候需要比如动态刷新git的最新配置的话，需要引入一个新的包：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  <span class="comment">&lt;!--根据自己的版本自己选择合适的 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后在Controller里面添加注解<code>@RefreshScope</code>,但是需要注意的是高版本需要在bootstrap.yml里面添加一个配置<strong><code>management:security:enabled: false</code></strong>否则会导致修改之后请求<code>refresh</code>刷新不出来。</p><p>自己通过git修改那个文件之后继续如下操作：</p><p>然后POSTMAN发出一个POST请求，<br><img src="POST刷新.PNG" alt=""></p><p>如果在高版本里面不添加那个配置会导致刷新不出来，如果自己刷新不出来，请尝试添加那个配置,另外那个额外添加的配置需要按照格式自己调整下。刷新之后如下：</p><p><img src="刷新.PNG" alt=""></p><p>那个cvcvcv就是刚刚修改的内容</p><p>这个就差不多结束了</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springcloud使用feign导致的Excepted authority 错误(三)</title>
      <link href="/2018/04/21/%E8%AE%B0%E4%B8%80%E6%AC%A1springcloud%E4%BD%BF%E7%94%A8feign%E5%AF%BC%E8%87%B4%E7%9A%84Excepted-authority-%E9%94%99%E8%AF%AF-%E4%B8%89/"/>
      <url>/2018/04/21/%E8%AE%B0%E4%B8%80%E6%AC%A1springcloud%E4%BD%BF%E7%94%A8feign%E5%AF%BC%E8%87%B4%E7%9A%84Excepted-authority-%E9%94%99%E8%AF%AF-%E4%B8%89/</url>
      <content type="html"><![CDATA[<p>今天在用Feign的时候遇到了一个BUG，这个BUG虽然不是很难，但是由于网上没什么解决办法，而是自己的DEBUG解决的，所以暂且记录下：</p><p>异常就是<code>java.net.URISyntaxException: Expected authority at index 7: http://</code>，刚开始的时候一头雾水，在Google了一遍之后并未找出解决办法，后来又尝试了在代码中进行了DEBUG，发现代码嵌套的太深了，所以没办法走下去，之后便去StackOverflow中查看了下也没有什么头绪<br>在这里也检查过了是不是服务没注册还是Feign的注解微服务名称是不是有问题，都显示是正常的，并且可以通过这个名称获取其对应的地址</p><p>后来今早起来的时候再次逛StackOverflow看到有人提示<code>try to debug into the LoadBalancerFeignClient.cleanUrl()</code>。查看了下这个方法的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> URI <span class="title">cleanUrl</span><span class="params">(String originalUrl, String host)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> URI.create(originalUrl.replaceFirst(host, <span class="string">""</span>));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>猜测了下应该是负责创建Feign相关URL的一个类，所以尝试在这里DEBUG，然后再开启一个正常的可以使用Feign的服务，最后发现这两个服务的区别是，在这个出错的微服务里面发出的请求是<code>http://xxx</code>,而正常的微服务是<code>http://xxx/user/name/XX</code>,所以问题马上就定位出来了，就是请求的问题，</p><p>查看Feign的接口，发现在方法上面的<code>@RequestMapping</code>出了问题，出错的配置如下:<code>@RequestMapping(name = &quot;movie/user/{username}&quot; ,method = RequestMethod.GET)</code>,这里其实应该是value而不是name，至于name的作用参照网上的说法如下(自己并未证实):<br>假设在UserController中有一个getUser()方法，那么此时如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(name=<span class="string">"ceshifangfa"</span>,value=<span class="string">"/getuser"</span>,method=RequestMethod.GET)()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在jsp页面是可以通过name属性来访问这个接口：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;s:mvcUrl('UC#ceshifangfa').build()&#125;"&gt;获取用户&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>那么此时在这里使用name的话导致了Feign找不到了访问的URL，所以直接抛出异常。<br>最后修改为value，一切正常</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在碰到问题的时候自己的思路一开始是没错的，但是当时不知道如何找出那个Feign的发请求方法，所以一直卡在这里了。<br>提示：以后再StackOverflow看到别人的回答的时候可以稍微仔细的思考下</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springcloud的服务注册与负载均衡</title>
      <link href="/2018/04/20/springcloud%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2018/04/20/springcloud%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      <content type="html"><![CDATA[<p>在springcloud中，服务注册和负载均衡分别是eureka和ribbon。其中eureka是一个服务注册组件，ribbon则是一个负载均衡组件。如果开启了hystrix之后ribbon就默认已经开启了。</p><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><p>在使用Eureka的时候服务端开启之后直接在客户端的application.yml中加入如下代码即可:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">          defaultZone:</span> <span class="attr">http://localhost:8083/eureka/</span></span><br></pre></td></tr></table></figure></p><p>其中defaultZone代表的是服务端的地址，开启服务之后在eureka的服务面板便会看到这个注册信息。如果需要在这个客户端中加入一些元数据的话可以加入如下配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">instance:</span></span><br><span class="line"><span class="attr">  prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    metadata-map:</span></span><br><span class="line"><span class="attr">      mydata:</span> <span class="string">testydata</span></span><br></pre></td></tr></table></figure></p><p>其中<code>metedata-map</code>下面就代表的是自己定义的元数据，这个会在其他客户端请求查看微服务信息的时候一同显示出来。</p><h2 id="ribbon"><a href="#ribbon" class="headerlink" title="ribbon"></a>ribbon</h2><p>负载均衡组件，可以将请求均匀的分布在相同的微服务实例上，需要几个微服务都是同一个相同名称，端口可以不同。<br>新建两个客户端,第一个客户端端口号是8085<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">eurekamovie</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">          defaultZone:</span> <span class="attr">http://localhost:8083/eureka/</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8085</span></span><br></pre></td></tr></table></figure></p><p>第二个客户端端口是8087<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">eurekamovie</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">          defaultZone:</span> <span class="attr">http://localhost:8083/eureka/</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8087</span></span><br></pre></td></tr></table></figure></p><p>这两个服务建立并开启之后，新建一个服务端，然后通过ribbon访问<code>eurekamovie</code>这个服务名称，这样请求就会均匀的分布在这两个服务上。</p><p>建立一个RestTemplate自动注解类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">LoadBalancerClient loadBalancerClient;</span><br></pre></td></tr></table></figure></p><p>最后在Controller里面的方法里面通过调用该服务名称完成调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">ServiceInstance instance = loadBalancerClient.choose(<span class="string">"EUREKAMOVIE"</span>);</span><br><span class="line">URI uri = instance.getUri();</span><br><span class="line">User user =<span class="keyword">this</span>.restTemplate().getForEntity(uri+<span class="string">"aa"</span>,User.class).getBody();</span><br></pre></td></tr></table></figure></p><p>最后可以在另两个服务中可以看到请求按照一个一次的方式均匀的分布在这两个实例中。另外就是如果需要自己编写负载均衡的规则的话。可以参照如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>自定义的规则只需要返回一个IRule规则即可。</p>]]></content>
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springcloud的多节点部署(二)</title>
      <link href="/2018/04/19/springcloud%E7%9A%84%E5%A4%9A%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2-%E4%BA%8C/"/>
      <url>/2018/04/19/springcloud%E7%9A%84%E5%A4%9A%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2-%E4%BA%8C/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>spring cloud初步配置之起步</title>
      <link href="/2018/04/18/spring-cloud%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/"/>
      <url>/2018/04/18/spring-cloud%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>spring cloud是一个微服务治理框架，主要解决的是以前单应用过于臃肿的一些难点，在这里记录下初次使用springcloud的一些过程</p><h2 id="创建一个springboot应用"><a href="#创建一个springboot应用" class="headerlink" title="创建一个springboot应用"></a>创建一个springboot应用</h2><p>在这里使用的是IDEA的<code>spring Initializr</code>创建的，创建好了之后将<code>application.properties</code>改成<code>application.yml</code>,其项目结构图如下：<br><img src="项目结构图.PNG" alt=""></p><p>在这里需要注意的是由于在这里的Test文件中含有一个<code>@RunWith</code>注解，所以需要在pom.xml中引入springboot的test包，否则项目可能启动不起来</p><h2 id="引入spring-cloud包"><a href="#引入spring-cloud包" class="headerlink" title="引入spring cloud包"></a>引入spring cloud包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Camden.SR7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是官网的以一个配置，但是在引入本地的时候还是需要稍微做点修改。<br>修改之后的：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>Camden.SR7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在这里添加了<code>&gt;spring-cloud-starter-eureka-server</code>,而且在这里引入的jar都不需要添加版本号。</p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">stock-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8084/eureka/</span></span><br></pre></td></tr></table></figure><p>最后便可以启动项目了。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>运行出来的结果如下：<br><img src="eureka.PNG" alt=""></p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring源码导入IDEA</title>
      <link href="/2018/04/17/spring%E6%BA%90%E7%A0%81%E5%AF%BC%E5%85%A5IDEA/"/>
      <url>/2018/04/17/spring%E6%BA%90%E7%A0%81%E5%AF%BC%E5%85%A5IDEA/</url>
      <content type="html"><![CDATA[<p>在将Spring源码导入IDEA的过程中出现了一个错误，就是看到spring源码里面有一个<code>import-into-idea.md</code>这个文件，按照这个文件里面的命令在导入源码至IDEA的过程中会提示一个非法异常。网上也没有好的解决办法，后来直接在IDEA里面选择导入，然后选择以gradle的方式导入之后就可以正常运行了。</p>]]></content>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> spring </tag>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于SQL在工作中的一些注意事项</title>
      <link href="/2018/04/16/%E5%85%B3%E4%BA%8ESQL%E5%9C%A8%E5%B7%A5%E4%BD%9C%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2018/04/16/%E5%85%B3%E4%BA%8ESQL%E5%9C%A8%E5%B7%A5%E4%BD%9C%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      <content type="html"><![CDATA[<p>在工作中的话，一个sql语句最好不要连接太多的表，否则会导致修改一个地方之后整个表结构就会全部的出错，所以正确的方法是如果一个接口在设计的时候就需要返回大量的数据，那么最好是在后端进行多个语句的查询，最后组合成一个json书返回给前端，或者在数据库设计的时候就考虑到这个问题，当然这个问题一般无法避免</p>]]></content>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springwebsocket相关</title>
      <link href="/2018/04/16/springwebsocket%E7%9B%B8%E5%85%B3/"/>
      <url>/2018/04/16/springwebsocket%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<p>在使用Spring来进行websocket通信的时候需要注意几点问题：</p><h2 id="localhost与127-0-0-1的区别"><a href="#localhost与127-0-0-1的区别" class="headerlink" title="localhost与127.0.0.1的区别"></a>localhost与127.0.0.1的区别</h2><p>在使用<code>127.0.0.1</code>的时候是可以和服务器建立websocket连接的，但是如果想在websocket的intercept里面拦截request，并且获取session里面的用户的话。若在js脚本里卖弄使用<code>127.0.0.1</code>的话会会导致浏览器在发起请求的时候不会带上cookies，所以在这里获取的一定会是一个null，这里便需要注意，也就是说在浏览器中输入的是localhost那么在websocket中输入的也必须是localhost，否则会导致浏览器在进行websocket请求的时候不会带上cookie</p>]]></content>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shiros自定义异常的跳转</title>
      <link href="/2018/04/14/shiros%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%9A%84%E8%B7%B3%E8%BD%AC/"/>
      <url>/2018/04/14/shiros%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%9A%84%E8%B7%B3%E8%BD%AC/</url>
      <content type="html"><![CDATA[<p>在shiro中经常需要对特定的异常及进行特殊的处理。一般来讲在shiro中配置的话是通过如下代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>  /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;property name="filters"&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;map&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;entry key="roles" value-ref="roles" /&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;entry key="perms" value-ref="perms" /&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;/map&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;/property&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 过滤链定义 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--/role/** authc--&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--/login/main authc--&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--api/logincheck authc--&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--message/detail role[EMPLOYEE]--&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>但是在这里配置的话会有一个问题，就是通过注解<code>@RequireRoles()</code>这个来配置的权限会导致这里的配置一直无法生效，也就是当无权限的人访问需要特定权限的URL的时候就会直接在页面上显示500，而不是返回我这个指定的URL，后来查询得知有如下几个需要注意的：</p><ol><li>使用配置的方式配置权限的话该xml可以生效</li><li>使用注解配置权限的话但是使用xml方式配置错误跳转页面不会跳转至指定URL</li></ol><p>所以在项目中使用注解配置权限的话需要在xml配置文件中配置一个异常和其处理的相关url，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常页名作为值 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.apache.shiro.authz.NestedServletException"</span>&gt;</span>redirect:/unauthorized<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.apache.shiro.authz.UnauthenticatedException"</span>&gt;</span>redirect:/unauthorized<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.apache.shiro.authz.AuthorizationException"</span>&gt;</span>redirect:/unauthorized<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python使用Plotly来画图</title>
      <link href="/2018/04/13/Python%E4%BD%BF%E7%94%A8Plotly%E6%9D%A5%E7%94%BB%E5%9B%BE/"/>
      <url>/2018/04/13/Python%E4%BD%BF%E7%94%A8Plotly%E6%9D%A5%E7%94%BB%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>Plotly是一个比较好的画图工具，主要用于数据的展示，以及分析，最好配合pandas一起使用发挥出最大的作用</p><h2 id="引入基础库"><a href="#引入基础库" class="headerlink" title="引入基础库"></a>引入基础库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> plotly.plotly</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h2 id="画图："><a href="#画图：" class="headerlink" title="画图："></a>画图：</h2><p>在这里画图的话可以使用参照官网给出的一个饼形图例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">labels = [<span class="string">'Oxygen'</span>,<span class="string">'Hydrogen'</span>,<span class="string">'Carbon_Dioxide'</span>,<span class="string">'Nitrogen'</span>]</span><br><span class="line">values = [<span class="number">4500</span>,<span class="number">2500</span>,<span class="number">1053</span>,<span class="number">500</span>]</span><br><span class="line">colors = [<span class="string">'#FEBFB3'</span>, <span class="string">'#E1396C'</span>, <span class="string">'#96D38C'</span>, <span class="string">'#D0F9B1'</span>]</span><br><span class="line"></span><br><span class="line">trace = go.Pie(labels=labels, values=values,</span><br><span class="line">               hoverinfo=<span class="string">'label+percent'</span>, textinfo=<span class="string">'value'</span>, </span><br><span class="line">               textfont=dict(size=<span class="number">20</span>),</span><br><span class="line">               marker=dict(colors=colors, </span><br><span class="line">                           line=dict(color=<span class="string">'#000000'</span>, width=<span class="number">2</span>)))</span><br></pre></td></tr></table></figure></p><p>go.pie()函数的参数含义分别是名字，值，鼠标覆盖后需要显示的信息：标签和占比，最后一个是饼形图每一块显示内容，是限制数量还是什么，最后如果需要在本地会吐的话需要调用离线画图函数，但是貌似它的图形会比在线的少不少。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plotly.offline.plot([trace])</span><br></pre></td></tr></table></figure><p>若需要绘制多个的话类似于折线图可以修改为<code>plotly.offline.plot([trace1,trace2])</code>或者直接<code>data=[trace1,trace2]</code>然后<code>plotly.offline.plot(data)</code></p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> plotly </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mybatis中sql排序以及#和$的区别(二)</title>
      <link href="/2018/04/12/Mybatisz%E4%B8%ADsql%E6%8E%92%E5%BA%8F%E4%BB%A5%E5%8F%8A-%E5%92%8C-%E7%9A%84%E5%8C%BA%E5%88%AB-%E4%BA%8C/"/>
      <url>/2018/04/12/Mybatisz%E4%B8%ADsql%E6%8E%92%E5%BA%8F%E4%BB%A5%E5%8F%8A-%E5%92%8C-%E7%9A%84%E5%8C%BA%E5%88%AB-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h2 id="mybatis的orderby"><a href="#mybatis的orderby" class="headerlink" title="mybatis的orderby"></a>mybatis的orderby</h2><p>在使用mybatis的时候，一般来讲是使用<code>#{}</code>这种方式来设置sql的参数，因为mybatis在解析sql的时候的时候对于使用<code>#{}</code>的参数首先会解析成<code>?</code>,然后再加入参数。具体可以看mybatis的解析日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - ==&gt;  Preparing: select * from clazzentity where clazz_name = ? </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 一年级(String)</span><br></pre></td></tr></table></figure></p><p>但是在mybatis中如果需要使用groupby和orderby的话就需要注意不可以使用<code>#</code>了，因为使用<code>#</code>的话会导致解析出来的参数自动的带了一个引号,而使用<code>$</code>的话就会直接把参数带进去，所以在进行groupby的时候是需要使用<code>$</code>来进行参数的替换的。但是在使用${}这个的时候需要注意下。</p><h1 id="mybatis的多参数和单参数"><a href="#mybatis的多参数和单参数" class="headerlink" title="mybatis的多参数和单参数"></a>mybatis的多参数和单参数</h1><h3 id="单参数"><a href="#单参数" class="headerlink" title="单参数"></a>单参数</h3><p>mybatis的单参数一般来讲是会自动被识别的，<code>#</code>的话直接可以加参数名称，<code>$</code>的话则是使用<code>_paramter</code>来接收</p><h3 id="多参数"><a href="#多参数" class="headerlink" title="多参数"></a>多参数</h3><h4 id="param"><a href="#param" class="headerlink" title="param"></a>param</h4><p>mybatis中若需要使用多参数的话要么使用<code>@param</code>注解，要么使用集合或者对象来作为参数,其代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map&lt;String,Object&gt;&gt; queryStudnet2(<span class="meta">@Param</span>(<span class="string">"CLAZZID"</span>) String clazzId ,<span class="meta">@Param</span>(<span class="string">"name"</span>) String name);</span><br></pre></td></tr></table></figure></p><p>而其配置文件则如下图所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStudnet2"</span> <span class="attr">resultType</span>=<span class="string">"java.util.HashMap"</span> &gt;</span></span><br><span class="line">        select count(CLAZZ_ID) as 'id' , CLAZZ_ID from student GROUP by $&#123;CLAZZID&#125; order by $&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在${}里面的参数全部是@Param,所以这是一种多参数传递方式，同时这种方式进行传参的话#和$都可以解析，</p><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>List的传参应该只是适用于foreach迭代,也就是需要动态的执行多条语句的时候才会使用List</p><h4 id="Java对象"><a href="#Java对象" class="headerlink" title="Java对象"></a>Java对象</h4><p>而Java对象传参的话在入参的地方需要加入Java对象的实体类，但是在查询需要返回结果的时候可以通过resultMap接收，不是一个map也可以是一个Java对象也可以接收，但是需要注意的是通过Java对象接收的话要java字段和sql的字段映射。一种就是已经说了的resultMap，另一种就是数据库返回字段设置别名然后让其返回的是Java对象的字段</p><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>map则适用于多参数传递，类似于java对象<br>通过map传递参数的话是最常见的一种方式在传入<code>#{}</code>的动态参数，但是在使用map的方式的时候需要注意，通过map传值的话，用<code>${}</code>是接受不到的，会直接抛出异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### Error querying database.  Cause: org.apache.ibatis.builder.BuilderException: Error evaluating expression &apos;_paramter.clazz&apos;. Cause: org.apache.ibatis.ognl.OgnlException: source is null for getProperty(null, &quot;clazz&quot;)</span><br><span class="line">### Cause: org.apache.ibatis.builder.BuilderException: Error evaluating expression &apos;_paramter.clazz&apos;. Cause: org.apache.ibatis.ognl.OgnlException: source is null for getProperty(null, &quot;clazz&quot;)</span><br></pre></td></tr></table></figure></p><p>所以map传值的话最好是传入需要<code>#{}</code>接受的参数</p><h4 id="索引传参"><a href="#索引传参" class="headerlink" title="索引传参"></a>索引传参</h4><p>仅适用于#<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStudnet3"</span> <span class="attr">resultType</span>=<span class="string">"java.util.HashMap"</span> &gt;</span></span><br><span class="line">        select count(CLAZZ_ID) as 'id' , CLAZZ_ID from student GROUP by #&#123;arg0&#125; order by #&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Java代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Dao层代码</span></span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; queryStudnet3(String clazzId ,String name);</span><br><span class="line"><span class="comment">//实际方法</span></span><br><span class="line"> List&lt;Map&lt;String,Object&gt;&gt; list =clazz.queryStudnet3(<span class="string">"CLAZZ_ID"</span>,<span class="string">"id"</span>);</span><br></pre></td></tr></table></figure></p><p>通过这个方式传参的话需要注意mybatis的提示使用<code>arg0</code>还是<code>param</code></p><h1 id="异常汇总"><a href="#异常汇总" class="headerlink" title="异常汇总"></a>异常汇总</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cause: org.apache.ibatis.executor.ExecutorException: A query was run and no Result Maps were found for the Mapped Statement &apos;study.dao.clazzStudent.queryStudnet2&apos;.  It&apos;s likely that neither a Result Type nor a Result Map was specified</span><br></pre></td></tr></table></figure><p>这个表示若返回的是一个集合的话需要制定下返回的类型。其代码如下所示：</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python2.7使用Pandas连接数据库</title>
      <link href="/2018/04/11/PPython2-7%E4%BD%BF%E7%94%A8Pandas%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/04/11/PPython2-7%E4%BD%BF%E7%94%A8Pandas%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>今天遇到一个需求，需要将Excel中的一些数据导入到mysql中，由于之前接触到了Python的Pandas，所以这个时候便想到了Python，但是连接数据库的时候出现了问题，所以便写一个文章记录下。</p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><ol><li>下载Mysql_Python的一个exe文件</li><li>注意<code>tosql</code>的这个方法使用的类。pd.io.sql.to_sql</li><li>注意添加<code>index=False</code>防止出现出入的时候多了一个index</li></ol><h2 id="sqlalchemy方式连接"><a href="#sqlalchemy方式连接" class="headerlink" title="sqlalchemy方式连接"></a>sqlalchemy方式连接</h2><h3 id="导入库"><a href="#导入库" class="headerlink" title="导入库"></a>导入库</h3><p>由于使用的版本是Python2.7.14，所以在安装<code>MySQLdb</code>的时候一直出现问题，大意就是说需要升级pip，但是pip已经升级了。所以去网上查询解决办法是需要安装一个文件<code>Mysql-Python。。。.exe</code>但是这里需要注意版本，官网下载的是win32的，所以导致一直识别不到Python2.7的路径，导致<code>MySQLdb</code>这个一直安装不上。</p><p>另外需要导入的库就是Pandas了</p><h3 id="to-sql"><a href="#to-sql" class="headerlink" title="to_sql()"></a>to_sql()</h3><p>在查看官网API(pandas1.6.0版本)的时候，发现是pd.to_sql()，但是实际上这里是<code>pd.io.sql.to_sql()</code>,参数还是不变。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ins</span><span class="params">(cls)</span>:</span></span><br><span class="line">    xls = pd.ExcelFile(U<span class="string">'C:\\Users\\SZH\\Desktop\\aaa\\product表.xlsx'</span>)</span><br><span class="line">    previous_score_csv_file = xls.parse(U<span class="string">'Sheet1'</span>);</span><br><span class="line">    conn = create_engine(<span class="string">'mysql+mysqldb://root:root//@localhost:3306/vendor?charset=utf8'</span>)</span><br><span class="line">    pd.io.sql.to_sql(previous_score_csv_file,<span class="string">"product"</span>,conn,if_exists=<span class="string">'append'</span>,index=<span class="keyword">False</span>)</span><br><span class="line">    <span class="comment"># c.commit()</span></span><br><span class="line">    <span class="keyword">print</span>  previous_score_csv_file</span><br></pre></td></tr></table></figure></p><p>最后便可以了。</p><h2 id="MySQLdb方式连接"><a href="#MySQLdb方式连接" class="headerlink" title="MySQLdb方式连接"></a>MySQLdb方式连接</h2><p>暂时找不到解决办法</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mybatis和mysql得相关记录</title>
      <link href="/2018/04/10/mybatis%E5%92%8Cmysql%E5%BE%97%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/04/10/mybatis%E5%92%8Cmysql%E5%BE%97%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>首先对于Mybatis来说，如果是直接复制mysql里面的语句粘贴到mybatis的mapper文件里面去的话很容易导致user读取出错，假设在mysql中<code>select * from user XX</code>，若直接把这条sql语句复制到mapper文件中的话会导致user会成为mapper文件中的关键字</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mybatis中多条语句插入和主键返回</title>
      <link href="/2018/04/09/mybatis%E4%B8%AD%E5%A4%9A%E6%9D%A1%E8%AF%AD%E5%8F%A5%E6%8F%92%E5%85%A5%E5%92%8C%E4%B8%BB%E9%94%AE%E8%BF%94%E5%9B%9E/"/>
      <url>/2018/04/09/mybatis%E4%B8%AD%E5%A4%9A%E6%9D%A1%E8%AF%AD%E5%8F%A5%E6%8F%92%E5%85%A5%E5%92%8C%E4%B8%BB%E9%94%AE%E8%BF%94%E5%9B%9E/</url>
      <content type="html"><![CDATA[<p>在Mybatis的使用中，有时候会出现需要一对多的场景，尤其是在插入的过程中，即假设存在A，B两表。A表对B表是一对多的关系，在插入数据的过程中需要先插入A表，通过A表返回的主键然后再进行B表的查询，这个时候一般有两种操作。</p><blockquote><p>方法一：首先获取A表的主键，然后通过for循环进行B表的插入<br>方法二：使用mybatis的<code>foreach</code>进行多条语句的插入</p></blockquote><p>在这里的话主要是记录下第二种方法，即通过mybatis的<code>foreach</code>来实现多条语句的插入:</p><h2 id="建立数据库表"><a href="#建立数据库表" class="headerlink" title="建立数据库表"></a>建立数据库表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from clazz;</span><br><span class="line">+----------+------------+</span><br><span class="line">| CLAZZ_ID | CLAZZ_NAME |</span><br><span class="line">+----------+------------+</span><br><span class="line">|        1 | 一年级     |</span><br><span class="line">+----------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----------+--------+----------+</span><br><span class="line">| CLAZZ_ID | STU_ID | STU_NAME |</span><br><span class="line">+----------+--------+----------+</span><br><span class="line">|        1 |    101 | a        |</span><br><span class="line">|        1 |    102 | b        |</span><br><span class="line">+----------+--------+----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>在数据库建立的两张表会发现班级表和学生表是一对多的关系，此时如果一个班级需要插入许多个学生的话，此时就要使用mybatis的<code>foreach</code>进行多条语句的插入了</p><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><p>在这里得话需要插入多条语句得时候不能使用<code>#</code>，而是应该使用<code>$</code>。在这里为什么是这个美元的符号，暂时得猜测是<code>$</code>解析得为静态得，也就是说mybatis会讲集合里面的值直接填充进来，类似于在ApplicationContext.xml中动态的加载<code>jdbc.properties</code>，需要使用<code>$</code>符号。<br>新建Dao层类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">clazzStudent</span> </span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">insertToStudent</span><span class="params">(List&lt;Map&lt;String,Object&gt;&gt; map)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后建立与之对应的mapper文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertToStudent"</span> &gt;</span></span><br><span class="line">        insert into student(CLAZZ_ID,STU_ID,STU_NAME) values </span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span>  <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            ($&#123;item.get("clazz")&#125;,$&#123;item.get("stu")&#125;,$&#123;item.get("name")&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最后建立测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Logger logger = <span class="keyword">null</span>;</span><br><span class="line">        logger = Logger.getLogger(MybatisExample.class.getName());</span><br><span class="line">        logger.setLevel(Level.DEBUG);</span><br><span class="line">        SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlSession = study.mybatis.MybatisUtil.getSqlSessionFActory().openSession();</span><br><span class="line">            clazzStudent clazz = sqlSession.getMapper(clazzStudent.class);</span><br><span class="line">            List&lt;Map&lt;String,Object&gt;&gt; list =<span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                Map&lt;String,Object&gt; itemmap =<span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">                itemmap.put(<span class="string">"clazz"</span>,<span class="number">1</span>);</span><br><span class="line">                itemmap.put(<span class="string">"stu"</span>,i);</span><br><span class="line">                itemmap.put(<span class="string">"name"</span>,<span class="string">"'adsads'"</span>);</span><br><span class="line">                list.add(itemmap);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> n=clazz.insertToStudent(list);</span><br><span class="line">            System.out.println(n);</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>在这里需要注意得是<code>&lt;foreach collection=&quot;list&quot; item=&quot;item&quot;  index=&quot;index&quot; separator=&quot;,&quot;&gt;</code>在这个里面的话<code>collection=&quot;list&quot;</code>这里的list其实不需要和main方法中得list名称对应，也就是说在Java得main方法中将<code>List&lt;Map&lt;String,Object&gt;&gt; list =new ArrayList&lt;Map&lt;String, Object&gt;&gt;()</code>这个list改成list1也可以插入多条语句，这里参数<code>list</code>与<code>collection</code>中得名称无关。</p><h3 id="separator"><a href="#separator" class="headerlink" title="separator"></a>separator</h3><p>分隔符，作用是foreach下面的语句执行完了之后之后用什么进行分割。而<code>item</code>则代表得是里面得那个map，</p><h3 id="index"><a href="#index" class="headerlink" title="index"></a>index</h3><p>index代表的是索引，目前暂时没用到，所以就写一个索引</p><h2 id="利用Java对象进行迭代"><a href="#利用Java对象进行迭代" class="headerlink" title="利用Java对象进行迭代"></a>利用Java对象进行迭代</h2><p>修改代码之后也可以利用Java对象进行传参<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Logger logger = <span class="keyword">null</span>;</span><br><span class="line">      logger = Logger.getLogger(MybatisExample.class.getName());</span><br><span class="line">      logger.setLevel(Level.DEBUG);</span><br><span class="line">      SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          sqlSession = study.mybatis.MybatisUtil.getSqlSessionFActory().openSession();</span><br><span class="line">          clazzStudent clazz = sqlSession.getMapper(clazzStudent.class);</span><br><span class="line">          List&lt;Student&gt; list1 =<span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">           Student student =<span class="keyword">new</span> Student();</span><br><span class="line">           student.setCLAZZ_ID(<span class="number">1</span>);</span><br><span class="line">           student.setSTU_ID(i);</span><br><span class="line">           student.setSTU_NAME(<span class="string">"测试"</span>);</span><br><span class="line">           list1.add(student);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">int</span> n=clazz.insertToStudentPojo(list1);</span><br><span class="line">          System.out.println(n);</span><br><span class="line">          sqlSession.commit();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          sqlSession.close();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><p>但是使用对象传参的话需要注意得是在mapper文件中使用<code>#</code>符号，修改如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertToStudentPojo"</span>&gt;</span></span><br><span class="line">        insert into student(CLAZZ_ID,STU_ID,STU_NAME) values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span>  <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            (#&#123;item.CLAZZ_ID&#125;,#&#123;item.STU_ID&#125;,#&#123;item.STU_NAME&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="用List传值："><a href="#用List传值：" class="headerlink" title="用List传值："></a>用List传值：</h2><p>新建Dao层方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Integer <span class="title">insertToStudentList</span><span class="params">(List&lt;String&gt; list)</span></span>;</span><br></pre></td></tr></table></figure></p><p>新建mapper方法：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertToStudentList"</span>&gt;</span></span><br><span class="line">       insert into student(STU_NAME) values</span><br><span class="line">       <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span>  <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">           ($&#123;item&#125;)</span><br><span class="line">       <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>测试方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">insertList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Logger logger = <span class="keyword">null</span>;</span><br><span class="line">        logger = Logger.getLogger(MybatisExample.class.getName());</span><br><span class="line">        logger.setLevel(Level.DEBUG);</span><br><span class="line">        SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlSession = study.mybatis.MybatisUtil.getSqlSessionFActory().openSession();</span><br><span class="line">            clazzStudent clazz = sqlSession.getMapper(clazzStudent.class);</span><br><span class="line">            List&lt;String&gt; list1 =<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">             list1.add(String.valueOf(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> n=clazz.insertToStudentList(list1);</span><br><span class="line">            System.out.println(n);</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>在这里需要对Java对象传参使用得<code>#</code>和map传参得<code>$</code>进行一下区分。可以看下打印日志：<br>java对象传参使用<code>#</code>传参得日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - ==&gt;  Preparing: insert into student(CLAZZ_ID,STU_ID,STU_NAME) values (?,?,?) , (?,?,?) , (?,?,?) </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 1(Integer), 0(Integer), 测试(String), 1(Integer), 1(Integer), 测试(String), 1(Integer), 2(Integer), 测试(String)</span><br><span class="line">DEBUG [main] - &lt;==    Updates: 3</span><br></pre></td></tr></table></figure></p><p>java使用List<map>进行传参:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - ==&gt;  Preparing: insert into student(CLAZZ_ID,STU_ID,STU_NAME) values (1,0,&apos;adsads&apos;) , (1,1,&apos;adsads&apos;) , (1,2,&apos;adsads&apos;) </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: </span><br><span class="line">DEBUG [main] - &lt;==    Updates: 3</span><br><span class="line">3</span><br></pre></td></tr></table></figure></map></p><p>可以看到打印出来的日志发现<code>$</code>和<code>#</code>在解析上得区别，<code>$</code>这个是先解析，生成了一个sql之后再执行，而<code>#</code>则是一个占位符，是在后期的时候动态加入的。</p><h2 id="主键返回"><a href="#主键返回" class="headerlink" title="主键返回"></a>主键返回</h2><p>mybatis的主键返回目前仅仅了解通过对象来返回。需要在mapper文件中加入一行配置即可：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertToStudentPojo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"CLAZZ_ID"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">            select LAST_INSERT_ID()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into student(CLAZZ_ID,STU_ID,STU_NAME) values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span>  <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            (#&#123;item.CLAZZ_ID&#125;,#&#123;item.STU_ID&#125;,#&#123;item.STU_NAME&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>keyProperty=&quot;CLAZZ_ID&quot;</code>表示的是需要返回的字段的值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pojo</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Logger logger = <span class="keyword">null</span>;</span><br><span class="line">       logger = Logger.getLogger(MybatisExample.class.getName());</span><br><span class="line">       logger.setLevel(Level.DEBUG);</span><br><span class="line">       SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           sqlSession = study.mybatis.MybatisUtil.getSqlSessionFActory().openSession();</span><br><span class="line">           clazzStudent clazz = sqlSession.getMapper(clazzStudent.class);</span><br><span class="line">           List&lt;Student&gt; list1 =<span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            Student student =<span class="keyword">new</span> Student();</span><br><span class="line">            student.setCLAZZ_ID(<span class="number">1</span>);</span><br><span class="line">            student.setSTU_ID(i);</span><br><span class="line">            student.setSTU_NAME(<span class="string">"测试"</span>);</span><br><span class="line">            list1.add(student);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">int</span> n=clazz.insertToStudentPojo(list1);</span><br><span class="line">           System.out.println(list1.get(<span class="number">2</span>).getCLAZZ_ID());</span><br><span class="line">           System.out.println(n);</span><br><span class="line">           sqlSession.commit();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           sqlSession.close();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>需要注意的是<code>System.out.println(list1.get(2).getCLAZZ_ID());</code>因为是多条语句的插入，肯定是需要返回的最后一条插入后的主键，所以通过该方法便可以得到插入后的主键</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前就暂时这么多了，源码以后再了解了。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git代码同步之间的冲突</title>
      <link href="/2018/04/08/git%E4%BB%A3%E7%A0%81%E5%90%8C%E6%AD%A5%E4%B9%8B%E9%97%B4%E7%9A%84%E5%86%B2%E7%AA%81/"/>
      <url>/2018/04/08/git%E4%BB%A3%E7%A0%81%E5%90%8C%E6%AD%A5%E4%B9%8B%E9%97%B4%E7%9A%84%E5%86%B2%E7%AA%81/</url>
      <content type="html"><![CDATA[<p>在使用git的时候单独一人进行<code>push</code>和<code>pull</code>的时候是不会出现代码冲突的，但是当团队中有多人的时候进行协作的时候难免会造成代码间同步问题。<br>具体就是git pull的时候会提示线上代码会覆盖本地的代码。然后就不让pull，最后也不让push。查询了下解决办法：</p><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line">git pull </span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><p>但是这种方法pull下来的代码会导致IDEA识别不了。也就是java文件会直接不显示，最后是关闭IDEA然后再次打开才解决这个问题的。重新导入的时候选择maven</p><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>这个方法主要应对的是push提交不上去，但是pull却又显示是线上最新版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>对Java的List转Array的源码一点思考</title>
      <link href="/2018/04/07/%E5%AF%B9Java%E7%9A%84List%E8%BD%ACArray%E7%9A%84%E6%BA%90%E7%A0%81%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
      <url>/2018/04/07/%E5%AF%B9Java%E7%9A%84List%E8%BD%ACArray%E7%9A%84%E6%BA%90%E7%A0%81%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>在Java里面，List转为Array是调用的Java的一个Arrays.copyOf()这个方法，查看了下源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(<span class="keyword">this</span>.elementData, <span class="keyword">this</span>.size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] copyOf(T[] original, <span class="keyword">int</span> newLength) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T[]) copyOf(original, newLength, original.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class="line">            ? (T[]) <span class="keyword">new</span> Object[newLength]</span><br><span class="line">            : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">        System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                         Math.min(original.length, newLength));</span><br><span class="line">        <span class="keyword">return</span> copy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newInstance</span><span class="params">(Class&lt;?&gt; componentType, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NegativeArraySizeException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newArray(componentType, length);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>在这里需要注意的是在copyOf()方法中的那个三元表达式，也就是说在这里无论执行的true还是false，都会返回一个新的数组对象。而在这里有一行代码就是<code>((Object)newType == (Object)Object[]).class)，这一句看起来没什么，其实可以看参数</code>Class&lt;? extends T[]&gt; newType<code>和</code>Object<code>会发现这两个数组对象都被强转成了</code>Object<code>，而</code>==`比较符是不能比较不同类型的。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">te</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ad"</span> == <span class="number">2</span>);</span><br><span class="line">        System.out.println((String.class == Object.class));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码在代码的编译期就会被提示<code>==</code>不可以适用于上述的两种情况.如下：<br><img src="不可转截图.png" alt=""></p><p>那么回到正题，这里其实仔细看就会发现无论是否相等，在这里三元表达式中，都会返回一个新的数组对象，那么在这里加入了三元表达式的想法是<code>newInstance()</code>是通过反射进行创建的，而<code>new Object[]</code>则是非反射创建的.</p><blockquote><p>Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations can not be performed. Consequently, reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications.</p></blockquote><p>所以在这里加一个判断使代码尽量通过非反射的方式进行创建。最后调用<code>System.arraycopy()</code>,但是这里的都已经强转成了Object，应该不会有失败的情况</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初识7层模型和5层模型</title>
      <link href="/2018/04/06/%E5%88%9D%E8%AF%867%E5%B1%82%E6%A8%A1%E5%9E%8B/"/>
      <url>/2018/04/06/%E5%88%9D%E8%AF%867%E5%B1%82%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>今天突然想知道在访问一个网站的时候那些请求头是在何时被加上去的。例如访问百度的时候，<code>host</code>和<code>refer</code>或者其他的字段是在七层模型的哪一层被加入的。</p><h2 id="Wireahark抓包"><a href="#Wireahark抓包" class="headerlink" title="Wireahark抓包"></a>Wireahark抓包</h2><p>在这里尝试了下百度的抓包，但是百度的是是HTTPS的连接，导致一直找不到那个HTTP连接，所以还是放弃了，但是随后又找了一个非HTTPS的网站，进行抓包，然后测试了下，发现可以</p><h2 id="解析抓包"><a href="#解析抓包" class="headerlink" title="解析抓包"></a>解析抓包</h2><p>这是用wireshark抓取的结果：<br><img src="超文本传输协议.PNG" alt=""><br><img src="协议详情.PNG" alt=""><br>却发现这里多了一个<code>Hypertext Transfer Protocol</code>，在这里的话因为是GET请求，所以准备用POST请求再次尝试：<br><img src="http.PNG" alt=""><br>发现其实内容都差不多，那也就证明了这些请求头都是在应用层被添加进去的。<br>那么在这些抓包中可以看到他的层次是5层，而并非是7层模型。在这里的的五层模型分别是<code>物理层</code>,<code>数据连续层</code>,<code>网络层</code>,<code>传输层</code>,<code>应用层</code>。相较于7层的OSI模型少了<code>会话层</code>和<code>表示层</code>。</p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>其实与代码打交道的那一层是应用层。可以发现在Java代码中可以通过Response.setXXX来设置请求头或者回复头等。这也就从旁边来证明了我们所编写的程序其实都是在应用层。</p>]]></content>
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring通过序列化返回json数据</title>
      <link href="/2018/04/05/Spring%E9%80%9A%E8%BF%87%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%94%E5%9B%9Ejson%E6%95%B0%E6%8D%AE/"/>
      <url>/2018/04/05/Spring%E9%80%9A%E8%BF%87%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%94%E5%9B%9Ejson%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>一般来讲在Spring中可以直接加@ResponeBody来直接返回Json格式的数据，但是这样又有点别扭，因为Stirng同时也可以返回视图名称，但是加了@ResponseBody之后便可以返回Json了，为了解决这个问题还有一种解决办法就是指定一个Result来实现序列化接口然后直接返回这个对象，最后在spring-mvc.xml这个配置文件中配置解析器就可以了。</p><h2 id="添加依赖："><a href="#添加依赖：" class="headerlink" title="添加依赖："></a>添加依赖：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置spring-mvc-xml依赖："><a href="#配置spring-mvc-xml依赖：" class="headerlink" title="配置spring-mvc.xml依赖："></a>配置spring-mvc.xml依赖：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写实体类："><a href="#编写实体类：" class="headerlink" title="编写实体类："></a>编写实体类：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonResult</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; result;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        code =<span class="number">200</span>;</span><br><span class="line">        result =<span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParamter</span><span class="params">(String key ,String value)</span></span>&#123;</span><br><span class="line">        result.put(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里需要注意下的是如果到时候需要返回对象的时候自动解析这个类需要添加get方法并且实现序列化接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"jsonresult"</span>)</span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> JsonResult <span class="title">testJsonResult</span><span class="params">()</span></span>&#123;</span><br><span class="line">      JsonResult jsonResult =<span class="keyword">new</span> JsonResult();</span><br><span class="line">      jsonResult.setParamter(<span class="string">"msg"</span>,<span class="string">"这是一个测试的demo"</span>);</span><br><span class="line">      <span class="keyword">return</span> jsonResult;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><p><img src="序列化.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java泛型的一些思考</title>
      <link href="/2018/04/04/java%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
      <url>/2018/04/04/java%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<h2 id="为什么需要泛型"><a href="#为什么需要泛型" class="headerlink" title="为什么需要泛型"></a>为什么需要泛型</h2><p>在Java中其实Object这个类已经可以解决大部分的泛型问题了，那么现在为什么还需要泛型了，一种说法是为了安全，因为在编译期使用泛型的话便可以基本确定这个参数的类型了，但是使用Object的话，由于Object是所有类型的超类，所以这会给代码造成一定的安全性问题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;T&gt; list1 =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="string">"1"</span>);</span><br><span class="line">        list.add(t);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>在上面的例子中，<code>list1</code>由于其类型是T，这就会导致在向<code>list1</code>中插入数据的时候只能是泛型T，但是对于<code>list</code>而言，由于Object是所有类的超类，那么这个list就可以插入任何值了，所以这就导致了一些安全问题</p><h2 id="关于Java的协变和逆变："><a href="#关于Java的协变和逆变：" class="headerlink" title="关于Java的协变和逆变："></a>关于Java的协变和逆变：</h2><p>在Java里面数组是协变的。对于数组来讲一个Object数组是可以存放任何值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object[] o =<span class="keyword">new</span> Object[<span class="number">12</span>];</span><br><span class="line">o[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">o[<span class="number">1</span>]=<span class="string">"1"</span>;</span><br></pre></td></tr></table></figure></p><p>而对于集合来说呢？显然一个List肯定是不允许同时存放<code>int</code>和<code>String</code>,所以对于集合来讲得话，它就不是协变得。<br>这是因为集合在运行得时候有一个类型擦除，也就是说<code>List&lt;String&gt;</code>最后在编译器看来就是一个List，也就是它的原生类型。所以对于集合来讲得话就是一个逆变得。</p><h2 id="泛型得用处"><a href="#泛型得用处" class="headerlink" title="泛型得用处"></a>泛型得用处</h2><p>泛型有什么用呢？或者说泛型得优缺点在哪里呢？<br>泛型由于在编译期并不知道他会是什么类，所以泛型在构造得时候是一个非常麻烦的事情，类似于如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T t1 =<span class="keyword">new</span> T();</span><br></pre></td></tr></table></figure></p><p>这行代码明显是错误得，为什么呢？因为T在编译期间并不知道这个是什么类，既然都不知道这个是什么类，那么又怎会知道调用哪一个构造函数呢？</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于字符串回文的Manacher算法</title>
      <link href="/2018/04/04/%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9B%9E%E6%96%87%E7%9A%84%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/"/>
      <url>/2018/04/04/%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9B%9E%E6%96%87%E7%9A%84%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>对于<code>Manacher</code>算法自己研究了一会，总算是理解了其中的含义，乘着有时间正好可以过来记录下：</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ol><li>将字符串变成奇数，通过加非字符串里面的符号表示，不过一般都是加的<code>#</code></li><li>找出以当前索引为中点的最长回文数长度，并且记录，例如：<code>#a#b#a</code>,这个字符串所对应的长度便是[1,2,1,2,1,1],因为在<code>#</code>的时候组成不了回文，所以<code>#</code>这里是1，而到了<code>a</code>这里，因为<code>#a#</code>组成了回文，所以<code>a</code>的最长回文字符串长度是2,以此类推</li><li>for循环开始比较，在这里一般来讲是首先需要定义一个字符串的边界变量，以防止数组越界，另外一个就是最长回文字符串的中点坐标，以此类推就可以</li></ol><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><p>将填充符号计入到需要匹配的的字符串中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最大回文串的数组</span></span><br><span class="line">        StringBuilder sb =<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">"#"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;str.length() ;i++)&#123;</span><br><span class="line">            sb.append(str.charAt(i));</span><br><span class="line">            sb.append(<span class="string">"#"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String s1 =sb.toString();</span><br></pre></td></tr></table></figure></p><p>然后再定义一个最大的字符串长度和一个最长回文字符串的中点位置的坐标<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> array=[s1.length()];</span><br><span class="line"><span class="keyword">int</span> maxRight =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> mid =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;s1.length() ;i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> r=<span class="number">1</span>; <span class="comment">//定义最小的半径</span></span><br><span class="line">    <span class="keyword">if</span>(i&gt; maxRight)&#123;</span><br><span class="line">        r=Math.min(array[<span class="number">2</span>*mid -i ],maxRight-i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//以此为中心点继续扩张</span></span><br><span class="line">    <span class="keyword">while</span>(i - r &gt; &gt;<span class="number">0</span> &amp;&amp; i+r &lt;s1.length() &amp;&amp; s1.charAt(i-r) == s1.charAt(i+r) )&#123;</span><br><span class="line">        r++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在这里需要减一的原因是因为需要将当前的多加一去除掉，因为i算了一遍当前的索引,r又算了一遍当前的索引</span></span><br><span class="line">    <span class="keyword">if</span>(i+r -<span class="number">1</span> &lt;right)&#123;</span><br><span class="line">        right =i +r -<span class="number">1</span>;</span><br><span class="line">        mid =i;</span><br><span class="line">    &#125;</span><br><span class="line">    array[i]=r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//或者可以将for循环修改为如下：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (array[mid] + mid &gt; i) &#123;</span><br><span class="line">            r = Math.min(array[<span class="number">2</span> * mid - i], array[mid] + mid - i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i - r &gt; <span class="number">0</span> &amp;&amp; i + r &lt; s1.length() &amp;&amp; s1.charAt(i - r) == s1.charAt(r + i)) &#123;</span><br><span class="line">            ++r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mid + array[mid] &lt; array[i] + r) &#123;</span><br><span class="line">            mid = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r &gt; maxLength) &#123;</span><br><span class="line">            maxLength = r;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//            if(i+r -1 &gt;maxLength)&#123;</span></span><br><span class="line"><span class="comment">//                maxLength =i+r-1;</span></span><br><span class="line"><span class="comment">//                mid=i;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            array[i] = r;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>简单一点的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;s1.length() ;i++)&#123;</span><br><span class="line">   r=Math.min(array[<span class="number">2</span>*mid -i],right -i):<span class="number">1</span>;</span><br><span class="line">   <span class="comment">//这种情况考虑的是当前索引位置再最长回文字符串之间，而且这个索引说不定还有更长的回文字符串，所以在这里需要一个while判断</span></span><br><span class="line">   <span class="keyword">while</span>(array[i-array[i]] == array[i+array[i]]) ++r; </span><br><span class="line">   <span class="keyword">if</span>( i +array[i] &gt;right)&#123;</span><br><span class="line">       right =i+array[i];</span><br><span class="line">       array[i]=r;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中为什么是非要<code>array[i-array[i]] == array[i+array[i]]</code>相等才会进行半径的增加呢？这里其实有几种情况需要考虑的</p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>字符串匹配相关算法</title>
      <link href="/2018/04/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/"/>
      <url>/2018/04/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>今天无意间碰到了需要写子字符串匹配得算法，由于以前一直对字符串得KMP算法不太了解，所以今天趁着这个机会正好记录下这三种算法的差异：</p><ol><li>JavaApi实现</li><li>朴素字符串匹配算法</li><li>KMP算法</li></ol><h2 id="Java的API实现子字符串查找："><a href="#Java的API实现子字符串查找：" class="headerlink" title="Java的API实现子字符串查找："></a>Java的API实现子字符串查找：</h2><p>在Java的String类里面有一个方法是<code>indexof(str,index)</code>, 这个类的话是可以从一个字符串的指定位置查出是否包含子字符串，若不包含则返回的是-1，若包含的话则返回的是该子字符串在字符串中的索引位置。 那么这个算法是什么原理呢，这个算法的原理就是<code>indexof</code>会返回匹配到的字符串的索引，那么当这个算法匹配到了一个之后获取返回的索引，然后再加上字符串的长度，最后再在剩下的字符串里面匹配，便会得出所有的字符串个数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">        String findText= &quot;abcd&quot;;</span><br><span class="line">        String srcText =&quot;mabcdfafasabcdfa&quot;;</span><br><span class="line">        int count = 0;</span><br><span class="line">        int index = 0;</span><br><span class="line">        while ((index = srcText.indexOf(findText, index)) != -1) &#123;</span><br><span class="line">        index = index + findText.length();</span><br><span class="line">         count++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="朴素字符串匹配算法："><a href="#朴素字符串匹配算法：" class="headerlink" title="朴素字符串匹配算法："></a>朴素字符串匹配算法：</h2><p>这个算法就是两层循环，首先第一层循环便利需要字符串，获取第一个字符，然后进行第二层的循环，第二层的循环主要是进行子字符串，当子字符串的第一个字符和外面的字符串当前的字符相同的话，然后进行子字符串的第二个字符与外层的当前位置的第二个字符比较：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public void test1()&#123;</span><br><span class="line">       String a =&quot;abcd&quot;;</span><br><span class="line">       String b=&quot;qweabcdaefgadfabcdojfojaofoafjabcdafsaf&quot;;</span><br><span class="line">       int count=0;</span><br><span class="line">       for(int i =0 ;i&lt;b.length() ;i++)&#123;</span><br><span class="line">           int index=i;</span><br><span class="line">           boolean flag =false;</span><br><span class="line">           for(int j=0;j&lt;a.length() ;j++)&#123;</span><br><span class="line">               char c =b.charAt(index);</span><br><span class="line">               if(a.charAt(j) == c)&#123;</span><br><span class="line">                   index++;</span><br><span class="line">               &#125;else&#123;</span><br><span class="line">                   flag=true;</span><br><span class="line">                   break;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           if(!flag) &#123;</span><br><span class="line">               count++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>在这个里面需要注意的就是外层的i需要保存，同时里面的循环j是不需要的，因为子字符串是每一次都会遍历的。</p><h2 id="KMP算法："><a href="#KMP算法：" class="headerlink" title="KMP算法："></a>KMP算法：</h2><p>kmp算法所解决的问题是朴素字符串匹配算法每次匹配失败之后都要从头再来进行匹配的一个难点。在KMP算法中的： 匹配失败的话首先会检查匹配失败的头一个字符的的前缀和后缀，然后用以匹配的字符数减去其前缀和后缀的那个值，最后得出需要后退的数字，最后再在退出的步数上进同样的操作，最后再得出结论，当子字符串的第一个字符都不相匹配的时候最后子字符串整体后移一位。</p><h3 id="关于Next数组的求法："><a href="#关于Next数组的求法：" class="headerlink" title="关于Next数组的求法："></a>关于Next数组的求法：</h3><p>今天看了下资料总算了解了写KMP的Next数组的求法。现在一般来讲是有两种求法，第一种是求出匹配失败后的跳转索引的数组。第二种则是求出数组中已经匹配的前后缀的数组。这两种数组的求法都会导致再以后的计算出现不同的结果，但是最后还是需要用到的一个原理就是匹配失败：回退步数就是已经匹配的字符数减去匹配的前后缀字符数。最后得出回退步数。</p><p>目前来讲有两种next数组的求法：</p><ol><li>将前缀后缀匹配数放置到数组中</li><li>将失败后回退的位置放置在数组中</li></ol><p>对于第一种next数组来说，网上的资料多是将其后移一位，例如字符串<code>abcab</code>他的前缀和后缀数组是[0,0,0,1,2]，那么网上其他人的写法多是将这个数组再右移一位,最后为[-1,0,0,0,1]。在今天，也自己尝试了写KMP算法，但是自己的写法没有做右移操作，而是直接求解，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateNextArray</span><span class="params">(String str ,<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == str || str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">        array[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; j &lt; str.length(); ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i) == str.charAt(j)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">                array[j - <span class="number">1</span>] = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i!= <span class="number">0</span> &amp;&amp; j!=<span class="number">0</span>) &#123;</span><br><span class="line">                i = array[i-<span class="number">1</span>];  <span class="comment">//这里需要i-1是因为最后需要数组右移一位，但是我这里没有移位，所以直接在这里减一</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                array[j]=i;</span><br><span class="line">                j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>上面这个求next数组的方法其实也挺简单的，但是这里需要注意的是第二个if和第三个的else，为什么这里会出现两个是因为这里需要注意的情况会有两种，第二个if捕获的是在后续出现了断层需要重新从0开始匹配的情况。而最后一个else则是捕获的从头开始的一种情况，具体以<code>abcdeabcdabcdeabcdfg</code>做测试便会了解。<br>而网上的其他算法不需要这三个判断是因为网上的匹配失败之后K会变成-1，然后j是不变的。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(String pattern, <span class="keyword">int</span> next[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> k = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> len = pattern.length();</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (j &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k == -<span class="number">1</span> || pattern.charAt(k) == pattern.charAt(j)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">                k++;</span><br><span class="line">                next[j] = k;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                k = next[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>也就是说网上的一旦匹配失败，k就会变成next[next[k]]的值。</p><h2 id="JDK中的indexOf方法："><a href="#JDK中的indexOf方法：" class="headerlink" title="JDK中的indexOf方法："></a>JDK中的indexOf方法：</h2><p>再Java中的<code>indexOf</code>方法则是使用的朴素字符串匹配算法。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">char</span>[] source, <span class="keyword">int</span> sourceOffset, <span class="keyword">int</span> sourceCount,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">char</span>[] target, <span class="keyword">int</span> targetOffset, <span class="keyword">int</span> targetCount,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> fromIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fromIndex &gt;= sourceCount) &#123;</span><br><span class="line">            <span class="keyword">return</span> (targetCount == <span class="number">0</span> ? sourceCount : -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            fromIndex = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (targetCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fromIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> first = target[targetOffset];</span><br><span class="line">        <span class="keyword">int</span> max = sourceOffset + (sourceCount - targetCount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = sourceOffset + fromIndex; i &lt;= max; i++) &#123;</span><br><span class="line">            <span class="comment">/* Look for first character. */</span></span><br><span class="line">            <span class="keyword">if</span> (source[i] != first) &#123;</span><br><span class="line">                <span class="keyword">while</span> (++i &lt;= max &amp;&amp; source[i] != first);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Found first character, now look at the rest of v2 */</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt;= max) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> end = j + targetCount - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = targetOffset + <span class="number">1</span>; j &lt; end &amp;&amp; source[j]</span><br><span class="line">                        == target[k]; j++, k++);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (j == end) &#123;</span><br><span class="line">                    <span class="comment">/* Found whole string. */</span></span><br><span class="line">                    <span class="keyword">return</span> i - sourceOffset;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在Mybatis中使用bind进行枚举和模糊查询</title>
      <link href="/2018/04/01/%E5%9C%A8Mybatis%E4%B8%AD%E4%BD%BF%E7%94%A8bind%E8%BF%9B%E8%A1%8C%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/"/>
      <url>/2018/04/01/%E5%9C%A8Mybatis%E4%B8%AD%E4%BD%BF%E7%94%A8bind%E8%BF%9B%E8%A1%8C%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<p>首先在网上查询了下关于bind得用法，网上大多数都是bind和模糊查询绑定在一起，但是在这里的话其实bind和枚举一起结合起来使用会有很大的便利，比如一个班级的名称和班级的ID，需要根据班级的ID查询出班级的姓名的话，一般在mybatis中的sql语句是<code>select * from table where class_id =#{class_id}</code> 但是这样就有一个问题，假设学校现在系统升级，每一个班级的ID都变了，这时候需要到处修改mybatis的参数，将其修改成为正确的ID,那么这是一个浩大的工程，同时如果以后再需要改的话，会比较麻烦。处理这个问题，这个时候有如下方法：</p><ol><li>枚举和<code>typehandle</code>组合解决问题；</li><li>枚举和<code>bind</code>一起组合解决；</li><li>暂时没想到</li></ol><p>##枚举和bind组合解决：<br>新建一个实体类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">clazzEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String clazz_name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> clazz_id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">clazzEntity</span><span class="params">(String clazz_name, <span class="keyword">int</span> clazz_id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clazz_name = clazz_name;</span><br><span class="line">        <span class="keyword">this</span>.clazz_id = clazz_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getClazz_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clazz_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClazz_name</span><span class="params">(String clazz_name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clazz_name = clazz_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getClazz_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clazz_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClazz_id</span><span class="params">(<span class="keyword">int</span> clazz_id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clazz_id = clazz_id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新建一个枚举类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> clazz &#123;</span><br><span class="line">    CLASS_ONE(<span class="string">"一年级"</span>,<span class="number">2018001</span>),CLASS_TWO(<span class="string">"一年级"</span>,<span class="number">2018002</span>),CLASS_THREE(<span class="string">"一年级"</span>,<span class="number">2018003</span>),CLASS_FOUR(<span class="string">"一年级"</span>,<span class="number">2018004</span>),CLASS_FIVE(<span class="string">"一年级"</span>,<span class="number">2018005</span>);</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> classId;</span><br><span class="line"></span><br><span class="line">    clazz(String className, <span class="keyword">int</span> classId) &#123;</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">        <span class="keyword">this</span>.classId = classId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClassName</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getClassId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> classId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClassId</span><span class="params">(<span class="keyword">int</span> classId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.classId = classId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新建一个mapper文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"study.dao.clazzEntityDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"clazzmap"</span> <span class="attr">type</span>=<span class="string">"study.entity.clazzEntity"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"clazz_name"</span> <span class="attr">column</span>=<span class="string">"clazz_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"clazz_id"</span> <span class="attr">column</span>=<span class="string">"clazz_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllCLass"</span> <span class="attr">resultMap</span>=<span class="string">"clazzmap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"_CLASS"</span> <span class="attr">value</span>=<span class="string">"@study.entity.clazz@CLASS_ONE.className"</span>/&gt;</span></span><br><span class="line">        select * from clazzentity where clazz_name = #&#123;_CLASS&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在这里的的那个<code>&lt;bind name=&quot;_CLASS&quot; value=&quot;@study.entity.clazz@CLASS_ONE.className&quot;/&gt;</code>代表的是已经绑定了这个枚举一年级了，而且我们在参数里面无论输入什么都不会再修改到这个sql的值了，可以做如下测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String args[]) &#123;</span><br><span class="line">       Logger logger = null;</span><br><span class="line">       logger = Logger.getLogger(MybatisExample.class.getName());</span><br><span class="line">       logger.setLevel(Level.DEBUG);</span><br><span class="line">       SqlSession sqlSession = null;</span><br><span class="line">       try &#123;</span><br><span class="line">           sqlSession = study.mybatis.MybatisUtil.getSqlSessionFActory().openSession();</span><br><span class="line">           clazzEntityDao clazzEntityDao = sqlSession.getMapper(clazzEntityDao.class);</span><br><span class="line">           List&lt;clazzEntity&gt; list =clazzEntityDao.findAllCLass(clazz.CLASS_TWO.getClassName());</span><br><span class="line">           for( clazzEntity clazzEntity :list)&#123;</span><br><span class="line">               System.out.println(clazzEntity.getClazz_id());</span><br><span class="line">           &#125;</span><br><span class="line">           sqlSession.commit();</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           sqlSession.close();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>可以发现我这里已经将参数修改为了二年级的了，但是查询结果还是会显示的是一年级的.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - ==&gt;  Preparing: select * from clazzentity where clazz_name = ? </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 一年级(String)</span><br><span class="line">TRACE [main] - &lt;==    Columns: clazz_name, clazz_id</span><br><span class="line">TRACE [main] - &lt;==        Row: 一年级, 2018001</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">2018001</span><br></pre></td></tr></table></figure></p><p>在这里其实已经可以不需要任何参数了，但是为了测试用法还是加上去了，这样的写法在以后的作用就是省的去改动大量的sql，若以后一年级的ID变了的话，那么我们只需要修改枚举的值而不需要对sql做很多的改变，这就是第一种方法，即枚举加上<code>bind</code>一起使用以减少sql语句的改动。</p><h2 id="枚举加上typehandle"><a href="#枚举加上typehandle" class="headerlink" title="枚举加上typehandle"></a>枚举加上typehandle</h2><p>明天研究下补充</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在Mybatis中使用association进行一对一查询</title>
      <link href="/2018/03/31/%E5%9C%A8Mybatis%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%B7%A6%E8%BF%9E%E6%8E%A5%E6%88%96%E8%80%85%E5%8F%B3%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/"/>
      <url>/2018/03/31/%E5%9C%A8Mybatis%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%B7%A6%E8%BF%9E%E6%8E%A5%E6%88%96%E8%80%85%E5%8F%B3%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<p>在今天主要是测试了下在mybatis中使用两种方式来进行一对一查询。在mybatis中进行普通查询的话肯定是一个JavaBean对应一个Sql语句，但是当需要进行两表或者多表之间一对一的查询的时候就需要使用mybatis中的<code>association</code>进行一对一查询，而<code>association</code>的设置一般有两种方式：</p><p>##基础类：<br>员工类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> people_id;</span><br><span class="line"><span class="keyword">private</span> String people_card;</span><br><span class="line"><span class="keyword">private</span> Role role;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPeople_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> people_id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPeople_id</span><span class="params">(<span class="keyword">int</span> people_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.people_id = people_id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPeople_card</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> people_card;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPeople_card</span><span class="params">(String people_card)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.people_card = people_card;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Role <span class="title">getRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> role;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole</span><span class="params">(Role role)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.role = role;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>权限类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span>  <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> myrole_id;</span><br><span class="line"><span class="keyword">private</span> String role_name;</span><br><span class="line"><span class="keyword">private</span>  RoleDetail roleDetail;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> RoleDetail <span class="title">getRoleDetail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> roleDetail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleDetail</span><span class="params">(RoleDetail roleDetail)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.roleDetail = roleDetail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMyrole_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> myrole_id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyrole_id</span><span class="params">(<span class="keyword">int</span> myrole_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.myrole_id = myrole_id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRole_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> role_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole_name</span><span class="params">(String role_name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.role_name = role_name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>权限描述类：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleDetail</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rd_id;</span><br><span class="line">    <span class="keyword">private</span> String rd_detail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRd_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rd_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRd_id</span><span class="params">(<span class="keyword">int</span> rd_id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rd_id = rd_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRd_detail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rd_detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRd_detail</span><span class="params">(String rd_detail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rd_detail = rd_detail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里面的话，员工和权限默认是一对一的关系(这里仅仅是为了测试，现实中肯定是一对多的关系)，权限和权限描述是一对一的关系：</p><h2 id="使用进行配置："><a href="#使用进行配置：" class="headerlink" title="使用进行配置："></a>使用<association property="XXX" javatype="XXX">进行配置：</association></h2><p>假设现在有一个需求就是需要查询出一个人的信息以及其对应的权限，这时在数据库中就是一个左连接和右连接的事情，但是在Mybatis中因为是一个JavaBean和数据库相映射，所以，此时就需要一个一对一查询：新建一个RoleDao的xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"study.dao.RoleDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>由于是需要在查询员工的时候顺带将其权限也查出来，所以这个时候需要在people的xml文件中使用<code>association</code>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"study.dao.PeopleDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"study.entity.People"</span> <span class="attr">id</span>=<span class="string">"people"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"people_id"</span> <span class="attr">column</span>=<span class="string">"people_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"people_card"</span> <span class="attr">column</span>=<span class="string">"people_card"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"role"</span> <span class="attr">javaType</span>=<span class="string">"study.entity.Role"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"myrole_id"</span> <span class="attr">column</span>=<span class="string">"myrole_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"role_name"</span> <span class="attr">column</span>=<span class="string">"role_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getPeopleCard"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"people"</span>&gt;</span></span><br><span class="line">        select p.people_id,p.people_card,m.* from people p, mybatisrole m where people_id=#&#123;role_id&#125; and  p.role_id  =m.myrole_id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--  select p.people_id,p.people_card,m.* from people p, mybatisrole m where people_id=#&#123;role_id&#125; -- &gt;</span></span><br></pre></td></tr></table></figure></p><p>注意上面<code>association</code>中的property，这是people中的一个属性，而<code>javaType</code>则代表的是这个是一个什么类型；测试查看结果:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisExample</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">Logger logger = <span class="keyword">null</span>;</span><br><span class="line">logger = Logger.getLogger(MybatisExample.class.getName());</span><br><span class="line">logger.setLevel(Level.DEBUG);</span><br><span class="line">SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">sqlSession = study.mybatis.MybatisUtil.getSqlSessionFActory().openSession();</span><br><span class="line"></span><br><span class="line">PeopleDao peopleDao = sqlSession.getMapper(PeopleDao.class);</span><br><span class="line">List&lt;People&gt; list = peopleDao.getPeopleCard(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(People p : list) &#123;</span><br><span class="line">System.out.println(p.getRole().getRole_name());</span><br><span class="line">&#125;</span><br><span class="line">sqlSession.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打印结果:</p><blockquote><p>DEBUG [main] - ==&gt;  Preparing: select p.people_id,p.people_card,m.* from people p, mybatisrole m where people_id=?<br>DEBUG [main] - ==&gt; Parameters: 1(Integer)<br>TRACE [main] - &lt;==    Columns: people_id, people_card, myrole_id, role_name<br>TRACE [main] - &lt;==        Row: 1, qw, 1, a<br>DEBUG [main] - &lt;==      Total: 1<br>a</p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a><association property="XXX" column="XX" select="XXX"></association></h2><p>当使用如上这种配置的时候会执行2次不同的sql：<br><strong>RoleDetailmapper.xml</strong>配置文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"study.dao.RoleDetailDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"getRd_detail"</span> <span class="attr">type</span>=<span class="string">"study.entity.RoleDetail"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"rd_id"</span> <span class="attr">column</span>=<span class="string">"rd_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"rd_detail"</span> <span class="attr">column</span>=<span class="string">"rd_detail"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDetailById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"study.entity.RoleDetail"</span>&gt;</span></span><br><span class="line">    SELECT * from roledetail where rd_id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后再<code>Rolemapper.xml</code>中调用它：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"study.dao.RoleDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"study.entity.Role"</span> <span class="attr">id</span>=<span class="string">"Role"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"myrole_id"</span> <span class="attr">column</span>=<span class="string">"myrole_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"role_name"</span> <span class="attr">column</span>=<span class="string">"role_name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"roleDetail"</span> <span class="attr">column</span>=<span class="string">"rd_id"</span> <span class="attr">select</span>=<span class="string">"study.dao.RoleDetailDao.getDetailById"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"myrole_id"</span> <span class="attr">column</span>=<span class="string">"rd_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"rd_detail"</span> <span class="attr">column</span>=<span class="string">"rd_detail"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from mybatisrole m ,roledetail r  where m.myrole_id=#&#123;id&#125; and m.myrole_id=r.rd_id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getRoleById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"Role"</span>&gt;</span></span><br><span class="line">        select * from mybatisrole m ,roledetail r where m.myrole_id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在这个地方的话<code>association</code>后跟的是column和select属性，所以在执行的时候先执行<code>getRoleById</code>,再执行<code>getDetailById</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybtisRoleExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Logger logger = <span class="keyword">null</span>;</span><br><span class="line">        logger = Logger.getLogger(MybatisExample.class.getName());</span><br><span class="line">        logger.setLevel(Level.DEBUG);</span><br><span class="line">        SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlSession = study.mybatis.MybatisUtil.getSqlSessionFActory().openSession();</span><br><span class="line">            RoleDao roleDao= sqlSession.getMapper(RoleDao.class);</span><br><span class="line">            List&lt;Role&gt; list= roleDao.getRoleById(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(Role r : list) &#123;</span><br><span class="line">                System.out.println(r.getRoleDetail().getRd_detail());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打印日志如下：</p><blockquote><p>DEBUG [main] - ==&gt;  Preparing: select <em> from mybatisrole m ,roledetail r where m.myrole_id=?<br>DEBUG [main] - ==&gt; Parameters: 1(Integer)<br>TRACE [main] - &lt;==    Columns: myrole_id, role_name, rd_id, rd_detail<br>TRACE [main] - &lt;==        Row: 1, a, 1, 主要权限负责人<br>DEBUG [main] - ====&gt;  Preparing: SELECT </em> from roledetail where rd_id=?<br>DEBUG [main] - ====&gt; Parameters: 1(Integer)<br>TRACE [main] - &lt;====    Columns: rd_id, rd_detail<br>TRACE [main] - &lt;====        Row: 1, 主要权限负责人<br>DEBUG [main] - &lt;====      Total: 1<br>DEBUG [main] - &lt;==      Total: 1<br>主要权限负责人</p></blockquote><p>可以看到执行了2条sql；</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>虽然可以进行一对一查询了，但是不知道问什么两种配置会导致执行不同次数的sql，官方文档的解释是<code>一个 Java 类的完全限定名,或一个类型别名(参考上面内建类型别名的列表)。 如果你映射到一个 JavaBean,MyBatis 通常可以断定类型。然而,如 果你映射到的是 HashMap,那么你应该明确地指定 javaType 来保证期望的 行为</code>。但是却没说为啥或者怎样映射得。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在Spring中使用JWT生成token来验证用户</title>
      <link href="/2018/03/30/%E5%9C%A8Spring%E4%B8%AD%E4%BD%BF%E7%94%A8JWT%E7%94%9F%E6%88%90token%E6%9D%A5%E9%AA%8C%E8%AF%81%E7%94%A8%E6%88%B7/"/>
      <url>/2018/03/30/%E5%9C%A8Spring%E4%B8%AD%E4%BD%BF%E7%94%A8JWT%E7%94%9F%E6%88%90token%E6%9D%A5%E9%AA%8C%E8%AF%81%E7%94%A8%E6%88%B7/</url>
      <content type="html"><![CDATA[<p>首先JWT全程是 JSON WEB TOKEN</p><h2 id="与Spring进行一个整合："><a href="#与Spring进行一个整合：" class="headerlink" title="与Spring进行一个整合："></a>与Spring进行一个整合：</h2><h3 id="获取JWT"><a href="#获取JWT" class="headerlink" title="获取JWT"></a>获取JWT</h3><p>首先需要在pom中引入几个需要的jar包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.auth0&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;java-jwt&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;0.9.0&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br></pre></td></tr></table></figure></p><p>另外这里也需要shiro的几个核心jar，这里就不写出来了。 jar包添加完毕之后便可以编写加密的方法了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">byte[] apiKeySecretBytes = DatatypeConverter.parseBase64Binary(&quot;somersames&quot;);</span><br><span class="line">SignatureAlgorithm sigAlg = SignatureAlgorithm.HS256;</span><br><span class="line">Key signingKey = new SecretKeySpec(apiKeySecretBytes, sigAlg.getJcaName());</span><br><span class="line">JwtBuilder builder = Jwts.builder()</span><br><span class="line">        .setSubject(username)</span><br><span class="line">        .signWith(sigAlg, signingKey);</span><br><span class="line">String result =builder.compact();</span><br></pre></td></tr></table></figure></p><p>在这里需要解释下的就是对输入的Key进行一个Base64加密，然后将获取到的密匙和SignatureAlgorithm指定的一个加密算法进行加密，文章里面是<code>HS256</code>加密算法，最后生成一个Key。<br>当获取到这个key之后通过<code>JwtBuilder</code>来进行生成一个JwtBuilder，最后在调用compact()从而可以获得一个JWT</p><h3 id="JWT验证用户："><a href="#JWT验证用户：" class="headerlink" title="JWT验证用户："></a>JWT验证用户：</h3><p>这一步就是需要和spring来打交道了，关于生成的token返回给前端之后到底储存在哪里，下午查了下目前有两种解决办法，一种是存在session里面，然后设置过期时间，另外一种则是存储在localstorage, 对比这两种存储方式，发现localstorage在客户端的话任何人都可以获取，所以最后还是考虑了通过sesison来存储TOKEN。</p><p>新建Spring的控制器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/provicer&quot;)</span><br><span class="line">   @ResponseBody</span><br><span class="line">   public String jwtTest(@RequestParam(value = &quot;username&quot;,required = false)String username,</span><br><span class="line">                         @RequestParam(value = &quot;password&quot;,required = false)String password,</span><br><span class="line">                         HttpServletRequest request,HttpServletResponse response</span><br><span class="line">                         )&#123;</span><br><span class="line">       if (username == null || password == null) &#123;</span><br><span class="line">           username = &quot;zhangsan&quot;;</span><br><span class="line">           Cookie[] cookie = request.getCookies();</span><br><span class="line">           if (cookie != null) &#123;</span><br><span class="line">               for (Cookie c : cookie) &#123;</span><br><span class="line">                   if (c.getName().equals(&quot;token&quot;)) &#123;</span><br><span class="line">                       if (decodeCookies(&quot;zheshijiakey&quot;, c.getValue()).equals(&quot;zhangsan&quot;)) &#123;</span><br><span class="line">                           return &quot;OK&quot;;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       byte[] apiKeySecretBytes = DatatypeConverter.parseBase64Binary(&quot;zheshijiakey&quot;);</span><br><span class="line">       SignatureAlgorithm sigAlg = SignatureAlgorithm.HS256;</span><br><span class="line">       Key signingKey = new SecretKeySpec(apiKeySecretBytes, sigAlg.getJcaName());</span><br><span class="line">       System.out.println(signingKey);</span><br><span class="line">       System.out.println(username);</span><br><span class="line">       JwtBuilder builder = Jwts.builder()</span><br><span class="line">               .setSubject(username)</span><br><span class="line">               .signWith(sigAlg, signingKey);</span><br><span class="line"></span><br><span class="line">       String result =builder.compact();</span><br><span class="line">       Cookie cookie =new Cookie(&quot;token&quot;,result);</span><br><span class="line">       response.addCookie(cookie);</span><br><span class="line">       return result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static String decodeCookies(String Key , String jwt)&#123;</span><br><span class="line">       Jws&lt;Claims&gt; jws = Jwts.parser().setSigningKey(Key).parseClaimsJws(jwt);</span><br><span class="line">       return jws.getBody().getSubject();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>在这里仅仅是作为一个测试，所以并没有真正的查询数据库，在这里默认一个用户名叫zhangsan ,代码就是判断用户是否登陆，若未登录就生成一个包含usename为’zhangsan’的JWTtoken，然后通过response返回给前端，若在前端请求的HTTP连接中通过cookies获取到了这个token，那么就会进行一个解析。这里进行解析的时候若发现是非法token的话，最好进行一个try-catch然后返回给前端某些约定的错误码然后跳转会登陆界面。<br>测试结果:<br>首次登陆如下：<br><img src="生成JWT字符串.PNG" alt=""></p><p>然后当登陆一次之后便会生成一个token，最后在第二次请求的时候便会返回OK<br><img src="请求一次之后.PNG" alt=""></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Jwt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css记录</title>
      <link href="/2018/03/30/css%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/03/30/css%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>在css的样式应用中，script是一个双标签，也就是说script是必须要通过标签闭合的也就是<code>&lt;script&gt;&lt;/script&gt;</code>,而不可以使用<code>&lt;script XXX/&gt;</code>这样写的话会导致浏览器解析不出来页面，<br>而单标签的话则是可以通过<code>/&gt;</code>关闭。类似于<code>&lt;meta&gt;</code>标签的话则是不需要<code>/&gt;</code>但是在工作中的话是推荐加上闭合标签，以是的代码有很好的可读性。</p><p>同理在css中的p标签如果嵌套了一个h1标签的话会出现解析错误,是因为p标签的话只能出现行内元素和文本，若是出现了块级元素的话:浏览器的解析方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">&lt;h1&gt;测试的标题&lt;/h1&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">浏览器解析：</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;h1&gt;测试的标题&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>垂直方向上的外边距会叠加，即宽的外边距会决定垂直方向上的距离</p><p>为设置了宽度的盒子添加边距啥的会导致盒子变得更宽</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql的一些总结</title>
      <link href="/2018/03/29/mysql%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
      <url>/2018/03/29/mysql%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天突然有一个写sql的机会，但是是手写，不像之前那样可以在数据库上做测试。这突然让我感觉有的语法有点生疏了，所以乘着这个机会来做一个全部的梳理。</p><h2 id="groupby和where的顺序："><a href="#groupby和where的顺序：" class="headerlink" title="groupby和where的顺序："></a>groupby和where的顺序：</h2><p>今天是有两表做一个等值连接查询的，在这里应该是先where之后再进行group by，<code>group by</code>是对<code>where</code>条件过滤之后再进行分组处理，所以where在前。</p><h3 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h3><p>在这里之前一直对group by有一个比较错误的认识，先看一下表结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT e.employeeNumber,e.firstName ,e.extension, o.state ,o.officeCode FROM employees e ,offices  o WHERE e.officeCode = o.officeCode;</span><br><span class="line">+----------------+-----------+-----------+------------+------------+</span><br><span class="line">| employeeNumber | firstName | extension | state      | officeCode |</span><br><span class="line">+----------------+-----------+-----------+------------+------------+</span><br><span class="line">|           1002 | Diane     | x5800     | CA         | 1          |</span><br><span class="line">|           1056 | Mary      | x4611     | CA         | 1          |</span><br><span class="line">|           1076 | Jeff      | x9273     | CA         | 1          |</span><br><span class="line">|           1143 | Anthony   | x5428     | CA         | 1          |</span><br><span class="line">|           1165 | Leslie    | x3291     | CA         | 1          |</span><br><span class="line">|           1166 | Leslie    | x4065     | CA         | 1          |</span><br><span class="line">|           1188 | Julie     | x2173     | MA         | 2          |</span><br><span class="line">|           1216 | Steve     | x4334     | MA         | 2          |</span><br><span class="line">|           1286 | Foon Yue  | x2248     | NY         | 3          |</span><br><span class="line">|           1323 | George    | x4102     | NY         | 3          |</span><br><span class="line">|           1102 | Gerard    | x5408     | NULL       | 4          |</span><br><span class="line">|           1337 | Loui      | x6493     | NULL       | 4          |</span><br><span class="line">|           1370 | Gerard    | x2028     | NULL       | 4          |</span><br><span class="line">|           1401 | Pamela    | x2759     | NULL       | 4          |</span><br><span class="line">|           1702 | Martin    | x2312     | NULL       | 4          |</span><br><span class="line">|           1621 | Mami      | x101      | Chiyoda-Ku | 5          |</span><br><span class="line">|           1625 | Yoshimi   | x102      | Chiyoda-Ku | 5          |</span><br><span class="line">|           1088 | William   | x4871     | NULL       | 6          |</span><br><span class="line">|           1611 | Andy      | x101      | NULL       | 6          |</span><br><span class="line">|           1612 | Peter     | x102      | NULL       | 6          |</span><br><span class="line">|           1619 | Tom       | x103      | NULL       | 6          |</span><br><span class="line">|           1501 | Larry     | x2311     | NULL       | 7          |</span><br><span class="line">|           1504 | Barry     | x102      | NULL       | 7          |</span><br><span class="line">+----------------+-----------+-----------+------------+------------+</span><br><span class="line">23 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>在这之前一直是想通过groupby达到如下的效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT e.employeeNumber,e.firstName ,e.extension, o.state ,o.officeCode FROM employees e ,offices  o WHERE e.officeCode = o.officeCode and o.officeCode=3;</span><br><span class="line">+----------------+-----------+-----------+-------+------------+</span><br><span class="line">| employeeNumber | firstName | extension | state | officeCode |</span><br><span class="line">+----------------+-----------+-----------+-------+------------+</span><br><span class="line">|           1286 | Foon Yue  | x2248     | NY    | 3          |</span><br><span class="line">|           1323 | George    | x4102     | NY    | 3          |</span><br><span class="line">+----------------+-----------+-----------+-------+------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>其实这种只能是通过一个内连接加一个条件过滤来进行实现，但是在之前的话是一直在记忆里面认为groupby可行，其实<strong>是不可行的</strong> ，为什么这样说了，因为group by按照条件分组之后他每组只会有一条，那么在这里就出现了一个问题，既然groupby之后显示的是一条，那么这两行如何显示呢？所以这种通过groupby来显示的是不可行的。<br>那么，groupby适合什么呢？groupby适合的是按照分组进行统计的，例如求最大薪水，平均薪水等，而不是列出某一个分组里面的所有人的。列出所有人这是where擅长的，如下数据表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT o.orderNUmber, o.orderDate, od.priceEach FROM orders o ,orderdetails od WHERE o.orderNumber =od.orderNumber limit 0,10;</span><br><span class="line">+-------------+------------+-----------+</span><br><span class="line">| orderNUmber | orderDate  | priceEach |</span><br><span class="line">+-------------+------------+-----------+</span><br><span class="line">|       10100 | 2003-01-06 |    136.00 |</span><br><span class="line">|       10100 | 2003-01-06 |     55.09 |</span><br><span class="line">|       10100 | 2003-01-06 |     75.46 |</span><br><span class="line">|       10100 | 2003-01-06 |     35.29 |</span><br><span class="line">|       10101 | 2003-01-09 |    108.06 |</span><br><span class="line">|       10101 | 2003-01-09 |    167.06 |</span><br><span class="line">|       10101 | 2003-01-09 |     32.53 |</span><br><span class="line">|       10101 | 2003-01-09 |     44.35 |</span><br><span class="line">|       10102 | 2003-01-10 |     95.55 |</span><br><span class="line">|       10102 | 2003-01-10 |     43.13 |</span><br><span class="line">+-------------+------------+-----------+</span><br><span class="line">10 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>那么按照orderNumber 进行groupby便可以求出每一个订单的总价了，也说明了groupby只是适合于分组统计，而不是适用于分组展示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SELECT o.orderNUmber, o.orderDate ,SUM(od.priceEach) FROM orders o ,orderdetails od WHERE o.orderNumber =od.orderNumber GROUP BY od.orderNumber limit 0,10;</span><br><span class="line">+-------------+------------+-------------------+</span><br><span class="line">| orderNUmber | orderDate  | SUM(od.priceEach) |</span><br><span class="line">+-------------+------------+-------------------+</span><br><span class="line">|       10100 | 2003-01-06 |            301.84 |</span><br><span class="line">|       10101 | 2003-01-09 |            352.00 |</span><br><span class="line">|       10102 | 2003-01-10 |            138.68 |</span><br><span class="line">|       10103 | 2003-01-29 |           1520.37 |</span><br><span class="line">|       10104 | 2003-01-31 |           1251.89 |</span><br><span class="line">|       10105 | 2003-02-11 |           1479.71 |</span><br><span class="line">|       10106 | 2003-02-17 |           1427.28 |</span><br><span class="line">|       10107 | 2003-02-24 |            793.21 |</span><br><span class="line">|       10108 | 2003-03-03 |           1432.86 |</span><br><span class="line">|       10109 | 2003-03-10 |            700.89 |</span><br><span class="line">+-------------+------------+-------------------+</span><br><span class="line">10 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></p><p>这才是groupby的正确用法</p><h3 id="having-count函数："><a href="#having-count函数：" class="headerlink" title="having count函数："></a>having count函数：</h3><p><code>having count</code>函数可以配合group by 对分组之后的数据进行筛选，这是where过滤所达不到的，就比如上表，需要过滤出订单价格大于1000的，那么在用where的时候则会显得很乏力：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT o.orderNUmber, o.orderDate ,SUM(od.priceEach) AS total FROM orders o ,orderdetails od WHERE o.orderNumber =od.orderNumber GROUP BY od.orderNumber HAVING TOTAL &gt; 1000 LIMIT 0,10;</span><br><span class="line">+-------------+------------+---------+</span><br><span class="line">| orderNUmber | orderDate  | total   |</span><br><span class="line">+-------------+------------+---------+</span><br><span class="line">|       10103 | 2003-01-29 | 1520.37 |</span><br><span class="line">|       10104 | 2003-01-31 | 1251.89 |</span><br><span class="line">|       10105 | 2003-02-11 | 1479.71 |</span><br><span class="line">|       10106 | 2003-02-17 | 1427.28 |</span><br><span class="line">|       10108 | 2003-03-03 | 1432.86 |</span><br><span class="line">|       10110 | 2003-03-18 | 1338.47 |</span><br><span class="line">|       10117 | 2003-04-16 | 1307.47 |</span><br><span class="line">|       10119 | 2003-04-28 | 1081.44 |</span><br><span class="line">|       10120 | 2003-04-29 | 1322.67 |</span><br><span class="line">|       10122 | 2003-05-08 | 1598.27 |</span><br><span class="line">+-------------+------------+---------+</span><br><span class="line">10 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>这就是having配合groupby的便捷性，那么where适合什么形式的过滤呢？我个人认为where比较适合于在groupby之前就进行数据的过滤，这样会比较好，而having count则适合于groupby之后的一个过滤。</p><h3 id="OrderBy函数："><a href="#OrderBy函数：" class="headerlink" title="OrderBy函数："></a>OrderBy函数：</h3><p>orderby函数可以对结果集进行排序，他既可以和where搭配使用，又可以和groupby搭配使用，又可以和having一起搭配使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT o.orderNUmber, o.orderDate ,SUM(od.priceEach) AS total FROM orders o ,orderdetails od WHERE o.orderNumber =od.orderNumber GROUP BY od.orderNumber HAVING TOTAL &gt; 1000 order by total  LIMIT 0,10;</span><br><span class="line">+-------------+------------+---------+</span><br><span class="line">| orderNUmber | orderDate  | total   |</span><br><span class="line">+-------------+------------+---------+</span><br><span class="line">|       10341 | 2004-11-24 | 1003.19 |</span><br><span class="line">|       10293 | 2004-09-09 | 1004.59 |</span><br><span class="line">|       10246 | 2004-05-05 | 1006.78 |</span><br><span class="line">|       10420 | 2005-05-29 | 1014.01 |</span><br><span class="line">|       10311 | 2004-10-16 | 1033.82 |</span><br><span class="line">|       10380 | 2005-02-16 | 1034.10 |</span><br><span class="line">|       10412 | 2005-05-03 | 1034.15 |</span><br><span class="line">|       10278 | 2004-08-06 | 1034.86 |</span><br><span class="line">|       10361 | 2004-12-17 | 1052.87 |</span><br><span class="line">|       10271 | 2004-07-20 | 1054.03 |</span><br><span class="line">+-------------+------------+---------+</span><br><span class="line">10 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></p><h2 id="Mysql的总结："><a href="#Mysql的总结：" class="headerlink" title="Mysql的总结："></a>Mysql的总结：</h2><p>其实mysql的连接无非是左连接，右连接，内连接，全连接，也就left join ,right join ,inner join 和union等，<br>其实在这里group by 和having count都可以对多列进行一个排序或者过滤，而不仅仅是一行</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用Jquery和Spring异步上传文件</title>
      <link href="/2018/03/29/%E5%88%A9%E7%94%A8Jquery%E5%92%8CSpring%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
      <url>/2018/03/29/%E5%88%A9%E7%94%A8Jquery%E5%92%8CSpring%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="异步上传文件："><a href="#异步上传文件：" class="headerlink" title="异步上传文件："></a>异步上传文件：</h2><p>用Jquery的异步上传文件的时候需要引入一个js文件<code>jquery.form.min.js</code>，用这个文件里面的$.ajaxSubmit()方法来实现一个异步的文件上传功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$(this).ajaxSubmit(&#123;</span><br><span class="line">           type:&apos;POST&apos;,</span><br><span class="line">           url: &quot;/uploadfile&quot;,</span><br><span class="line">           dataType: &apos;json&apos;,</span><br><span class="line">           data: serializeData,</span><br><span class="line">           contentType: false,</span><br><span class="line">           cache: false,</span><br><span class="line">           processData:false,</span><br><span class="line">           beforeSubmit: function() &#123;</span><br><span class="line">       &#125;,</span><br><span class="line">       uploadProgress: function (event, position, total, percentComplete)&#123;</span><br><span class="line">       &#125;,</span><br><span class="line">       success:function()&#123;</span><br><span class="line"></span><br><span class="line">       &#125;,</span><br><span class="line">       error:function(data)&#123;</span><br><span class="line">           alert(&apos;上传图片出错&apos;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></p><p>在这里的话<code>$(&quot;&quot;)</code>函数需要是form的id，而且<code>beforeSubmit</code>可以在上传文件之前可以做一些检查，例如文件后缀或者文件大小之类的检查。</p><p>在后端的话接受上传的文件其实跟Servlet差不多，主要是从request中获取请求流，参数的话需要标记为这个<code>@RequestParam(&quot;file&quot;) MultipartFile file</code>,最后在SpringMvc中有一个方法可以将上传的文件通过移动或者复制然后转移到我们指定的文件夹中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void transferTo(java.io.File dest)</span><br><span class="line">         throws java.io.IOException,</span><br><span class="line">                java.lang.IllegalStateException</span><br><span class="line">Transfer the received file to the given destination file.</span><br><span class="line">This may either move the file in the filesystem, copy the file in the filesystem, or save memory-held contents to the destination file. If the destination file already exists, it will be deleted first.</span><br><span class="line"></span><br><span class="line">If the target file has been moved in the filesystem, this operation cannot be invoked again afterwards. Therefore, call this method just once in order to work with any storage mechanism.</span><br><span class="line"></span><br><span class="line">NOTE: Depending on the underlying provider, temporary storage may be container-dependent, including the base directory for relative destinations specified here (e.g. with Servlet 3.0 multipart handling). For absolute destinations, the target file may get renamed/moved from its temporary location or newly copied, even if a temporary copy already exists.</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line">dest - the destination file (typically absolute)</span><br><span class="line">Throws:</span><br><span class="line">java.io.IOException - in case of reading or writing errors</span><br><span class="line">java.lang.IllegalStateException - if the file has already been moved in the filesystem and is not available anymore for another transfer</span><br><span class="line">See Also:</span><br><span class="line">FileItem.write(File), Part.write(String)</span><br></pre></td></tr></table></figure></p><p>也就是说这个方法<code>transferTo</code>会将接收到的文件移动或者copy到指定的位置。<br>那么在Controller中的主要方法体是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/uploadfile&quot; ,method = RequestMethod.POST)</span><br><span class="line">        @ResponseBody</span><br><span class="line">        public String uploadfile( @RequestParam(&quot;file&quot;) MultipartFile file) throws IOException &#123;</span><br><span class="line">        Map&lt;String ,Object&gt; map =new HashMap&lt;&gt;();</span><br><span class="line">        /*  上传的文件为空 */</span><br><span class="line">        if(file ==  null || file.isEmpty())&#123;</span><br><span class="line">            map.put(&quot;code&quot;,&quot;0&quot;);</span><br><span class="line">            map.put(&quot;msg&quot;,&quot;fail&quot;);</span><br><span class="line">            return JSON.toJSONString(map);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            String rootPath = &quot;D:\\disk&quot;;</span><br><span class="line">            File dir = new File(rootPath + File.separator + &quot;tmpFiles&quot;);</span><br><span class="line">            File serverFile = new File(dir.getAbsolutePath() + File.separator + file.getOriginalFilename());</span><br><span class="line">            file.transferTo(serverFile);</span><br><span class="line">            map.put(&quot;code&quot;,&quot;1&quot;);</span><br><span class="line">            map.put(&quot;msg&quot;,&quot;success&quot;);</span><br><span class="line">            return JSON.toJSONString(map);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>这个方法的话如果文件上传成功会返回一个json格式的信息，从而提示前端文件已经上传成功了。</p><h2 id="生成验证码："><a href="#生成验证码：" class="headerlink" title="生成验证码："></a>生成验证码：</h2><p>在这里的话顺带在说下关于验证码的事情，在Spring里面使用验证码的话可以使用google的<code>kaptcha</code>这个jar包，因为在maven仓库中的话是没有这个版本的，所以这个需要自己下载到本地然后通过命令行导入，最后才可以在pom文件中引用这个包；导入方法如下：<br><code>mvn install:install-file  -Dfile=jar包位置 -DgroupId=com.google.code -DartifactId=kaptcha -Dversion=2.3.2 -Dpackaging=jar</code>，这样在pom文件中便可以引用了。<br>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.google.code&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;kaptcha&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.3.2&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>同时在ApplicationContext.xml中添加一个bean.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;captchaProducer&quot; class=&quot;com.google.code.kaptcha.impl.DefaultKaptcha&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;config&quot;&gt;</span><br><span class="line">            &lt;bean class=&quot;com.google.code.kaptcha.util.Config&quot;&gt;</span><br><span class="line">                &lt;constructor-arg&gt;</span><br><span class="line">                    &lt;props&gt;</span><br><span class="line">                        &lt;!-- 图片边框 --&gt;</span><br><span class="line">                        &lt;prop key=&quot;kaptcha.border&quot;&gt;no&lt;/prop&gt;</span><br><span class="line">                        &lt;!-- 图片宽度 --&gt;</span><br><span class="line">                        &lt;prop key=&quot;kaptcha.image.width&quot;&gt;95&lt;/prop&gt;</span><br><span class="line">                        &lt;!-- 图片高度 --&gt;</span><br><span class="line">                        &lt;prop key=&quot;kaptcha.image.height&quot;&gt;45&lt;/prop&gt;</span><br><span class="line">                        &lt;!-- 验证码背景颜色渐变，开始颜色 --&gt;</span><br><span class="line">                        &lt;prop key=&quot;kaptcha.background.clear.from&quot;&gt;248,248,248&lt;/prop&gt;</span><br><span class="line">                        &lt;!-- 验证码背景颜色渐变，结束颜色 --&gt;</span><br><span class="line">                        &lt;prop key=&quot;kaptcha.background.clear.to&quot;&gt;248,248,248&lt;/prop&gt;</span><br><span class="line">                        &lt;!-- 验证码的字符 --&gt;</span><br><span class="line">                        &lt;prop key=&quot;kaptcha.textproducer.char.string&quot;&gt;0123456789abcdefghijklmnopqrstuvwxyz这是一个测试验证码的例子&lt;/prop&gt;</span><br><span class="line">                        &lt;!-- 验证码字体颜色 --&gt;</span><br><span class="line">                        &lt;prop key=&quot;kaptcha.textproducer.font.color&quot;&gt;0,0,255&lt;/prop&gt;</span><br><span class="line">                        &lt;!-- 验证码的效果，水纹 --&gt;</span><br><span class="line">                        &lt;prop key=&quot;kaptcha.obscurificator.impl&quot;&gt;com.google.code.kaptcha.impl.WaterRipple&lt;/prop&gt;</span><br><span class="line">                        &lt;!-- 验证码字体大小 --&gt;</span><br><span class="line">                        &lt;prop key=&quot;kaptcha.textproducer.font.size&quot;&gt;35&lt;/prop&gt;</span><br><span class="line">                        &lt;!-- 验证码字数 --&gt;</span><br><span class="line">                        &lt;prop key=&quot;kaptcha.textproducer.char.length&quot;&gt;4&lt;/prop&gt;</span><br><span class="line">                        &lt;!-- 验证码文字间距 --&gt;</span><br><span class="line">                        &lt;prop key=&quot;kaptcha.textproducer.char.space&quot;&gt;2&lt;/prop&gt;</span><br><span class="line">                        &lt;!-- 验证码字体 --&gt;</span><br><span class="line">                        &lt;prop key=&quot;kaptcha.textproducer.font.names&quot;&gt;new Font(&quot;Arial&quot;, 1, fontSize), new Font(&quot;Courier&quot;, 1, fontSize)&lt;/prop&gt;</span><br><span class="line">                        &lt;!-- 不加噪声 --&gt;</span><br><span class="line">                        &lt;prop key=&quot;kaptcha.noise.impl&quot;&gt;com.google.code.kaptcha.impl.NoNoise&lt;/prop&gt;</span><br><span class="line">                    &lt;/props&gt;</span><br><span class="line">                &lt;/constructor-arg&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>最后在Controller添加如下方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;verificationcode&quot;, method = RequestMethod.GET)</span><br><span class="line">    public ModelAndView Verificationcode(ModelAndView modelAndView, HttpServletRequest request, HttpServletResponse response,</span><br><span class="line">                                         @RequestParam(value = &quot;timestamp&quot;, required = false) String timestamp) throws IOException &#123;</span><br><span class="line">        /* 添加时间戳，以设置验证码的过期时间*/</span><br><span class="line">        if (timestamp == null || timestamp.length() == 0) &#123;</span><br><span class="line">            modelAndView.addObject(&quot;timestamp&quot;, System.currentTimeMillis());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            modelAndView.addObject(&quot;timestamp&quot;, timestamp);</span><br><span class="line">        &#125;</span><br><span class="line">        response.setDateHeader(&quot;Expires&quot;, 0);</span><br><span class="line">        response.setHeader(&quot;Cache-Control&quot;, &quot;no-store, no-cache, must-revalidate&quot;);</span><br><span class="line">        response.addHeader(&quot;Cache-Control&quot;, &quot;post-check=0, pre-check=0&quot;);</span><br><span class="line">        response.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);</span><br><span class="line">        response.setContentType(&quot;image/jpeg&quot;);</span><br><span class="line">        String capText = captchaProducer.createText();</span><br><span class="line">        request.getSession().setAttribute(Constants.KAPTCHA_SESSION_KEY, capText);</span><br><span class="line">        BufferedImage bi = captchaProducer.createImage(capText);</span><br><span class="line">        ServletOutputStream out = response.getOutputStream();</span><br><span class="line">        ImageIO.write(bi, &quot;jpg&quot;, out);</span><br><span class="line">        try &#123;</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>最后在前端页面引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;verificationcode&quot;&gt;  //在这里随意设置宽度和高度即可。</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>页面布局以及JS解析json的总结</title>
      <link href="/2018/03/28/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%BB%A5%E5%8F%8Ajquery%E8%A7%A3%E6%9E%90json%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2018/03/28/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%BB%A5%E5%8F%8Ajquery%E8%A7%A3%E6%9E%90json%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="关于页面的水平垂直居中："><a href="#关于页面的水平垂直居中：" class="headerlink" title="关于页面的水平垂直居中："></a>关于页面的水平垂直居中：</h2><p>页面的水平垂直居中布局的话目前就我这里了解的话是又两种方法，一种是盒子布局，一种是流式布局：<br>盒子布局</p><h2 id="关于Jquery解析JSON格式的问题"><a href="#关于Jquery解析JSON格式的问题" class="headerlink" title="关于Jquery解析JSON格式的问题"></a>关于Jquery解析JSON格式的问题</h2><h3 id="JSON-parse-方法"><a href="#JSON-parse-方法" class="headerlink" title="JSON.parse()方法"></a>JSON.parse()方法</h3><p>在使用这个方法解析Json格式的时候一直会报错，但是传入的值却又明明是JSON格式的，所以一直在排查：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=&apos;&#123;&quot;first&quot;:&quot;111&quot;&#125;&apos;;</span><br><span class="line">b=&quot;&#123;&apos;first&apos;:&apos;111&apos;&#125;&quot;;</span><br><span class="line">console.log(JSON.parse(a));</span><br><span class="line">console.log(JSON.parse(b))  //在这里会报错，提示Unexpected token &apos; in JSON at position 1</span><br></pre></td></tr></table></figure></p><p>这就引出了在JS中使用JSON解析Json字符串的问题了，下图是解析字符串的顺序了，在下图可以看到解析是以<code>&quot;</code>为起点，然后是<code>/</code>，若在开始的位置没有发现这两个起始符号的话那么js会跳过这次解析直接到达末尾，然后报错，这也就解释了为什么在解析b的时候会直接抛出异常<code>Unexpected token &#39;</code><br><img src="JS解析Json.PNG" alt=""></p><h3 id="JSON-parse-方法-1"><a href="#JSON-parse-方法-1" class="headerlink" title="JSON.parse()方法"></a>JSON.parse()方法</h3><p>这个方式是将一个Js的Object解析成一个Json格式的字符串，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj=&#123;</span><br><span class="line">    &apos;a&apos;:123,</span><br><span class="line">    &quot;b&quot;:&quot;qq&quot;</span><br><span class="line">&#125;</span><br><span class="line">console.log(JSON.stringify(obj))</span><br><span class="line"></span><br><span class="line">输出&#123;&quot;a&quot;:123,&quot;b&quot;:&quot;qq&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>在这里需要注意的是在这个对象中的话，单引号会被转成双引号。</p><h3 id="JSON格式："><a href="#JSON格式：" class="headerlink" title="JSON格式："></a>JSON格式：</h3><p>JSON格式的规范如下，而使用JSON.parse()来解析单引号的内容的话是不符合规范的。</p><blockquote><p>JSON 名称/值对<br>JSON 数据的书写格式是：名称/值对。</p></blockquote><p>名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值：</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql和时间相关的查询(二)</title>
      <link href="/2018/03/28/mysql%E5%92%8C%E6%97%B6%E9%97%B4%E7%9B%B8%E5%85%B3%E7%9A%84%E6%9F%A5%E8%AF%A2-%E4%BA%8C/"/>
      <url>/2018/03/28/mysql%E5%92%8C%E6%97%B6%E9%97%B4%E7%9B%B8%E5%85%B3%E7%9A%84%E6%9F%A5%E8%AF%A2-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h2 id="DATE-ADD"><a href="#DATE-ADD" class="headerlink" title="DATE_ADD():"></a>DATE_ADD():</h2><p>这个函数可以将日期往前加上规定的年，月或者日，从而方便统计，例如需要统计本月的某些数据的话，一般来讲肯定是只需要大于本月月初即可，但是为了考虑程序的健壮性的话肯定是需要再加一个限制条件，比如说小于下个月1号。那么就需要一个一个DATE_ADD()函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  *</span><br><span class="line">FROM</span><br><span class="line">  table</span><br><span class="line">WHERE time_columns &gt; CONCAT(LEFT(NOW() - INTERVAL 0 MONTH, 7), &apos;-01&apos;)</span><br><span class="line">  AND time_columns &lt; DATE_ADD(CURDATE()-DAY(CURDATE())+1,INTERVAL 1 MONTH);</span><br></pre></td></tr></table></figure></p><p>这条sql便是求的本月的数据。同时在这里也对当前时间的函数进行一个对比：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT CURDATE();</span><br><span class="line">+------------+</span><br><span class="line">| CURDATE()  |</span><br><span class="line">+------------+</span><br><span class="line">| 2018-03-28 |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select now();</span><br><span class="line">+---------------------+</span><br><span class="line">| now()               |</span><br><span class="line">+---------------------+</span><br><span class="line">| 2018-03-28 15:07:15 |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select CURTIME();</span><br><span class="line">+-----------+</span><br><span class="line">| CURTIME() |</span><br><span class="line">+-----------+</span><br><span class="line">| 15:07:39  |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>顺便在这里再记录下mybatis中的别名的作用，在resultType中返回的通常是全路径包名，但是其实配置好别名的话其实是可以直接返回别名&gt; 深入浅出mybatis技术原理与实现P17以及后面的mapper文件的resultType</p><p>另外就是mybaytis的<code>$</code>和<code>#</code>的区别，其实<code>$</code>这个在配置文件中是很经常使用的，例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt;</span><br><span class="line">        &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>在这里就是用的<code>$</code>,而且在mybatis的官方文档里面也提到过了关于<code>#</code>和<code>$</code>的区别”</p><blockquote><p>String Substitution<br>  By default, using the #{} syntax will cause MyBatis to generate PreparedStatement properties and set the values safely against the PreparedStatement parameters (e.g. ?). While this is safer, faster and almost always preferred, sometimes you just want to directly inject an unmodified string into the SQL Statement. For example, for ORDER BY, you might use something like this:<br>  ORDER BY ${columnName}<br>  Here MyBatis won’t modify or escape the string.<br>  NOTE It’s not safe to accept input from a user and supply it to a statement unmodified in this way. This leads to potential SQL Injection attacks and therefore you should either disallow user input in these fields, or always perform your own escapes and checks.</p></blockquote><p>也就是说在这里的话<code>$</code>是一个静态占位符,但是在mybatis的源文件中一直没找到关于解析<code>$</code>的类和方法，只找到了关于解析<code>#</code>的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public SqlSource parse(String originalSql, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters) &#123;</span><br><span class="line">       SqlSourceBuilder.ParameterMappingTokenHandler handler = new SqlSourceBuilder.ParameterMappingTokenHandler(this.configuration, parameterType, additionalParameters);</span><br><span class="line">       GenericTokenParser parser = new GenericTokenParser(&quot;#&#123;&quot;, &quot;&#125;&quot;, handler);</span><br><span class="line">       String sql = parser.parse(originalSql);</span><br><span class="line">       return new StaticSqlSource(this.configuration, sql, handler.getParameterMappings());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>关于这个<code>${}</code>的话在mybatis里面是会直接将我们所写的sql放入到预定的sql语句中，而不是像<code>#{}</code>那样会进行一个替换，所以会造成一个安全问题</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql时间相关 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring连接redis的一些做法以及mybatis的一些感想</title>
      <link href="/2018/03/27/spring%E8%BF%9E%E6%8E%A5redis%E7%9A%84%E4%B8%80%E4%BA%9B%E5%81%9A%E6%B3%95%E4%BB%A5%E5%8F%8Amybatis%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"/>
      <url>/2018/03/27/spring%E8%BF%9E%E6%8E%A5redis%E7%9A%84%E4%B8%80%E4%BA%9B%E5%81%9A%E6%B3%95%E4%BB%A5%E5%8F%8Amybatis%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/</url>
      <content type="html"><![CDATA[<h2 id="Redis启动"><a href="#Redis启动" class="headerlink" title="Redis启动"></a>Redis启动</h2><p>首先开启redis服务，windows的redis下载在github <a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">windows的redis下载地址</a>,然后解压出来最后开启那个redis-server。<br>启动之后显示如下图：<br><img src="redis.PNG" alt=""></p><h2 id="spring配置："><a href="#spring配置：" class="headerlink" title="spring配置："></a>spring配置：</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在Spring中也可以通过配置文件<code>redis.properties</code>配置，但是由于在这个项目中的配置文件已经太多了，所以选择使用类的方式进行配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class RedisConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    JedisConnectionFactory jedisConnectionFactory()</span><br><span class="line">    &#123;</span><br><span class="line">        JedisConnectionFactory connectionFactory = new JedisConnectionFactory();</span><br><span class="line">        connectionFactory.setHostName(&quot;127.0.0.1&quot;);</span><br><span class="line">        connectionFactory.setPort(6379);</span><br><span class="line">        return new JedisConnectionFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @Autowired</span><br><span class="line">    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory factory)</span><br><span class="line">    &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        template.setKeySerializer(new StringRedisSerializer());</span><br><span class="line">        return template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后在使用的时候自动装配就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">      private RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure></p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>编写单元测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@ContextConfiguration(&quot;classpath:ApplicationContext.xml&quot;)</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">public class TestRedis  extends AbstractJUnit4SpringContextTests &#123;</span><br><span class="line"></span><br><span class="line">      @Autowired</span><br><span class="line">      private RedisTemplate redisTemplate;</span><br><span class="line">      @Test</span><br><span class="line">      public void redisTest() throws UnsupportedEncodingException &#123;</span><br><span class="line">          redisTemplate.opsForValue().set(&quot;zhangsan&quot;, &quot;book1&quot;);</span><br><span class="line">          if (redisTemplate.hasKey(&quot;abc&quot;))&#123;</span><br><span class="line">              System.out.println(&quot;abc已经存入redis&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后会发现数据已经添加到了这个redis服务器中了。</p><h2 id="Mybatis的一些知识点："><a href="#Mybatis的一些知识点：" class="headerlink" title="Mybatis的一些知识点："></a>Mybatis的一些知识点：</h2><p><code>SqlSesssionFactoryBuilder</code>:这是一个工厂，主要的作用是创建一些SqlSessioFactory，对于SqlSessionFactory来说，它的职责就是创建每一个SqlSession，然后这个SqlSession的作用则是连接数据库，类似于传统的JDBC的Connection，</p><p>SqlSesssionFactoryBuilder这个类主要是创建SqlSessioFactory,在这个类里面可以看到许多方法返回的是一个SqlSessionFactory，其中有一个方法是解析配置文件的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public SqlSessionFactory build(Reader reader, String environment, Properties properties) &#123;</span><br><span class="line">        SqlSessionFactory var5;</span><br><span class="line">        try &#123;</span><br><span class="line">            XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties);</span><br><span class="line">            var5 = this.build(parser.parse());</span><br><span class="line">        &#125; catch (Exception var14) &#123;</span><br><span class="line">            throw ExceptionFactory.wrapException(&quot;Error building SqlSession.&quot;, var14);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            ErrorContext.instance().reset();</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125; catch (IOException var13) &#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return var5;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里的第一个参数是一个流，这个流是将一个properties或者xml文件读取之后供mybatis使用的。<br>而对于SqlSessionFactory来讲，这是一个接口，其主要的接口方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public interface SqlSessionFactory &#123;</span><br><span class="line">    SqlSession openSession();</span><br><span class="line"></span><br><span class="line">    SqlSession openSession(boolean var1);</span><br><span class="line"></span><br><span class="line">    SqlSession openSession(Connection var1);</span><br><span class="line"></span><br><span class="line">    SqlSession openSession(TransactionIsolationLevel var1);</span><br><span class="line"></span><br><span class="line">    SqlSession openSession(ExecutorType var1);</span><br><span class="line"></span><br><span class="line">    SqlSession openSession(ExecutorType var1, boolean var2);</span><br><span class="line"></span><br><span class="line">    SqlSession openSession(ExecutorType var1, TransactionIsolationLevel var2);</span><br><span class="line"></span><br><span class="line">    SqlSession openSession(ExecutorType var1, Connection var2);</span><br><span class="line"></span><br><span class="line">    Configuration getConfiguration();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也就是说这个Factory主要负责的是Session的开启来查询数据库</p><h3 id="注意的坑："><a href="#注意的坑：" class="headerlink" title="注意的坑："></a>注意的坑：</h3><p>在mybatyis里面的话若使用对象传参的话需要注意<code>#{XXX}=YYY</code>，这里的YYY的话是需要和POJO相对应的，否则会提示<code>there is no getter for property named</code></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> spring </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于Unicode和其他的字符集以及Spring乱码处理</title>
      <link href="/2018/03/26/%E5%85%B3%E4%BA%8EUnicode%E5%92%8C%E5%85%B6%E4%BB%96%E7%9A%84%E5%AD%97%E7%AC%A6%E9%9B%86%E4%BB%A5%E5%8F%8ASpring%E4%B9%B1%E7%A0%81%E5%A4%84%E7%90%86/"/>
      <url>/2018/03/26/%E5%85%B3%E4%BA%8EUnicode%E5%92%8C%E5%85%B6%E4%BB%96%E7%9A%84%E5%AD%97%E7%AC%A6%E9%9B%86%E4%BB%A5%E5%8F%8ASpring%E4%B9%B1%E7%A0%81%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="Spring出现乱码的解决办法："><a href="#Spring出现乱码的解决办法：" class="headerlink" title="Spring出现乱码的解决办法："></a>Spring出现乱码的解决办法：</h2><p>若需要快速的解决乱码问题可以直接看配置文件:</p><h3 id="后台逻辑："><a href="#后台逻辑：" class="headerlink" title="后台逻辑："></a>后台逻辑：</h3><p><strong>在项目中的web.xml中添加Spring的字符过滤器</strong>，配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;SpringEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">        &lt;/filter-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;UTF-8&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;forceEncoding&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;SpringEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>同时也可以在<code>spring-mvc.xml</code>中配置各个请求头过来的处理方式：</p><h3 id="前端处理："><a href="#前端处理：" class="headerlink" title="前端处理："></a>前端处理：</h3><ul><li>在普通的html页面中可以加入<code>&lt;meta charset=&quot;UTF-8&gt;&quot;</code></li><li>在Jsp中需要加入<code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</code></li><li>另外对于ajax的异步请求的话若在url中包含汉字最好采用<code>encodeURI()</code>进行一个字符集处理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;messageConverters&quot;&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</span><br><span class="line">                    &lt;property name=&quot;supportedMediaTypes&quot;&gt;</span><br><span class="line">                        &lt;list&gt;</span><br><span class="line">                            &lt;value&gt;text/plain;charset=UTF-8&lt;/value&gt;</span><br><span class="line">                            &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;</span><br><span class="line">                            &lt;value&gt;applicaiton/javascript;charset=UTF-8&lt;/value&gt;</span><br><span class="line">                        &lt;/list&gt;</span><br><span class="line">                    &lt;/property&gt;</span><br><span class="line">                &lt;/bean&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>另外在出现乱码之后还可以设置request.setCharset()或者response.setCharset()的方式来解决</p><h2 id="编码的历史"><a href="#编码的历史" class="headerlink" title="编码的历史"></a>编码的历史</h2><h3 id="Unicode编码的出现"><a href="#Unicode编码的出现" class="headerlink" title="Unicode编码的出现"></a>Unicode编码的出现</h3><p>由于在计算机中只能存储的是1和0，那么在早期美国那边正好以2的8次方，也就是一个字节来表示所有的英文字母和一些符号，所谓的ASCII码，但是当越来越多的人进入到互联网之后却发现最初的ACSCII码已经不够使用了。因为仅中国的汉字就多达几万种，那么可想而知世界上其他的国家和汉字。<br>于是为了统一编码的愿望就出现了，Unicode的目的皆在为了将世界上的所有字符全部统计进来。在Unicode中，通常是用2个字节，也就是16为来表示一个字符。但是在Unicode中又分了17个位面，每一个位面都可以代表的不通过的字符。</p><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p>UTF-8和unicode的区别在于UTF-8是unicode的一种实现方式。在UTF-8的编码之中，可以含有三个字节或者更多的一个字节。读取规则：</p><blockquote><p>最高为为0 ，类似于00000100,则以ASCII码的方式读取该字符。<br>  若读取的字节最高为是以1开头的，检测含有几个1，含有几个1就代表的是读取后面的几个字节，例如：<code>11100000 1000000 10000000</code>表示该字符是由三个字节组成的。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在springmvc中使用shiro注解</title>
      <link href="/2018/03/26/%E5%9C%A8springmvc%E4%B8%AD%E4%BD%BF%E7%94%A8shiro%E6%B3%A8%E8%A7%A3/"/>
      <url>/2018/03/26/%E5%9C%A8springmvc%E4%B8%AD%E4%BD%BF%E7%94%A8shiro%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>在之前写了一篇spring和shiro的一个整合，但是在那个项目中并没有使用注解，而且没有加入权限，只是加入了角色，所以在这篇日志中将这个项目添加注解并且加入权限。</p><h2 id="开启Shiro的注解："><a href="#开启Shiro的注解：" class="headerlink" title="开启Shiro的注解："></a>开启Shiro的注解：</h2><p>刚开始开启这个注解的时候，添加了但是一直无效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">         String username = (String) principalCollection.getPrimaryPrincipal();</span><br><span class="line">         List&lt;Resources&gt; resources =loginservice.getRoleById(username);</span><br><span class="line">         List&lt;String&gt; roles =new ArrayList&lt;String&gt;();</span><br><span class="line">         for (Resources  r: resources)&#123;</span><br><span class="line">             roles.add(r.getRole());</span><br><span class="line">         &#125;</span><br><span class="line">        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class="line">        info.addRoles(roles);</span><br><span class="line">        if( !username.equals(&quot;MANAGER&quot;) )&#123;</span><br><span class="line">            return info ;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            List&lt;String&gt; pre = new ArrayList&lt;String&gt;();</span><br><span class="line">            pre.add(&quot;user:insert&quot;);</span><br><span class="line">            info.addStringPermissions(pre);</span><br><span class="line">            return info;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/toinsert&quot;)</span><br><span class="line">    @RequiresPermissions(&quot;user:insert&quot;)</span><br><span class="line">    public String toinsert()&#123;</span><br><span class="line">        return &quot;getuser/userINsert&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>在这里本来想设计的是访问<code>toinsert</code>这个URL的时候检查权限，若没有权限则会禁止访问，可以看到在<code>doGetAuthorizationInfo()</code>方法中已经将权限添加到除了<code>MANAGER</code>以外的任意角色。但是在测试的时候却一直不能进行这个权限检测，也就是任何人都可以访问这个URL。后来在网上查了下发现是需要添加一些配置文件到<code>spring-mvc.xml</code>这个配置文件中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- shiro开启注解 --&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator&quot; depends-on=&quot;lifecycleBeanPostProcessor&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;proxyTargetClass&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean class=&quot;org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>加了注解之后便可以依据这个设置的权限进行URL拦截，也就是除了MANAGER之外的任何人都可以进行插入用户操作。而没有该权限的用户访问这个页面的时候便会抛出一个异常。<br><img src="权限不足的异常.PNG" alt="&quot;权限不足的异常&quot;"><br>在后台可以捕获这个异常从而进行处理或者在后台使用<code>.isPermitted(&quot;权限&quot;)</code>来进行判断用户的权限</p><h2 id="联想：关于Servlet的拦截器和Spring的拦截器之间的顺序"><a href="#联想：关于Servlet的拦截器和Spring的拦截器之间的顺序" class="headerlink" title="联想：关于Servlet的拦截器和Spring的拦截器之间的顺序"></a>联想：关于Servlet的拦截器和Spring的拦截器之间的顺序</h2><p>在用shiro的时候顺便的也把Servlet拦截器的顺序和Spring拦截器的顺序都学习了下。在这里也顺便做了一个小的测试:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class ServletFilter implements Filter&#123;</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        System.out.println(&quot;Servlet得拦截器init()方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        System.out.println(&quot;Servlet得拦截器doFilter()方法&quot;);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        System.out.println(&quot;Servlet得拦截器destroy()方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class SpringHandle implements HandlerInterceptor &#123;</span><br><span class="line">    public boolean preHandle(HttpServletRequest request,</span><br><span class="line">                             HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        System.out.println(request.getHeader(&quot;Accept&quot;).toString());</span><br><span class="line">        System.out.println(&quot;This is a intercept to test the web&quot;);</span><br><span class="line">//        handleError(request,response);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    private void handleError(HttpServletRequest request ,HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        RequestDispatcher rd = request.getRequestDispatcher(&quot;/&quot;);</span><br><span class="line">        System.out.println(&quot;处理错误，需要跳转&quot;);</span><br><span class="line">        rd.forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写好了之后启动项目，发现Servlet的的这个拦截器最先运行<code>init()</code>方法在最初项目启动的时候便会于运行，而且一个请求过来之后也是<code>doFilter()</code>先运行，然后再是Spring的拦截器</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在mysql5.7版本中使用groupby所需要注意的</title>
      <link href="/2018/03/25/%E5%9C%A8mysql5.7%E7%89%88%E6%9C%AC%E4%B8%AD%E4%BD%BF%E7%94%A8groupby%E6%89%80%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84/"/>
      <url>/2018/03/25/%E5%9C%A8mysql5.7%E7%89%88%E6%9C%AC%E4%B8%AD%E4%BD%BF%E7%94%A8groupby%E6%89%80%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84/</url>
      <content type="html"><![CDATA[<h2 id="什么是ONLY-FULL-GROUP-BY-模式"><a href="#什么是ONLY-FULL-GROUP-BY-模式" class="headerlink" title="什么是ONLY_FULL_GROUP_BY 模式"></a>什么是ONLY_FULL_GROUP_BY 模式</h2><p>先看在mysql 5.7版本中的一个的group by，以下是这个数据库表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from testgroupby;</span><br><span class="line">+---------+-----------+------------+--------------+</span><br><span class="line">| user_id | user_name | user_score | user_subject |</span><br><span class="line">+---------+-----------+------------+--------------+</span><br><span class="line">|       1 | 张三      |         99 | 语文         |</span><br><span class="line">|       2 | 张三      |         90 | 数学         |</span><br><span class="line">|       3 | 张三      |         80 | 英语         |</span><br><span class="line">|       4 | 李四      |         99 | 语文         |</span><br><span class="line">|       5 | 王五      |         85 | 语文         |</span><br><span class="line">|       6 | 李四      |         91 | 数学         |</span><br><span class="line">|       7 | 王五      |        100 | 英语         |</span><br><span class="line">+---------+-----------+------------+--------------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>这是一个学生成绩数据库表。那么在MySQL5.7版本中执行它的话是会出现一个error的。如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from testgroupby group by user_name;</span><br><span class="line">ERROR 1055 (42000): Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column &apos;login.testgroupby.user_id&apos; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</span><br></pre></td></tr></table></figure><p>注意查看报错：<code>nonaggregated column &#39;login.testgroupby.user_id&#39; which is not functionally dependent on columns</code>。这段话是什么意思呢？大意表示的是对于groupby的username，userid并没有函数依赖于它。在这张表中，可以由<code>user_id</code>推导出<code>user_name</code>。因为每一个<code>user_id</code>都是唯一的，若对<code>user_id</code>进行groupby 则它可以推导出任何一个学生姓名，分数以及学科。即每一个学生Id都是可以确定一行值得，所以MySQL可以返回数据。 那么反过来是不是每一个学生姓名都可以推导出唯一的<code>user_id</code>呢？ 在这张表中，每一个<code>user_name</code>都是不可以推导出唯一的user_id-也就是说对<code>user_name</code>分组之后会有多余的<code>user_id</code>-, 所以也可以认为<code>user_id</code>并没有函数依赖于<code>user_name</code>。其实在这里还可以这样想，因为对<code>user_name</code>分组之后，在每一个组里面都会有几个值，那么随之而来的<code>user_id ,user_score,user_subject</code>都不是一个确定的值，也就是说在一个分组里面，在这几列中会有多个值，那么mysql这是就会不知道到底该返回哪一行得，所以这个时候开启了而这个模式的mysql就会拒绝查询。</p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><h3 id="一："><a href="#一：" class="headerlink" title="一："></a>一：</h3><p>那么如何才让它不报这个错误呢，在mysql的官方文档上面说的是:</p><blockquote><p>The query is valid if name is a primary key of t or is a unique NOT NULL column. In such cases, MySQL recognizes that the selected column is functionally dependent on a grouping column. For example, if name is a primary key, its value determines the value of address because each group has only one value of the primary key and thus only one row. As a result, there is no randomness in the choice of address value in a group and no need to reject the query</p></blockquote><p>也就是说如果groupby的列是一个主键的话，mysql会识别出他的一个函数依赖。在这个表中，由于对<code>user_id</code>进行groupby，在分组之后mysql是可以进行查询的。<br>重新修改查询语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from testgroupby group by user_id;</span><br><span class="line">+---------+-----------+------------+--------------+</span><br><span class="line">| user_id | user_name | user_score | user_subject |</span><br><span class="line">+---------+-----------+------------+--------------+</span><br><span class="line">|       1 | 张三      |         99 | 语文         |</span><br><span class="line">|       2 | 张三      |         90 | 数学         |</span><br><span class="line">|       3 | 张三      |         80 | 英语         |</span><br><span class="line">|       4 | 李四      |         99 | 语文         |</span><br><span class="line">|       5 | 王五      |         85 | 语文         |</span><br><span class="line">|       6 | 李四      |         91 | 数学         |</span><br><span class="line">|       7 | 王五      |        100 | 英语         |</span><br><span class="line">+---------+-----------+------------+--------------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>也就是说如果当<code>groupby</code>后面的字段是是一个非空主键的时候，由于主键是一个表中的唯一标识符，不可以重复，所以MySQL可以正确的推断出每一个分组。</p><p>那如果还是需要在user_name 这一列进行groupby怎么办？ 如果确实需要这样做的话，那么需要对groupby的字段进行一个处理，以确保就是这个集合是可以在分组之后都是唯一的(可以理解为只有一行)</p><h3 id="二："><a href="#二：" class="headerlink" title="二："></a>二：</h3><p>除了上面的方法，还可以对分组查询出来的数据进行一个聚合操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT user_name ,COUNT(*) AS &apos;subject_num&apos; FROM testgroupby  GROUP BY  user_name;</span><br><span class="line">+-----------+-------------+</span><br><span class="line">| user_name | subject_num |</span><br><span class="line">+-----------+-------------+</span><br><span class="line">| 张三      |           3 |</span><br><span class="line">| 李四      |           2 |</span><br><span class="line">| 王五      |           2 |</span><br><span class="line">+-----------+-------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>对于聚合之后的操作，MySQL是接受查询的</p><h3 id="三：ANY-VALUE-函数："><a href="#三：ANY-VALUE-函数：" class="headerlink" title="三：ANY_VALUE()函数："></a>三：ANY_VALUE()函数：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select ANY_VALUE(user_id),user_name  from testgroupby group by user_name;</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| ANY_VALUE(user_id) | user_name |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">|                  1 | 张三      |</span><br><span class="line">|                  4 | 李四      |</span><br><span class="line">|                  5 | 王五      |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>当然这样使用的话mysql只会取所分组得第一行。</p><h3 id="GROUP-CONCAT-函数："><a href="#GROUP-CONCAT-函数：" class="headerlink" title="GROUP_CONCAT()函数："></a>GROUP_CONCAT()函数：</h3><p>这个函数会将一个查询得结果集进行合并，从而可以使对user_name进行groupby之后返回得是一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT GROUP_CONCAT(user_id) AS &apos;user_id&apos;,user_name FROM testgroupby GROUP BY user_name;</span><br><span class="line">+---------+-----------+</span><br><span class="line">| user_id | user_name |</span><br><span class="line">+---------+-----------+</span><br><span class="line">| 1,2,3   | 张三      |</span><br><span class="line">| 4,6     | 李四      |</span><br><span class="line">| 5,7     | 王五      |</span><br><span class="line">+---------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><h3 id="关于这个模式："><a href="#关于这个模式：" class="headerlink" title="关于这个模式："></a>关于这个模式：</h3><p>下面这个图大致的解释了下为什么会报出这个错误。<br><img src="mysql的疑惑.PNG" alt=""><br>因为最后mysql会疑惑，你分组之后那么多得数据，我知道选则分组之后得哪一行？？？</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记一次sql和时间段查询有关的语句</title>
      <link href="/2018/03/23/%E8%AE%B0%E4%B8%80%E6%AC%A1sql%E5%92%8C%E6%97%B6%E9%97%B4%E6%AE%B5%E6%9F%A5%E8%AF%A2%E6%9C%89%E5%85%B3%E7%9A%84%E8%AF%AD%E5%8F%A5/"/>
      <url>/2018/03/23/%E8%AE%B0%E4%B8%80%E6%AC%A1sql%E5%92%8C%E6%97%B6%E9%97%B4%E6%AE%B5%E6%9F%A5%E8%AF%A2%E6%9C%89%E5%85%B3%E7%9A%84%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于自己有点需求需要在mysql中按照时间段进行查询，而自己又对这些不太了解，所以趁着这次机会将mysql和时间段相关的查询语句做一个记录：</p><h2 id="常用函数："><a href="#常用函数：" class="headerlink" title="常用函数："></a>常用函数：</h2><h4 id="DATE-SUB-函数"><a href="#DATE-SUB-函数" class="headerlink" title="DATE_SUB()函数"></a>DATE_SUB()函数</h4><p><code>DATE_SUB(date,INTERVAL expr type)</code>这个函数的date是一个时间表达式，一般取得是数据库中的一个字段。后面的<code>INTERVAL</code>一般来讲是不变的，<code>expr</code>一般是一个时间段，代表过去的，比如是30天，那么这里就是30，若是60，这里就是60，<code>type</code>则表示的是一个时间属性(可能表达的不是很准确)，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">MICROSECOND</span><br><span class="line">SECOND</span><br><span class="line">MINUTE</span><br><span class="line">HOUR</span><br><span class="line">DAY</span><br><span class="line">WEEK</span><br><span class="line">MONTH</span><br><span class="line">QUARTER</span><br><span class="line">YEAR</span><br><span class="line">SECOND_MICROSECOND</span><br><span class="line">MINUTE_MICROSECOND</span><br><span class="line">MINUTE_SECOND</span><br><span class="line">HOUR_MICROSECOND</span><br><span class="line">HOUR_SECOND</span><br><span class="line">HOUR_MINUTE</span><br><span class="line">DAY_MICROSECOND</span><br><span class="line">DAY_SECOND</span><br><span class="line">DAY_MINUTE</span><br><span class="line">DAY_HOUR</span><br><span class="line">YEAR_MONTH</span><br></pre></td></tr></table></figure></p><p>在这里我用<code>YEAR_MONTH</code> 和<code>MONTH</code> 同时写了一个sql<code>SELECT DATE_SUB(&#39;2015-09-30 11:19:00&#39;,INTERVAL2 MONTH)</code>在这个里面，将MONTH和YEAR_MONTH互换都是没问题的，这是目前暂时未发现有什么差异的。</p><h4 id="FROM-UNIXTIME-函数"><a href="#FROM-UNIXTIME-函数" class="headerlink" title="FROM_UNIXTIME()函数"></a>FROM_UNIXTIME()函数</h4><p>这是一个非常有用的函数，其作用是将一串数字或者一个时间戳转换成指定格式的一个日期，在这个里面的话第一个参数需要是一个UNIX时间戳,而第二个参数则是一个format的字符串，注意观察下面的三个例子的不同，第二个sql在后面做了一个+0的操作结果日期格式直接被转换成了一串数字。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT FROM_UNIXTIME(1447430881);</span><br><span class="line">        -&gt; &apos;2015-11-13 10:08:01&apos;</span><br><span class="line">mysql&gt; SELECT FROM_UNIXTIME(1447430881) + 0;</span><br><span class="line">        -&gt; 20151113100801</span><br><span class="line">mysql&gt; SELECT FROM_UNIXTIME(UNIX_TIMESTAMP(),</span><br><span class="line">    -&gt;                      &apos;%Y %D %M %h:%i:%s %x&apos;);</span><br><span class="line">        -&gt; &apos;2015 13th November 10:08:01 2015&apos;</span><br></pre></td></tr></table></figure></p><h4 id="CONCAT-函数"><a href="#CONCAT-函数" class="headerlink" title="CONCAT()函数"></a>CONCAT()函数</h4><p><code>CONCAT()</code>函数可以将一个字符串按照第二个参数，具体来说就是对应以下语句<code>SELECT LEFT(&#39;2018-01-26 11:50:09&#39;,7)</code>这条语句的执行结果结果是2018-01,正好是从头截取了7个字符。<br>参数：第一个是字符串，第二个是截取的长度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT LEFT(&apos;2018-01-26 11:50:09&apos;,7);</span><br><span class="line">+-------------------------------+</span><br><span class="line">| LEFT(&apos;2018-01-26 11:50:09&apos;,7) |</span><br><span class="line">+-------------------------------+</span><br><span class="line">| 2018-01                       |</span><br><span class="line">+-------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><h4 id="LEFT-函数"><a href="#LEFT-函数" class="headerlink" title="LEFT()函数"></a>LEFT()函数</h4><p><code>LEFT()</code>函数可以将一个字符串作为mysql的语句来执行，类比到Python就是python中的<code>eval</code>函数，但是该函数若执行的字符串中包含一个<code>null</code>:注意这个null若是关键字则是会则会导致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat(&apos;Mysql&apos;,null);</span><br><span class="line">+----------------------+</span><br><span class="line">| concat(&apos;Mysql&apos;,null) |</span><br><span class="line">+----------------------+</span><br><span class="line">| NULL                 |</span><br><span class="line">+----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><h4 id="sum-和Count-在统计1和0的区别"><a href="#sum-和Count-在统计1和0的区别" class="headerlink" title="sum()和Count()在统计1和0的区别"></a>sum()和Count()在统计1和0的区别</h4><p>这两个函数的区别在一次使用统计的时候遇到了一点问题，例如一个字段是标识符，也就是一个字段的值除了0就是1，那么要统计为1的话一般来讲就是<code>case when xxx=1 then 1 else 0 end</code>这样就可以值选择为1的行，那么这里如果使用的是count的话，这里的这个规则是无法应用的，具体如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; select * from testestatus;</span><br><span class="line">+-----------+---------------+</span><br><span class="line">| status_id | status_status |</span><br><span class="line">+-----------+---------------+</span><br><span class="line">|         1 |           b&apos;1&apos;|</span><br><span class="line">|         2 |           b&apos;0&apos;|</span><br><span class="line">|         3 |           b&apos;1&apos;|</span><br><span class="line">|         4 |           b&apos;1&apos;|</span><br><span class="line">+-----------+---------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>因为当时没有仔细的区分这两种用法的区别，所以才导致了统计错误。在这里，count只是一个统计，他只是统计应用规则之后的的符合数据，但是sum不同，sum配合<code>case when</code> 则可以选择出相匹配的一些数据</p><h4 id="DATE-FORMAT-函数"><a href="#DATE-FORMAT-函数" class="headerlink" title="DATE_FORMAT()函数"></a>DATE_FORMAT()函数</h4><p>这个函数可以将一个时间按照指定的格式输出，类似于Java中的dateformat函数，是可以将一个时间进行格式的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select date_format(now(),&apos;%Y&apos;);</span><br><span class="line">+-------------------------+</span><br><span class="line">| date_format(now(),&apos;%Y&apos;) |</span><br><span class="line">+-------------------------+</span><br><span class="line">| 2018                    |</span><br><span class="line">+-------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><h3 id="一些常用函数组合："><a href="#一些常用函数组合：" class="headerlink" title="一些常用函数组合："></a>一些常用函数组合：</h3><h6 id="查询本月的数据："><a href="#查询本月的数据：" class="headerlink" title="查询本月的数据："></a>查询本月的数据：</h6><p>在这里是可以使用<code>concat</code>函数和<code>left</code>函数，首先可以使用<code>left</code>函数截取一个字符串长度。比如获取当月的话是可以通过left来获取然后再将1号拼接上去，最后用数据库的日期再减去1号就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">select left(now(),7);</span><br><span class="line">+---------------+</span><br><span class="line">| left(now(),7) |</span><br><span class="line">+---------------+</span><br><span class="line">| 2018-03       |</span><br><span class="line">+---------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select concat(left(now(),7),&apos;-01&apos;);</span><br><span class="line">+-----------------------------+</span><br><span class="line">| concat(left(now(),7),&apos;-01&apos;) |</span><br><span class="line">+-----------------------------+</span><br><span class="line">| 2018-03-01                  |</span><br><span class="line">+-----------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>最后本月的1号就被查询出来了，然后便可以进行数据操作了</p><h6 id="查询指定天数的数据"><a href="#查询指定天数的数据" class="headerlink" title="查询指定天数的数据"></a>查询指定天数的数据</h6><p>假设现在需要查询往期30天的数据，那么可以通过<code>date_sub</code>函数来进行查询：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select date_sub(now(),INTERVAL 30 DAY );</span><br><span class="line">+----------------------------------+</span><br><span class="line">| date_sub(now(),INTERVAL 30 DAY ) |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| 2018-02-22 22:03:22              |</span><br><span class="line">+----------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>目前关于时间方面的sql总结差不多就是这些了，其他的以后再进行补充。</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql时间相关 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在SpringMvc中使用shiro进行安全配置</title>
      <link href="/2018/03/23/%E5%9C%A8SpringMvc%E4%B8%AD%E4%BD%BF%E7%94%A8shiro%E8%BF%9B%E8%A1%8C%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/03/23/%E5%9C%A8SpringMvc%E4%B8%AD%E4%BD%BF%E7%94%A8shiro%E8%BF%9B%E8%A1%8C%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在去年一年之间用过shiro的一些内容，但是最近又有点忘却了。现在正好有一个机会，所以正好搭建起来了然后自己做些记录</p><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h5 id="引入jar包："><a href="#引入jar包：" class="headerlink" title="引入jar包："></a>引入jar包：</h5><p>需要使用shiro的话先在maven中引入以下Jar包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-web --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-ehcache --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h5 id="编写方法体："><a href="#编写方法体：" class="headerlink" title="编写方法体："></a>编写方法体：</h5><p>在此之前需要加入以上jar包；当引入之后便可以进行spring和shiro的构建了。<br>在进行搭建之前需要建立两一个<code>Realm</code>，一个shiro的核心控制器。需要继承<code>AuthorizingRealm</code>然后实现两个方法：</p><p>在<code>doGetAuthenticationInfo(AuthenticationToken authenticationToken)</code>方法中：<br><strong>authenticationToken</strong>参数是从前端页面接受的一个参数，里面封装的是一个token，该token是从前端获取的，具体的获取方法是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">UsernamePasswordToken token =  new UsernamePasswordToken(username, password);</span><br></pre></td></tr></table></figure></p><p>在这段代码中的Controller获取到前端的用户名和密码之后在<code>new UsernamePasswordToken(username, password)</code>这里会生成一个token，然后这个token会被传到realm中，最后在realm中的<code>doGetAuthenticationInfo</code>接收到，然后在这里便可以进行数据库查询，要么返回异常，要么则是返回一个<code>SimpleAuthenticationInfo</code>。这个代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String username = (String) authenticationToken.getPrincipal(); // 获取用户名</span><br><span class="line">String password = new String((char[])authenticationToken.getCredentials()); //得到密码</span><br><span class="line">Map&lt;String ,String &gt; map =new HashMap&lt;String, String&gt;();</span><br><span class="line">map.put(&quot;username&quot; ,username);</span><br><span class="line">map.put(&quot;password&quot;,password);</span><br><span class="line">User user =loginservice.loginCheck(map);</span><br><span class="line">if (user == null || user.getId() == null)&#123;</span><br><span class="line">    throw new UnknownAccountException(); //如果用户名错误</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    return new SimpleAuthenticationInfo(username, password, &quot;myRealm&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码只是简单的进行了数据库查询然后封装为一个token。然后返回即可，那么对用户的权限进行操作的就是如下这个代码：</p><p><code>doGetAuthorizationInfo</code>这个是进行权限分配的方法：具体的方法体如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">     String username = (String) principalCollection.getPrimaryPrincipal(); //通过principalCollection查询到用户的姓名，</span><br><span class="line">     List&lt;Resources&gt; resources =loginservice.getRoleById(username); 通过mybatis配置sql</span><br><span class="line">     List&lt;String&gt; roles =new ArrayList&lt;String&gt;(); // 获取url</span><br><span class="line">     for (Resources  r: resources)&#123;</span><br><span class="line">         roles.add(r.getRole());</span><br><span class="line">     &#125;</span><br><span class="line">    SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class="line">    info.addRoles(roles); //存放权限</span><br><span class="line">    return info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>这里应该是还可以放一个权限，后面几篇日志在加上</strong></p><h5 id="ApplicationContext-xml的配置："><a href="#ApplicationContext-xml的配置：" class="headerlink" title="ApplicationContext.xml的配置："></a>ApplicationContext.xml的配置：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置Shiro --&gt;</span><br><span class="line">    &lt;bean id=&quot;lifecycleBeanPostProcessor&quot; class=&quot;org.apache.shiro.spring.LifecycleBeanPostProcessor&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean class=&quot;org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator&quot;</span><br><span class="line">          depends-on=&quot;lifecycleBeanPostProcessor&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;securityManager&quot; class=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&gt;</span><br><span class="line">        &lt;!-- securityManager 核心控制器 --&gt;</span><br><span class="line">        &lt;property name=&quot;realm&quot; ref=&quot;myRealm&quot;/&gt;  &lt;!-- 配置realm --&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 过滤器配置, 同时在web.xml中配置filter --&gt;</span><br><span class="line">    &lt;bean id=&quot;shiroFilter&quot; class=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;loginUrl&quot; value=&quot;/&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;successUrl&quot; value=&quot;/login/main.jsp&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;unauthorizedUrl&quot; value=&quot;/login/TestPage&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;filters&quot;&gt;</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry key=&quot;authc&quot;&gt;</span><br><span class="line">                    &lt;bean class=&quot;org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter&quot; /&gt;</span><br><span class="line">                &lt;/entry&gt;</span><br><span class="line">            &lt;/map&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;filterChainDefinitions&quot;&gt;</span><br><span class="line">            &lt;value&gt;</span><br><span class="line">                /user/**          = authc    &lt;!-- 需要认证通过, 即登录成功 --&gt;</span><br><span class="line">                /user/insert = authc,roles[ADMIN]</span><br><span class="line">                /user/getUser = authc,roles[MANAGER]</span><br><span class="line">                /user/toinsert = authc,roles[ADMIN]</span><br><span class="line">                /role/admin = authc,roles[ADMIN]</span><br><span class="line">                /role/manager = authc,roles[SUPERMANAG]</span><br><span class="line">                /role/manager = authc,roles[MANAGER]</span><br><span class="line">                &lt;!--/blog/**.do        = authc,perms[blog] &amp;lt;!&amp;ndash; 需要名称为blog的权限permission&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">                &lt;!--/admin/*.do        = authc,roles[admin] &amp;lt;!&amp;ndash; 需要名称为admin的角色role&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">                &lt;!-- 说明: /*匹配的的是/abc;  /** 匹配的是多个/*, 比如/abc/def --&gt;</span><br><span class="line">            &lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>layui使用总结</title>
      <link href="/2018/03/22/layui%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2018/03/22/layui%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于自己平时对前端的css和js学的不是太好，而现在又需要自己来写一个前端页面，无意间在GitHub中看到了<code>layui</code>，所以抱着尝试的心态，学习了一下，现在主要是自己做一个总结。可能之后会学习Vue等前端跨框架</p><h2 id="关于Layui的table组件"><a href="#关于Layui的table组件" class="headerlink" title="关于Layui的table组件"></a>关于Layui的table组件</h2><p>首先Layui的table组件：在Layui中创建一个table组件需要先写一个table标签：<code>&lt;table class=&quot;layui-hide&quot; id=&quot;test&quot; lay-filter=&quot;demo&quot;&gt;&lt;/table&gt;</code>，在这之中 id 是需要在table.render中使用的。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">table.render(&#123;</span><br><span class="line">            elem: &apos;#test&apos;</span><br><span class="line">            ,height: 315</span><br><span class="line">            ,url: &apos;/user/getUser&apos; //数据接口</span><br><span class="line">            ,page: true //开启分页</span><br><span class="line">            ,cols: [[ //表头</span><br><span class="line">                &#123;field: &apos;id&apos;, title: &apos;ID&apos;, width:80, sort: true, fixed: &apos;left&apos;&#125;</span><br><span class="line">                ,&#123;field: &apos;age&apos;, title: &apos;年龄&apos;, width:80&#125;</span><br><span class="line">                ,&#123;field: &apos;dataname&apos;, title: &apos;用户名&apos;, width:80&#125;</span><br><span class="line">                ,&#123;field: &apos;sex&apos;, title: &apos;性别&apos;, width:80&#125;</span><br><span class="line">                ,&#123;field: &apos;password&apos;, title: &apos;密码&apos;, width:80, sort: true&#125;</span><br><span class="line">                ,&#123;fixed: &apos;right&apos;, width: 165, align:&apos;center&apos;, toolbar: &apos;#barDemo&apos;&#125;</span><br><span class="line">            ]]</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>在这段js之中<code>elem</code>后面的值表示的就是table标签之后的id，而这段代码表示的就是在table中异步加载数据，后面的toolbar 表示的是需要创建三个button。<br>注意最后一行的<code>toolbar : #barDemo</code> 它会跟下面的三个按钮一起对应。<br>并且将这三个按钮一起添加到那个表格的后面，这之后的三个标签的创建方式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/html&quot; id=&quot;barDemo&quot;&gt;</span><br><span class="line">        &lt;a class=&quot;layui-btn layui-btn-primary layui-btn-xs&quot; lay-event=&quot;detail&quot;&gt;新增&lt;/a&gt;</span><br><span class="line">        &lt;a class=&quot;layui-btn layui-btn-xs&quot; lay-event=&quot;edit&quot;&gt;编辑&lt;/a&gt;</span><br><span class="line">        &lt;a class=&quot;layui-btn layui-btn-danger layui-btn-xs&quot; lay-event=&quot;del&quot;&gt;删除&lt;/a&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>这三个<a>后的<code>lay-event</code>的值在之后会用到的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">table.on(&apos;tool(demo)&apos;, function(obj)&#123; //注：tool是工具条事件名，demo是table原始容器的属性 lay-filter=&quot;对应的值&quot; </span><br><span class="line">            var data = obj.data //获得当前行数据</span><br><span class="line">                ,layEvent = obj.event; //获得 lay-event 对应的值</span><br></pre></td></tr></table></figure></a></p><p><code>function(obj)</code>的obj传入进来的是一些参数，obj.data 是获取所选中的数据行的一些值，obj.Event 获取的是前面的<code>lay-event</code>的值，在之后可以判断<code>if(layEvent === &#39;detail&#39;)</code>，然后就可以及进行操作了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">layer.open(&#123;</span><br><span class="line">                    type: 1,</span><br><span class="line">                    title: &quot;用户信息修改&quot;,</span><br><span class="line">                    closeBtn: 1,</span><br><span class="line">                    area: &apos;auto&apos;,</span><br><span class="line">                    shadeClose: true,</span><br><span class="line">                    skin: &apos;yourclass&apos;,</span><br><span class="line">                    content: &apos;&apos;// 在这里可以写html标签然后会在那个面板显示了。 </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">layer.confirm(&apos;真的删除行么&apos;, function(index)&#123;</span><br><span class="line">                    obj.del(); //删除对应行（tr）的DOM结构</span><br><span class="line">                    //向服务端发送删除指令</span><br><span class="line">                    layer.close(index);</span><br><span class="line">                    $.ajax(&#123;</span><br></pre></td></tr></table></figure><p><code>confirm</code>可以弹出一个框来确认是否进行删除以免用户的误操作，而obj.del()则是可以删除该行。layer.close()则是可以关闭次对话框。<br>而<code>lay.message</code>则是一个弹窗，用于在页面上提示用户进行了什么操作。</p><h2 id="和Jquery一起使用"><a href="#和Jquery一起使用" class="headerlink" title="和Jquery一起使用"></a>和Jquery一起使用</h2><p>这个UI框架是可以和Jquery一起来使用，Jquery可以发起异步请求从而来进行一些数据操作。</p><h2 id="使用截图："><a href="#使用截图：" class="headerlink" title="使用截图："></a>使用截图：</h2><p><img src="layui截图.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记踩过的SpringMvc的一些坑</title>
      <link href="/2018/03/22/%E8%AE%B0%E8%B8%A9%E8%BF%87%E7%9A%84SpringMvc%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
      <url>/2018/03/22/%E8%AE%B0%E8%B8%A9%E8%BF%87%E7%9A%84SpringMvc%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>时隔一年多，再次在新公司期间接触了SpringMvc，由于之前一段时间再用Python和SpringBoot做项目，所以一时间导致SpringMvc配置中出现了好多坑，遂逐一记录：</p><h1 id="关于Dao层找不到的异常"><a href="#关于Dao层找不到的异常" class="headerlink" title="关于Dao层找不到的异常"></a>关于Dao层找不到的异常</h1><p>在配置的过程中这个异常出现的次数是最多的，也是最烦人的，一般是由于在Controller层中找不到Service层，然后Service层的Impl在自动装配dao的时候找不到dao，所以异常就会沿着service到达contrller层，但是总结起来，在今天的配置中遇到的情况主要又以下几种：</p><h5 id="web-xml中的配置出现了错误："><a href="#web-xml中的配置出现了错误：" class="headerlink" title="web.xml中的配置出现了错误："></a>web.xml中的配置出现了错误：</h5><p>在Spring5中默认xml文件是在WEB-INF中的，于是也就想着少配置一点是一点的原则，所以在web.xml中只是配置了分发器。但是今天却在其中发现了一些可能会导致Dao层找不到的原因，如下所示是我之前在web.xml中配置的一个详情：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;spring-dispatcher&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;&lt;!-- 需要wenmvc这个jar包--&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;spring-dispatcher&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>对，就是这么简单，所以也才导致了Dao层出错了，具体解释如下：<br>在StackOverFlow中发现有一个人的解释十分的独特，大意是web.xml中的配置有问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">It is because the servlet-context.xml is placed inside the dispatcher servlet. Since dispatcher servlet is child of parent context, the parent context does not have the dependencies of child, So if you put the servlet-context.xml inside context param, and you must have the appServlet-servlet.xml inside the init param it will work fine.</span><br></pre></td></tr></table></figure></p><p>于是我自己就修改了web.xml这个文件，修改之后的web.xml配置如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line">    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="line">  &lt;/listener&gt;</span><br><span class="line">  &lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;</span><br><span class="line">      classpath:ApplicationContext.xml</span><br><span class="line">    &lt;/param-value&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;spring-dispatcher&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">      &lt;param-value&gt;</span><br><span class="line">        classpath:spring-mvc.xml</span><br><span class="line">      &lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;spring-dispatcher&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>然后马上就运行成功了。。。</p><h5 id="这个就属于自己粗心了"><a href="#这个就属于自己粗心了" class="headerlink" title="这个就属于自己粗心了"></a>这个就属于自己粗心了</h5><p>在mapper配置文件中我这边是返回的一个集合。然后标签打错了，就成了<code>resultType</code>于是一直出错，后来换成了正确的<code>resultMap</code>就正确了。</p><h5 id="修改web-xml之后导致的命名空间出错了"><a href="#修改web-xml之后导致的命名空间出错了" class="headerlink" title="修改web.xml之后导致的命名空间出错了"></a>修改web.xml之后导致的命名空间出错了</h5>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web后端 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于Java的链式代理</title>
      <link href="/2018/03/20/%E5%85%B3%E4%BA%8EJava%E7%9A%84%E9%93%BE%E5%BC%8F%E4%BB%A3%E7%90%86/"/>
      <url>/2018/03/20/%E5%85%B3%E4%BA%8EJava%E7%9A%84%E9%93%BE%E5%BC%8F%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="关于Java的代理"><a href="#关于Java的代理" class="headerlink" title="关于Java的代理"></a>关于Java的代理</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ol><li>了解Enhancer的意义</li><li>查看生成的字节码（和原来的对比）</li><li>分析代理的区别</li><li>完成代理链</li></ol><p>首先需要新建一个代理管理类，这个管理类会存储目标代理类，目标代理方法，以及一个List，List中存储的是一些代理类，最后是需要一个操作就是</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记一次使用Spring5构件Web的过程</title>
      <link href="/2018/03/20/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8Spring5%E6%9E%84%E4%BB%B6Web%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/03/20/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8Spring5%E6%9E%84%E4%BB%B6Web%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>由于当时在学习Spring的时候还是在一年前，那时候Spring才是刚到4.3还是4.5.然后做了一个项目之后便了解到了SpringBoot，于是一直在用SpringBoot，所以导致现在配置起来就有点忘记了。所以现在记录下此次配置的过程中所遇到的坑。</p><h1 id="踩过的坑："><a href="#踩过的坑：" class="headerlink" title="踩过的坑："></a>踩过的坑：</h1><h2 id="遇到在web-xml中分发请求的类找不到"><a href="#遇到在web-xml中分发请求的类找不到" class="headerlink" title="遇到在web.xml中分发请求的类找不到"></a>遇到在web.xml中分发请求的类找不到</h2><p>第一个坑就是<code>org.springframework.web.servlet.DispatcherServlet</code>这个类一直找不到；于是在POM中添加了个各种依赖终于发现缺少<code>Spring Web MVC</code>这个依赖包。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;spring-dispatcher&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;&lt;!-- 需要webmvc这个jar包--&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br></pre></td></tr></table></figure></p><h2 id="开启Tomcat的时候一直提示什么Cache错误"><a href="#开启Tomcat的时候一直提示什么Cache错误" class="headerlink" title="开启Tomcat的时候一直提示什么Cache错误"></a>开启Tomcat的时候一直提示什么Cache错误</h2><p>错误提示：<code>CacheManager No Bean Found - Not Trying to setup any Cache</code> 当时一直在到处查找是否开启数据库什么的，后来在StackOverFlow中查询到了问题的解决办法：<br><a href="https://stackoverflow.com/questions/24816502/cachemanager-no-bean-found-not-trying-to-setup-any-cache" target="_blank" rel="noopener">StackOverFlow中关于Cache的错误</a><br>根据他人的答案做一个总结就是：在配置文件中发现若文件中含有<code>&lt;tx</code>的话，IDEA会自动的将引入类似<code>***/cache</code>等的<code>xsd</code>文件，所以导致了这个异常的出现。所以一般来说又两种解决办法。</p><h4 id="用IDEA的模板直接创建spring的配置文件："><a href="#用IDEA的模板直接创建spring的配置文件：" class="headerlink" title="用IDEA的模板直接创建spring的配置文件："></a>用IDEA的模板直接创建spring的配置文件：</h4><p>过程：<code>File -&gt; new -&gt; XMLConfigurationFile -&gt; Spring Config</code> 然后Spring自动的将所需要的命名空间添加到了新建的xml文件中。此时只需要添加相应的标签即可。</p><h4 id="删除导致异常的xsd"><a href="#删除导致异常的xsd" class="headerlink" title="删除导致异常的xsd"></a>删除导致异常的xsd</h4><p>步骤：在xml配置文件中删除掉带有<code>cache</code>的的xsd</p><h2 id="静态资源的配置和引用"><a href="#静态资源的配置和引用" class="headerlink" title="静态资源的配置和引用"></a>静态资源的配置和引用</h2><p>在去年配置静态资源的时候与今年的相差无几，但是在引用的时候却出现了一些变化。<br>去年做题的网站的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">去年获取静态资源的配置：</span><br><span class="line">    &lt;mvc:resources mapping=&quot;/static/**&quot; location=&quot;/static/&quot; /&gt;</span><br><span class="line">    &lt;mvc:resources mapping=&quot;/static/**&quot; location=&quot;/static/&quot; /&gt;</span><br><span class="line">    &lt;mvc:resources mapping=&quot;/uploadimg/**&quot; location=&quot;/uploadimg/&quot; /&gt;</span><br><span class="line">去年的jsp文件中的引用：</span><br><span class="line"></span><br><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;utf-8&quot;%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;解题目录&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;</span><br><span class="line">src=&quot;$&#123;pageContext.request.contextPath&#125;/static/js/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;</span><br><span class="line">src=&quot;$&#123;pageContext.request.contextPath &#125;/static/js/bootstrap.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot;</span><br><span class="line">href=&quot;$&#123;pageContext.request.contextPath &#125;/static/css/bootstrap.css&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot;</span><br><span class="line">href=&quot;$&#123;pageContext.request.contextPath &#125;/static/css/bootstrap-theme.css&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot;</span><br><span class="line">href=&quot;$&#123;pageContext.request.contextPath &#125;/static/css/examination.css&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>很明显可以看到：在jsp中是首先获取到项目目录然后以绝对路径来获取静态资源</p><p>今天新建的项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xml配置文件：</span><br><span class="line">    &lt;mvc:resources mapping=&quot;/static/**&quot; location=&quot;/WEB-INF/static/&quot; /&gt;</span><br><span class="line">    &lt;mvc:resources mapping=&quot;/static/**&quot; location=&quot;/WEB-INF/static/&quot; /&gt;</span><br><span class="line">    &lt;mvc:resources mapping=&quot;/uploadimg/**&quot; location=&quot;/WEB-INF/uploadimg/&quot; /&gt;</span><br><span class="line"></span><br><span class="line">jsp文件中的引用：</span><br><span class="line"></span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;link href=&quot;../static/css/TestPage.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure></p><p>在这里会发现今天在配置文件中的引用多了一个<code>WEB-INF</code>然后再是static文件夹</p><h2 id="关于为什么xml现在默认在WEB-INF中："><a href="#关于为什么xml现在默认在WEB-INF中：" class="headerlink" title="关于为什么xml现在默认在WEB-INF中："></a>关于为什么xml现在默认在WEB-INF中：</h2><p>在去年的时候记得spring的配置文件都是在resources中的，但是今天却发现在resources中配置的话启动tomcat会导致一条提示就是<code>IOException parsing XML document from ServletContext resource [/WEB-INF/XXXXXX]</code><br>后来查询到发现是可以修改的，默认的话直接在WEB-INF中按照前面创建xml的方式创建一个即可，但是若需要修改的话可以参照一下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">这个xml配置表示的是基本配置的Application.xml的位置</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;</span><br><span class="line">    classpath:ApplicationContext.xml</span><br><span class="line">    &lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br><span class="line"></span><br><span class="line">这个是配置分发器的配置文件的位置：</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;servlet-name&gt;springDefault&lt;/servlet-name&gt;</span><br><span class="line">&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;</span><br><span class="line">            classpath:spring-mvc.xml</span><br><span class="line">            &lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure></p><p>可以发现在去年的时候都是制定了配置文件的路径的，所以才可以在resources中配置xml，但是再看今年的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;spring-dispatcher&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;&lt;!-- 需要wenmvc这个jar包--&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;spring-dispatcher&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>会发现都没配置好，所以会出现需要配置在默认的位置上。<br><a href="https://stackoverflow.com/questions/11652931/applicationcontext-xml-is-being-copied-to-web-inf-classes-from-src-main-resourc" target="_blank" rel="noopener">StackOverFlow中默认WEB-INF配置的解释</a></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记一次sql嵌套查询的使用方法</title>
      <link href="/2018/03/16/%E8%AE%B0%E4%B8%80%E6%AC%A1sql%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2018/03/16/%E8%AE%B0%E4%B8%80%E6%AC%A1sql%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="记一次sql嵌套查询的使用方法"><a href="#记一次sql嵌套查询的使用方法" class="headerlink" title="记一次sql嵌套查询的使用方法"></a>记一次sql嵌套查询的使用方法</h1><p>一般来讲在sql中嵌套查询在where之后以便于查询范围的限制。<br>现在有一个情况就是就是现在嵌套查询的话是需要查询出结果值然后返回为一个字段。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h4 id="思路一：既然需要返回的是一个字段，那么是需要一个嵌套查询，所以一般的表达式是："><a href="#思路一：既然需要返回的是一个字段，那么是需要一个嵌套查询，所以一般的表达式是：" class="headerlink" title="思路一：既然需要返回的是一个字段，那么是需要一个嵌套查询，所以一般的表达式是："></a>思路一：既然需要返回的是一个字段，那么是需要一个嵌套查询，所以一般的表达式是：</h4><p><code>select &lt;表达式&gt;（select&lt;表达式&gt;）as name</code>这样作为一个查询。<br>首先在括号<code>()</code>里面的一个select语句是可以作为一个字段的，可以通过在后面加一个as <code>字段</code>从而返回的是一个字段。、<br>那么这样书写sql之后便可以作为一个字段然后返回结果了。但是这样写有一个弊端，就是若没有groupby，则会导致查询出来的数据会有多余重复得。<br>类似下面这条sql：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * ,(SELECT SUM(CASE WHEN car_information.`car_status` =&apos;1&apos; THEN 1 ELSE 0 END)</span><br><span class="line">FROM car_information WHERE car_information.`cat_place`=&apos;武汉&apos;) AS &apos;weifacishi&apos; </span><br><span class="line">FROM car LEFT JOIN car_information ON car.`car_num`=car_information.`car_num` ;</span><br></pre></td></tr></table></figure></p><p>查询结果：</p><p><img src="sql重复数据.png" alt=""></p><p>可以看到重复了许多数据，所以表明需要实现这个查询集合需要修改sql语句。</p><h4 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h4><p>当看到这种写法出现重复得时候，便决定这个sql必须进行groupby，首先写了一个sql来测试groupby得，发现可以。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT car_information.`car_num`,car_information.`cat_place`, SUM(CASE WHEN car_information.`car_status` = &apos;1&apos; THEN  1  ELSE 0 END) AS &apos;weifacishi&apos;</span><br><span class="line"> FROM car_information GROUP BY car_information.`car_num`;</span><br></pre></td></tr></table></figure></p><p>查询结果：</p><p><img src="进行Groupby测试.png" alt=""><br>发现，思路确实是对的，只不过需要对sql重新进行排序。</p><h4 id="思路三："><a href="#思路三：" class="headerlink" title="思路三："></a>思路三：</h4><p>有了上面得两步之后便差不多知道如何进行操作了：首先应该进行一个左连接，以car表为左表，car_information为右表。连接之后再这个结果集中进行groupby然后统计。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM (SELECT car.`car_num`,car.`car_wearhouse`,car_information.`car_status` FROM car LEFT JOIN car_information ON car.`car_num`=car_information.`car_num`) AS t GROUP BY t.car_num;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="正确得结果.png" alt=""></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li><p>在sql语句中，几个表之间得连接是可以做一个结果集得，这个结果集可以通过as命名为别名然后通过操作这个别名来操作；</p></li><li><p>不理解得地方：<br> 在sql中<code>select t.XXX</code>这个t是后来才被命名得，但是在之前却是可以使用得，因此想知道sql得运行原理—以后再了解</p></li><li><p>在sql中统计得用法<code>case when XX==&#39;XX&#39; then 1 else 0 end</code>，并且嵌套得使用得() as ‘XXX’</p><h2 id="其余的以后再补充"><a href="#其余的以后再补充" class="headerlink" title="其余的以后再补充"></a>其余的以后再补充</h2></li></ol><h4 id="补充一："><a href="#补充一：" class="headerlink" title="补充一："></a>补充一：</h4><p>在sql中左连接和内连接的优先选择问题，内连接会返回在两表中都包含的值，而左连接的话，当右边的表数据在左表中不存在的时候会出现null，而内连接则不会产生这种情况。<br>还有就是UNION的使用，union在两张表返回的结果集是一样的话而且两表需要拼接的话是非常有效的</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql嵌套查询 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode的一道字符串题目：最长不重复的子字符串长度</title>
      <link href="/2018/03/14/LeetCode%E7%9A%84%E4%B8%80%E9%81%93%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE%EF%BC%9A%E6%9C%80%E9%95%BF%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/"/>
      <url>/2018/03/14/LeetCode%E7%9A%84%E4%B8%80%E9%81%93%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE%EF%BC%9A%E6%9C%80%E9%95%BF%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/</url>
      <content type="html"><![CDATA[<h1 id="找出最长的不重复的子字符串"><a href="#找出最长的不重复的子字符串" class="headerlink" title="找出最长的不重复的子字符串"></a>找出最长的不重复的子字符串</h1><p>首先一拿到这个题目的时候想到利用set集合来存储子字符串，当发现含有重复的字符的时候就将这个set清零。这个做法有一个明显的缺点就是当子字符串中的某一个字符和后面的重复的话，那么后面不行同的也会被清楚：例如<code>dfvfab</code>，在这个里面<code>vfab</code>应该是最短的子字符串，但是这时候这个方法会输出错误的值。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>自己想不到解法之后就参考了Solution2，这个方法想了下也挺好的，遂记录下：<br>该方法是设置两个游标，一个在前，一个在后(定义为i,j)，当前面的一个发现在set集合中含有重复的字符，那此时停止i,然后j自增，当发现在set集合中已经将重复的那个字符剔除之后，此时在i自增<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public int lengthOfLongestSubstring(String s) &#123;</span><br><span class="line">        //错误的思路，以为存入set就可以</span><br><span class="line">        // if (s == null || s.length() == 0)&#123;</span><br><span class="line">        //     return 0;</span><br><span class="line">        // &#125;</span><br><span class="line">        // Set&lt;Character&gt; set =new HashSet&lt;&gt;();</span><br><span class="line">        // int max=0;</span><br><span class="line">        // for (int i =0 ;i&lt; s.length() ;i++)&#123;</span><br><span class="line">        //     char c = s.charAt(i);</span><br><span class="line">        //     if (set.contains(c))&#123;</span><br><span class="line">        //         set.clear();</span><br><span class="line">        //     &#125;</span><br><span class="line">        //     set.add(c);</span><br><span class="line">        //     if (set.size() &gt; max)&#123;</span><br><span class="line">        //         max = set.size();</span><br><span class="line">        //     &#125;</span><br><span class="line">        // &#125;</span><br><span class="line">        // return max;</span><br><span class="line">        if(s == null || s.length() ==0)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Character&gt; set =new HashSet&lt;&gt;();</span><br><span class="line">        int i=0,j=0,result=0,n=s.length();</span><br><span class="line">        while(i &lt; n &amp;&amp; j &lt;n)&#123;</span><br><span class="line">            if(!set.contains(s.charAt(j)))&#123;</span><br><span class="line">                set.add(s.charAt(j++));</span><br><span class="line">                result=Math.max(result,j-i);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                set.remove(s.charAt(i++));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="与求最长的子字符串（朴素求解法）相比较："><a href="#与求最长的子字符串（朴素求解法）相比较：" class="headerlink" title="与求最长的子字符串（朴素求解法）相比较："></a>与求最长的子字符串（朴素求解法）相比较：</h2><pre><code>朴素求解法的一般步骤是已经给出了子字符串，然后判断是否是另一个字符串的子字符串。那么此时既然已知子字符串的话，其步骤就是通过子字符串依次比较</code></pre><h2 id="与判断链表成环相比较："><a href="#与判断链表成环相比较：" class="headerlink" title="与判断链表成环相比较："></a>与判断链表成环相比较：</h2><pre><code>判断链表成环也有一个快慢指针的方法，但是在那个快慢指针中，快慢指针都是同时在变化的</code></pre>]]></content>
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串相关 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java通过反射用指定构造器初始化</title>
      <link href="/2018/03/12/Java%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E7%94%A8%E6%8C%87%E5%AE%9A%E6%9E%84%E9%80%A0%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2018/03/12/Java%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E7%94%A8%E6%8C%87%E5%AE%9A%E6%9E%84%E9%80%A0%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      <content type="html"><![CDATA[<h1 id="Java通过反射用指定构造器初始化"><a href="#Java通过反射用指定构造器初始化" class="headerlink" title="Java通过反射用指定构造器初始化"></a>Java通过反射用指定构造器初始化</h1><p>首先， 一般来讲在Java中初始化一个类是通过new来操作的， 但是有一种情况却不适合这种new操作，那就是通过配置文件来进行实例化操作。</p><p>例如，在Spring中，需要加载配置文件中的类，这是比较常见的配置。  那么在Spring启动类中如何将这个类加载进容器中呢，显然进行new操作是不太现实的。 这时候就需要Java的反射操作了，Java的反射操作一般来讲有两种：分别是<code>Class.forName()</code>和<code>classLoader.loadCLass()</code> 最后都是通过<code>newInstance()</code> 来进行初始化，但是在这里却发现假设反射的类中含有带参数的构造器，那么此时这个newInstance()就会抛<code>NoSuchMethodException</code> ，这是因为newInstance()因为不加参数所以调用的是默认构造器，而反射类中已经包含了带参数的构造器，所以无不带参数构造器，遂抛出异常。</p><p>但是此时newInstance()是加不了参数的，所以若需要通过制定构造器来进行反射的话需要一个类叫Constructor，</p><p>新建一个实体类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package reflec.cglib_test.ConstructTest;</span><br><span class="line">public class Entity1 &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;static初始化&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Entity1() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int id;</span><br><span class="line">    String name;</span><br><span class="line">    public Entity1(int id, String name) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void say()&#123;</span><br><span class="line">        System.out.println(this.id);</span><br><span class="line">        System.out.println(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package reflec.cglib_test.ConstructTest;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line">public class Test1 &#123;</span><br><span class="line">    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException &#123;</span><br><span class="line">//        Entity1 en2=Entity1.class.getConstructor(int.class,String.class).newInstance(1,&quot;2&quot;);</span><br><span class="line">//        Class.forName(&quot;reflec.cglib_test.ConstructTest.Entity1&quot;).newInstance();</span><br><span class="line">//        Test1.class.getClassLoader().loadClass(&quot;reflec.cglib_test.ConstructTest.Entity1&quot;);</span><br><span class="line">//        en2.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void do1(Object object)&#123;</span><br><span class="line">        System.out.println(object.getClass().getName().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的Test1中，下面两行在newInstance()中添加参数的话是会提示出错的。那么如何调用哪个带参数的构造器呢？ 这就是<code>Constructor</code> 类的功能了，他可以通过Class.getConstructor()来选择参数，在这里需要注意的是int及其他的java基本数据类型都是原生的类，非封装类。之后再newInstance()中输入参数既可以反射调用了。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java高级特性 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记一次springboot-mybatis找不到dao层的错误</title>
      <link href="/2018/03/05/%E8%AE%B0%E4%B8%80%E6%AC%A1springboot-mybatis%E6%89%BE%E4%B8%8D%E5%88%B0dao%E5%B1%82%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2018/03/05/%E8%AE%B0%E4%B8%80%E6%AC%A1springboot-mybatis%E6%89%BE%E4%B8%8D%E5%88%B0dao%E5%B1%82%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>写了三个多月的Python，今天再写一个springboot-mybatis的项目的时候好多东西都忘记了，尤其是在今天下午遇到了一个关于mybatis的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Field peopleDao in com.example.serviceImpl.PeopleServiceImpl required a bean of type &apos;com.example.dao.PeopleDao&apos; that could not be found.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider defining a bean of type &apos;com.example.dao.PeopleDao&apos; in your configuration</span><br></pre></td></tr></table></figure></p><p>很明显就是dao层无法被扫描到，在一下午的尝试中，首先检查了包结构，如下:<br>com<br>—example<br>——controller<br>————XXX.java<br>——dao<br>————XXX.java<br>——–***<br>——Application.java</p><p>也就是说这个包结构是完全符合springboot的规范的，也就表示在启动类上面的注解是完全可以扫描到dao包下面的那个接口的。所以注解不存在问题。</p><p>然后尝试了第二种方法。修改启动类的扫描结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@ComponentScan(basePackages = &#123;com.example.dao&#125;)</span><br><span class="line">public class IpApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(IpApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改之后确实不会报错了但是有一个问题就是除了这个dao下面的包可以被扫描之后其他的例如controller包都无法被扫描进来。所以也是无法根本解决问题，</p><p>最后无意间注意到了在Springboot的启动日志中出现了一句话：<strong>NO Mybatis mapperXXX</strong>后面的具体忘了，也就是说在这里根本就没有扫描到mapper，后来发现是查了一个jar包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>也就是这个jar包导致了那个mapper一直找不到，不过具体原因待后面时间再补充</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于Java线程的一些思考</title>
      <link href="/2018/02/07/%E5%85%B3%E4%BA%8EJava%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
      <url>/2018/02/07/%E5%85%B3%E4%BA%8EJava%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<h1 id="消费者和生产者的模型："><a href="#消费者和生产者的模型：" class="headerlink" title="消费者和生产者的模型："></a>消费者和生产者的模型：</h1><p>今天在看《现代操作系统》P73页的一个关于多线程的竞态条件的时候书中说到了<code>唤醒等待位方法</code>，这个方法使我突然想起联想到以前在Java多线程中sleep()方法会清除中断状态的一些类似之处：<br>树上的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#definde N 100</span><br><span class="line">int count =0;</span><br><span class="line">void producer(void)&#123;</span><br><span class="line">int item;</span><br><span class="line">while(True)&#123;</span><br><span class="line">    item=producer_item();</span><br><span class="line">    if (count == N) sleep();</span><br><span class="line">    insert_item(item);</span><br><span class="line">    count=count+1;</span><br><span class="line">    if (count == 1 )wakeup(consumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void consumer(void)&#123;</span><br><span class="line">    int item;</span><br><span class="line">    while(true)&#123;</span><br><span class="line">        if (count == 0)sleep();</span><br><span class="line">        item =remove_item();</span><br><span class="line">        count=count -1;</span><br><span class="line">        if (count == N-1) wakeup(producer);</span><br><span class="line">        consumer_item()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在书中提到过一个情况就是：当消费者判断count==0的时候是会睡眠的，但是此时由于某种情况(线程的sleep()方法还没被执行完)，而恰巧生产者又生产了一个item，导致此时count加一为1，而当count为1的时候生产者是会发出一个wakeup信号给消费者的，此时，由于消费者并没有睡眠因此会忽略掉该信号，而当消费者真正睡眠之后又由于生产者再不会进行通知，导致队列被生产者塞满，从而该模型阻塞。<br>那么为了解决该方法，书中引入了<code>唤醒等待位方法</code>，该方法就是在生产者发出信号给消费者的时候添加一个中断状态，而当该线程需要进行睡眠的时候会先判断状态，若是wakeup则不进行睡眠</p><h2 id="Java多线程中的引用："><a href="#Java多线程中的引用：" class="headerlink" title="Java多线程中的引用："></a>Java多线程中的引用：</h2><p>在Java中调用interrupt()方法的原理也是类似的，设置一个中断状态，但是这样做的原因是为了<code>安全起见</code>，因为通过其他的线程来中断另一个线程是及其不安全的，在其他线程发出中断信号的时候，它并不会知道另一个线程目前正在做什么事情，所以安全的做法是设置一个中断状态</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pandas的transform和apply</title>
      <link href="/2017/12/10/pandas%E7%9A%84transform%E5%92%8Capply/"/>
      <url>/2017/12/10/pandas%E7%9A%84transform%E5%92%8Capply/</url>
      <content type="html"><![CDATA[<h1 id="q区别"><a href="#q区别" class="headerlink" title="q区别"></a>q区别</h1><p>transform是Pandas里面Groupby的一个方法，主要作用是对groupby之后的dataframe进行处理，接收的参数一个是一个Series<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: df = pd.DataFrame(&#123;<span class="string">'B'</span>: [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>,<span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line">    ...:                    <span class="string">'C'</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>], <span class="string">'D'</span>: [<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: df</span><br><span class="line">Out[<span class="number">19</span>]: </span><br><span class="line">       B  C   D</span><br><span class="line"><span class="number">0</span>    one  <span class="number">1</span>  <span class="number">11</span></span><br><span class="line"><span class="number">1</span>    one  <span class="number">2</span>  <span class="number">12</span></span><br><span class="line"><span class="number">2</span>    two  <span class="number">3</span>  <span class="number">13</span></span><br><span class="line"><span class="number">3</span>  three  <span class="number">4</span>  <span class="number">14</span></span><br><span class="line"><span class="number">4</span>    two  <span class="number">5</span>  <span class="number">15</span></span><br><span class="line"><span class="number">5</span>    two  <span class="number">6</span>  <span class="number">16</span></span><br><span class="line"><span class="number">6</span>    one  <span class="number">7</span>  <span class="number">17</span></span><br><span class="line"><span class="number">7</span>  three  <span class="number">8</span>  <span class="number">18</span></span><br></pre></td></tr></table></figure></p><p>那么需要对其groupby之后求C的平均值怎么办<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">n [23]: df.groupby(&apos;B&apos;).transform(lambda x : x.mean())</span><br><span class="line">Out[23]: </span><br><span class="line">   C   D</span><br><span class="line">0  3  13</span><br><span class="line">1  3  13</span><br><span class="line">2  4  14</span><br><span class="line">3  6  16</span><br><span class="line">4  4  14</span><br><span class="line">5  4  14</span><br><span class="line">6  3  13</span><br><span class="line">7  6  16</span><br><span class="line"></span><br><span class="line">In [24]: df.groupby(&apos;B&apos;).apply(lambda x : x.mean())</span><br><span class="line">Out[24]: </span><br><span class="line">              C          D</span><br><span class="line">B</span><br><span class="line">one    3.333333  13.333333</span><br><span class="line">three  6.000000  16.000000</span><br><span class="line">two    4.666667  14.666667</span><br></pre></td></tr></table></figure></p><p>同样是一个lambda表达式，那么为什么会出现两种不同的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">In [40]: df1 = pd.DataFrame(&#123;&apos;B&apos;: [&apos;one&apos;, &apos;two&apos;, &apos;three&apos;,&apos;four&apos;],</span><br><span class="line">    ...:                    &apos;C&apos;: [1,2,1,1], &apos;D&apos;: [11,12,13,14]&#125;)</span><br><span class="line"></span><br><span class="line">In [41]: df1</span><br><span class="line">Out[41]: </span><br><span class="line">       B  C   D</span><br><span class="line">0    one  1  11</span><br><span class="line">1    two  2  12</span><br><span class="line">2  three  1  13</span><br><span class="line">3   four  1  14</span><br><span class="line"></span><br><span class="line">In [42]: def fun1(x):</span><br><span class="line">    ...:     print x</span><br><span class="line">    ...: </span><br><span class="line"></span><br><span class="line">In [43]: print df1.groupby(&apos;C&apos;).transform(fun1)</span><br><span class="line">0      one</span><br><span class="line">2    three</span><br><span class="line">3     four</span><br><span class="line">Name: B, dtype: object</span><br><span class="line">0    11</span><br><span class="line">2    13</span><br><span class="line">3    14</span><br><span class="line">Name: D, dtype: object</span><br><span class="line">       B   D</span><br><span class="line">0    one  11</span><br><span class="line">2  three  13</span><br><span class="line">3   four  14</span><br><span class="line"></span><br><span class="line">1    two</span><br><span class="line">Name: B, dtype: object</span><br><span class="line">1    12</span><br><span class="line">Name: D, dtype: object</span><br><span class="line">       B   D</span><br><span class="line">0    one  11</span><br><span class="line">1    two  12</span><br><span class="line">2  three  13</span><br><span class="line">3   four  14</span><br></pre></td></tr></table></figure></p><p>从上面可以发现trandform每次传入的是一个series，即按照C分组之后，首先传入的是‘B’列，然后是‘D’列，然后是’B’’D’列，那么对于apply来说他传入的是什么呢：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [45]: df1.groupby(&apos;C&apos;).apply(fun1)</span><br><span class="line">       B  C   D</span><br><span class="line">0    one  1  11</span><br><span class="line">2  three  1  13</span><br><span class="line">3   four  1  14</span><br><span class="line">       B  C   D</span><br><span class="line">0    one  1  11</span><br><span class="line">2  three  1  13</span><br><span class="line">3   four  1  14</span><br><span class="line">     B  C   D</span><br><span class="line">1  two  2  12</span><br><span class="line">Out[45]: </span><br><span class="line">Empty DataFrame</span><br><span class="line">Columns: []</span><br><span class="line">Index: []</span><br></pre></td></tr></table></figure></p><p>打印结果如上，说明apply和transform在接受参数上的差异(一个接受的是DataFrame，一个是Series)，上图中的打印第一个和第二个重复问题待会再解释，<br>那么假设有如下的lambda表达式：</p><blockquote><p>lambda x : return [‘C’]-x[‘D’]<br>结果会怎样显示? 新增加一列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [49]: df1[&apos;E&apos;]=20</span><br><span class="line">In [50]: df1</span><br><span class="line">Out[50]: </span><br><span class="line">       B  C   D   E</span><br><span class="line">0    one  1  11  20</span><br><span class="line">1    two  2  12  20</span><br><span class="line">2  three  1  13  20</span><br><span class="line">3   four  1  14  20</span><br><span class="line">In [51]: df1.groupby(&apos;C&apos;).transform(lambda x :(x[&apos;D&apos;]-x[&apos;E&apos;]))</span><br><span class="line">Out[51]: </span><br><span class="line">       B   D   E</span><br><span class="line">0    one  11  20</span><br><span class="line">1    two  12  20</span><br><span class="line">2  three  13  20</span><br><span class="line">3   four  14  20</span><br></pre></td></tr></table></figure></p></blockquote><p>那么出现这样的情况的原因是什么呢？如前面所示的，transform传入的是一个series</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>pandas的操作使用</title>
      <link href="/2017/12/03/pandas%E7%9A%84%E6%93%8D%E4%BD%9C%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/12/03/pandas%E7%9A%84%E6%93%8D%E4%BD%9C%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="pandas读取csv文件"><a href="#pandas读取csv文件" class="headerlink" title="pandas读取csv文件"></a>pandas读取csv文件</h1><p>在pandas读里面包含了几个函数分别用来读取csv或者excel文件：<br><code>read_csv</code>方法用来读取一个csv文件一般常用参数是<code>path</code>:用于指定一个文件及其目录<br><code>sep</code>表示读取该csv文件的时候是以什么制表符读取的，一般是’,’<br><code>usecols</code>表示需要读取csv的多少列，这是一个绝对索引，0代表的是第一列，参数为一个list</p><h1 id="Pandas的结构："><a href="#Pandas的结构：" class="headerlink" title="Pandas的结构："></a>Pandas的结构：</h1><p>pandas经常使用的结构一般是dataframe和series,DataFrame类似于二维数组，或者sql里面的一张表，若在创建的时候为指定索引的话则默认从0开始一次递增为索引：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">In [<span class="number">15</span>]: df_2=pd.DataFrame(data=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: df_2</span><br><span class="line">Out[<span class="number">16</span>]: </span><br><span class="line">   <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  a</span><br><span class="line"><span class="number">1</span>  b</span><br><span class="line"><span class="number">2</span>  c</span><br><span class="line">用上述方式创建的时候是不需要指定index的，但是用标量创建的时候是需要指定index的：</span><br><span class="line">pd.DataFrame(&#123;<span class="string">'a'</span>:<span class="string">'A'</span>,<span class="string">'b'</span>:<span class="string">'B'</span>&#125;)</span><br><span class="line">ValueError: If using all scalar values, you must <span class="keyword">pass</span> an index</span><br></pre></td></tr></table></figure></p><h1 id="基本实例："><a href="#基本实例：" class="headerlink" title="基本实例："></a>基本实例：</h1><p>读取北京2017年07月01日的空气质量情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> df_20170101 =pd.read_csv(path,sep=&apos;,&apos;,decimal=&apos;,&apos;,usecols=[0,1,2,3,4,5,6,7,8,9]) #path是我的文件地址</span><br><span class="line">       date  hour       type  dongfour   天坛   官园  万寿西宫  奥体中心  农展馆   万柳</span><br><span class="line">0  20170101    22      PM2.5       469  357  476   416   453  398  468</span><br><span class="line">1  20170101    22  PM2.5_24h       NaN  NaN  NaN   NaN   NaN  NaN  NaN</span><br><span class="line">2  20170101    22       PM10       594  449  548   474   467  469  518</span><br><span class="line">3  20170101    22   PM10_24h       NaN  NaN  NaN   NaN   NaN  NaN  NaN</span><br><span class="line">4  20170101    22        AQI       494  405  484   444   469  432  479</span><br><span class="line">5  20170101    23      PM2.5       470  351  500   403   417  392  459</span><br><span class="line">6  20170101    23  PM2.5_24h       NaN  NaN  NaN   NaN   NaN  NaN  NaN</span><br><span class="line">7  20170101    23       PM10       558  467  583   469   443  480  529</span><br><span class="line">8  20170101    23   PM10_24h       NaN  NaN  NaN   NaN   NaN  NaN  NaN</span><br><span class="line">9  20170101    23        AQI       480  401  500   435   445  428  473</span><br></pre></td></tr></table></figure></p><p>假设需要获取天坛的22点到23点情况，那么只需要使用df_20170101[‘天坛’]：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0    357</span><br><span class="line">1    NaN</span><br><span class="line">2    449</span><br><span class="line">3    NaN</span><br><span class="line">4    405</span><br><span class="line">5    351</span><br><span class="line">6    NaN</span><br><span class="line">7    467</span><br><span class="line">8    NaN</span><br><span class="line">9    401</span><br></pre></td></tr></table></figure></p><p>这就是pandas的另一种结构：series，类似于一个竖着地数组，那么假设现在需要获取天坛的22点的pm2.5<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一种方式是知道索引:</span><br><span class="line">In [6]: df_20170101.loc[0][&apos;天坛&apos;]</span><br><span class="line">Out[6]: 357.0</span><br><span class="line">一种则是获取22点并且type为PM2.5的时候的天坛</span><br><span class="line">In [7]: df_20170101.loc[(df_20170101[&apos;hour&apos;]==22) &amp; (df_20170101[&apos;type&apos;]==&apos;PM2.5&apos;),&apos;天坛&apos;]</span><br><span class="line">Out[7]: </span><br><span class="line">0    357</span><br><span class="line">Name: 天坛, dtype: float64</span><br></pre></td></tr></table></figure></p><p>那么这个数据中有很多的NaN值，其中PM2.5_24h的值发现都为NaN，则这个值其实是可以被剔除的，那么常用的做法就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [8]: df_20170101.loc[~df_20170101[&apos;dongfour&apos;].isnull()]</span><br><span class="line">Out[8]: </span><br><span class="line">       date  hour   type  dongfour   天坛   官园  万寿西宫  奥体中心  农展馆   万柳</span><br><span class="line">0  20170101    22  PM2.5       469  357  476   416   453  398  468</span><br><span class="line">2  20170101    22   PM10       594  449  548   474   467  469  518</span><br><span class="line">4  20170101    22    AQI       494  405  484   444   469  432  479</span><br><span class="line">5  20170101    23  PM2.5       470  351  500   403   417  392  459</span><br><span class="line">7  20170101    23   PM10       558  467  583   469   443  480  529</span><br><span class="line">9  20170101    23    AQI       480  401  500   435   445  428  473</span><br><span class="line"></span><br><span class="line">至于为什么选择dongfour是因为选择其他的也是一样的，都可以，但是如果需要将NaN的值替换成0的话只需要执行</span><br><span class="line">In [9]: df_20170101.fillna(0)</span><br><span class="line">Out[9]: </span><br><span class="line">       date  hour       type  dongfour   天坛   官园  万寿西宫  奥体中心  农展馆   万柳</span><br><span class="line">0  20170101    22      PM2.5       469  357  476   416   453  398  468</span><br><span class="line">1  20170101    22  PM2.5_24h         0    0    0     0     0    0    0</span><br><span class="line">2  20170101    22       PM10       594  449  548   474   467  469  518</span><br><span class="line">3  20170101    22   PM10_24h         0    0    0     0     0    0    0</span><br><span class="line">4  20170101    22        AQI       494  405  484   444   469  432  479</span><br><span class="line">5  20170101    23      PM2.5       470  351  500   403   417  392  459</span><br><span class="line">6  20170101    23  PM2.5_24h         0    0    0     0     0    0    0</span><br><span class="line">7  20170101    23       PM10       558  467  583   469   443  480  529</span><br><span class="line">8  20170101    23   PM10_24h         0    0    0     0     0    0    0</span><br><span class="line">9  20170101    23        AQI       480  401  500   435   445  428  473</span><br><span class="line">就会将NaN值全部转为0</span><br></pre></td></tr></table></figure></p><h1 id="Group实例："><a href="#Group实例：" class="headerlink" title="Group实例："></a>Group实例：</h1><p>若现在需要统计dongfour的22到23点的PM2.5平均值，那么需要对type进行groupby:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [29]: df_20170101[&apos;dongfourmean&apos;]=df_20170101.groupby(&apos;type&apos;)[&apos;dongfour&apos;].apply(lambda x : pd.Series(np.mean(x),index=x.index))</span><br><span class="line"></span><br><span class="line">In [30]: df_20170101</span><br><span class="line">Out[30]: </span><br><span class="line">       date  hour   type  dongfour   天坛   官园  奥体中心  农展馆   万柳  dongfourmean</span><br><span class="line">0  20170101    22  PM2.5       469  357  476   453  398  468         469.5</span><br><span class="line">2  20170101    22   PM10       594  449  548   467  469  518         576.0</span><br><span class="line">4  20170101    22    AQI       494  405  484   469  432  479         487.0</span><br><span class="line">5  20170101    23  PM2.5       470  351  500   417  392  459         469.5</span><br><span class="line">7  20170101    23   PM10       558  467  583   443  480  529         576.0</span><br><span class="line">9  20170101    23    AQI       480  401  500   445  428  473         487.0</span><br><span class="line">因为df_20170101[&apos;dongfourmean&apos;]是一个Series所以返回的时候也是需要Series</span><br></pre></td></tr></table></figure></p><p>若现在需要求的是dongfour到万柳的22点的PM2.5平均值则是可以先对df_20170101进行一个转置操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [35]: df_T</span><br><span class="line">Out[35]: </span><br><span class="line">                     0         2         4         5         7         9</span><br><span class="line">date          20170101  20170101  20170101  20170101  20170101  20170101</span><br><span class="line">hour                22        22        22        23        23        23</span><br><span class="line">type             PM2.5      PM10       AQI     PM2.5      PM10       AQI</span><br><span class="line">dongfour           469       594       494       470       558       480</span><br><span class="line">天坛                 357       449       405       351       467       401</span><br><span class="line">官园                 476       548       484       500       583       500</span><br><span class="line">奥体中心               453       467       469       417       443       445</span><br><span class="line">农展馆                398       469       432       392       480       428</span><br><span class="line">万柳                 468       518       479       459       529       473</span><br><span class="line">dongfourmean     469.5       576       487     469.5       576       487</span><br><span class="line"></span><br><span class="line">In [38]: np.mean(df_T.ix[3:8][0])</span><br><span class="line">Out[38]: 430.60000000000002</span><br></pre></td></tr></table></figure></p><h1 id="注意细节："><a href="#注意细节：" class="headerlink" title="注意细节："></a>注意细节：</h1><p>pandas进行group之后是不可以在用loc进行操作的，即在pandas里面<code>GroupBy objects</code>进行一些操作的话可以采用apply，而不能使用loc<br>若非要使用loc则在使用groups之后转化成一个dataframe之后再进行一些dataframe的操作</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于流和多态的一些记录</title>
      <link href="/2017/11/10/%E5%85%B3%E4%BA%8E%E6%B5%81%E5%92%8C%E5%A4%9A%E6%80%81%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/11/10/%E5%85%B3%E4%BA%8E%E6%B5%81%E5%92%8C%E5%A4%9A%E6%80%81%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="流的读取问题"><a href="#流的读取问题" class="headerlink" title="流的读取问题"></a>流的读取问题</h1><h2 id="read-方法"><a href="#read-方法" class="headerlink" title="read()方法"></a>read()方法</h2><p>read()方法经常用于读取一个byte数组或者char数组，其内部的方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> in.read(b, <span class="number">0</span>, b.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先在读取字节流的时候是所有的字节流的顶级类的是InputStream<strong>抽象类</strong>，而继承自Inputstream的类都是带有read方法，每一个类几乎丢重写了自己的read方法，而这就是多态的一种体现。</p><h2 id="关于socket-getInputStream-方法获取的InputStream"><a href="#关于socket-getInputStream-方法获取的InputStream" class="headerlink" title="关于socket.getInputStream()方法获取的InputStream"></a>关于socket.getInputStream()方法获取的InputStream</h2><p>这个获取的输入流是<code>SocketInputStream</code>,在这个类里面有一个变量就是<code>private boolean eof;</code><br>这个变量在read方法中可以用于判断文件是否已经到尾了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> length, <span class="keyword">int</span> timeout)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// EOF already encountered</span></span><br><span class="line">        <span class="keyword">if</span> (eof) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//省略后面方法</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h1 id="多态："><a href="#多态：" class="headerlink" title="多态："></a>多态：</h1><p>其实在java的字节流处理类中就很好的利用了多态，以前只是了解但是实际使用的不多。而且最重要的是父类的静态变量子类是可以直接继承过来的</p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于Java的HashMap</title>
      <link href="/2017/11/09/%E5%85%B3%E4%BA%8EJava%E7%9A%84HashMap/"/>
      <url>/2017/11/09/%E5%85%B3%E4%BA%8EJava%E7%9A%84HashMap/</url>
      <content type="html"><![CDATA[<h1 id="Map接口："><a href="#Map接口：" class="headerlink" title="Map接口："></a>Map接口：</h1><ol><li>在map接口中的存在一个主接口：<code>public interface Map</code> 和一个内部接口：<code>interface Entry</code></li><li>其中<em>Map接口</em>主要功能是提供map的一些基本的操作，例如put,inEmpty,get等，而<em>Entry接口</em>则主要是负责遍历操作时的一些方法，例如<code>getKey(),getValue()，setValue</code>等</li></ol><p>#HashMap实现类：</p><ol><li>在HaspMap这个类里面其实包含了很多的内部类：如下图：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Node</span><br><span class="line">HashMap</span><br><span class="line">KeySet</span><br><span class="line">KeySpliterator</span><br><span class="line">EntrySet</span><br><span class="line">Values</span><br><span class="line">HashIterator</span><br><span class="line">KeyIterator</span><br><span class="line">ValueIterator</span><br><span class="line">EntryIterator</span><br><span class="line">HashMapSpliterator</span><br><span class="line">ValueSpliterator</span><br><span class="line">EntrySpliterator</span><br><span class="line">TreeNode</span><br></pre></td></tr></table></figure></li></ol><h2 id="TreeNode类：-TreeNode类是一个红黑树：里面包含的是一些红黑树的操作；"><a href="#TreeNode类：-TreeNode类是一个红黑树：里面包含的是一些红黑树的操作；" class="headerlink" title="TreeNode类： TreeNode类是一个红黑树：里面包含的是一些红黑树的操作；"></a>TreeNode类： TreeNode类是一个红黑树：里面包含的是一些红黑树的操作；</h2><h2 id="EntrySet类：-EntrySet类是提供一个HashMap的遍历方式的一个类，EntrySet类里面有iterator方法，其作用在于map的一种遍历方式："><a href="#EntrySet类：-EntrySet类是提供一个HashMap的遍历方式的一个类，EntrySet类里面有iterator方法，其作用在于map的一种遍历方式：" class="headerlink" title="EntrySet类： EntrySet类是提供一个HashMap的遍历方式的一个类，EntrySet类里面有iterator方法，其作用在于map的一种遍历方式："></a>EntrySet类： EntrySet类是提供一个HashMap的遍历方式的一个类，EntrySet类里面有iterator方法，其作用在于map的一种遍历方式：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator iterator =map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">    Map.Entry&lt;Object,Object&gt; map1 = (Map.Entry&lt;Object, Object&gt;) iterator.next();</span><br><span class="line">    System.out.println(map1.getKey());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里涉及的知识是EntrySet是继承了AbstractSet间接实现了Set接口，而map.entrySet()方法返回的是一个Set&lt;Map.Entry&lt;K,V&gt;&gt;这个实例。</p><h2 id="其他的暂时还不知道有什么用"><a href="#其他的暂时还不知道有什么用" class="headerlink" title="其他的暂时还不知道有什么用"></a>其他的暂时还不知道有什么用</h2><h1 id="关于HashMap的其他细节"><a href="#关于HashMap的其他细节" class="headerlink" title="关于HashMap的其他细节"></a><strong>关于HashMap的其他细节</strong></h1><h3 id="每一扩容都是2的n次方："><a href="#每一扩容都是2的n次方：" class="headerlink" title="每一扩容都是2的n次方："></a>每一扩容都是2的n次方：</h3><p>首先为什么每一次都是2的n次方这是由于hash函数导致的，假设一个值是1001，那么另一个值可以是1101,1011,1111，这三种情况做且运算的话结果都是1001，发生了三次碰撞，那么假设固定值是2的n次方的话，减一之后是1111，折三个数与其做且运算的话都不会相同，所以会较小碰撞次数。</p><h3 id="允许null作为键-值"><a href="#允许null作为键-值" class="headerlink" title="允许null作为键/值"></a>允许null作为键/值</h3><p>那么直接看代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">     Node&lt;K,V&gt; e;</span><br><span class="line">     <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> h;</span><br><span class="line">     <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">     Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">     <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">         (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">             ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">             <span class="keyword">return</span> first;</span><br><span class="line">         <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                 <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">             <span class="keyword">do</span> &#123;</span><br><span class="line">                 <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                     ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                     <span class="keyword">return</span> e;</span><br><span class="line">             &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>很明显当我们传入的参数是null得时候hash的值是0的时候<code>first = tab[(n - 1) &amp; hash]</code>这个first永远是tab[0];但是又由于tab的长度是2的n次方,所以tab[0]肯定是null，所以当键是null的时候得到的也是null。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于ArrayList的所见所想</title>
      <link href="/2017/11/07/%E5%85%B3%E4%BA%8EArrayLIst%E7%9A%84%E6%89%80%E8%A7%81%E6%89%80%E6%83%B3/"/>
      <url>/2017/11/07/%E5%85%B3%E4%BA%8EArrayLIst%E7%9A%84%E6%89%80%E8%A7%81%E6%89%80%E6%83%B3/</url>
      <content type="html"><![CDATA[<h1 id="关于ArrrayList扩容："><a href="#关于ArrrayList扩容：" class="headerlink" title="关于ArrrayList扩容："></a>关于ArrrayList扩容：</h1><blockquote><p>今天在面试的时候面试官提到过ArrayList扩容是原来的1.5倍加一，但是我看jdk1.8的时候是显示为1.5倍</p></blockquote><h3 id="查看源码："><a href="#查看源码：" class="headerlink" title="查看源码："></a>查看源码：</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java1.8的扩容方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = minCapacity;</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">       <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p> 那么ArrayList会是扩充1.5倍之后加一呢？</p><blockquote><p>于是翻看以前的jdk源码，发现在jdk1.6的时候其代码确实是+1了<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java1.6版本的扩容方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       <span class="keyword">if</span> (minCapacity &gt; oldCapacity) &#123;</span><br><span class="line">           Object oldData[] = elementData;</span><br><span class="line">           <span class="keyword">int</span> newCapacity = (oldCapacity * <span class="number">3</span>)/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (newCapacity &lt; minCapacity)</span><br><span class="line">               newCapacity = minCapacity;</span><br><span class="line">           <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">           elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="关于其扩容具体做法："><a href="#关于其扩容具体做法：" class="headerlink" title="关于其扩容具体做法："></a>关于其扩容具体做法：</h1><h3 id="jdk1-8"><a href="#jdk1-8" class="headerlink" title="jdk1.8"></a>jdk1.8</h3><p> 其次再jdk1.8中的ArrayList的一些分析：<br> 首先需要向List中添加元素的时候：</p><blockquote><p>调用 boolean add(E e);<br> 这个方法首先会调用 ensureCapacityInternal(int)方法<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p> 当第一次调用的时候因为在构造方法里面已经将设置为’elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA’<br> 所以第一次调用的时候是直接接着调用’private void ensureExplicitCapacity(int minCapacity)’方法。<br> 但是这里会发现一个问题就是jdk1.8并未提供初始的默认值，<br> 在jdk1.6中ArrayList的构造方法：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>();</span><br><span class="line">      <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                             initialCapacity);</span><br><span class="line">      <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p> 但是在jdk1.8中却并未有默认的初始值：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 而是提供了一个修改容量的方法：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">           <span class="comment">// any size if not default element table</span></span><br><span class="line">           ? <span class="number">0</span></span><br><span class="line">           <span class="comment">// larger than default for default empty table. It's already</span></span><br><span class="line">           <span class="comment">// supposed to be at default size.</span></span><br><span class="line">           : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">           ensureExplicitCapacity(minCapacity);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java集合 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装hexo的一些注意事项</title>
      <link href="/2017/11/06/%E5%AE%89%E8%A3%85hexo%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2017/11/06/%E5%AE%89%E8%A3%85hexo%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      <content type="html"><![CDATA[<h1 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h1><ol><li>首先安装npm — </li><li>然后安装hexo    <code>npm install hexo-cli -g</code></li><li>初始化一个hexo项目  <code>hexo init blog</code></li><li>添加配置文件  <code>pm install --save hexo-renderer-jade hexo-renderer-scss hexo-generator-feed                         hexo-generator-sitemap hexo-browsersync hexo-generator-archive</code></li><li>安装 <code>npm install</code></li></ol><h1 id="添加主题文件"><a href="#添加主题文件" class="headerlink" title="添加主题文件:"></a>添加主题文件:</h1><ul><li>在github上找出自己喜欢的一个主题</li><li>用git命令clone下来</li><li>将文件放到themes文件夹，然后修改hexo文件的_config.yml</li><li>将themes文件夹里面的那个主题名称添加到theme这个标签之后</li><li>可以在theme文件夹里面修改_config.yml这个文件来获得想要的效果</li></ul>]]></content>
      
      <categories>
          
          <category> hexo相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人记录 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文章题目</title>
      <link href="/2017/11/05/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/"/>
      <url>/2017/11/05/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 测试使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无聊测试 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
